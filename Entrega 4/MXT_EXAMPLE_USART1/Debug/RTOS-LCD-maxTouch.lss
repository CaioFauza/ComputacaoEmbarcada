
RTOS-LCD-maxTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d84  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408d84  00408d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00408d8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bedc  204009c0  0040974c  000209c0  2**2
                  ALLOC
  4 .stack        00002004  2040c89c  00415628  000209c0  2**0
                  ALLOC
  5 .heap         00000200  2040e8a0  0041762c  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002ae54  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000059ee  00000000  00000000  0004b89b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000de4a  00000000  00000000  00051289  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012d8  00000000  00000000  0005f0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015a0  00000000  00000000  000603ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ee83  00000000  00000000  0006194b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017266  00000000  00000000  000707ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009e90b  00000000  00000000  00087a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003e44  00000000  00000000  00126340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a0 e8 40 20 19 1d 40 00 17 1d 40 00 17 1d 40 00     ..@ ..@...@...@.
  400010:	17 1d 40 00 17 1d 40 00 17 1d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f1 20 40 00 17 1d 40 00 00 00 00 00 91 21 40 00     . @...@......!@.
  40003c:	f9 21 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     .!@...@...@...@.
  40004c:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  40005c:	17 1d 40 00 17 1d 40 00 00 00 00 00 91 16 40 00     ..@...@.......@.
  40006c:	a5 16 40 00 b9 16 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  40007c:	17 1d 40 00 cd 16 40 00 e1 16 40 00 17 1d 40 00     ..@...@...@...@.
  40008c:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  40009c:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  4000ac:	17 1d 40 00 17 1d 40 00 5d 02 40 00 17 1d 40 00     ..@...@.].@...@.
  4000bc:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  4000cc:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  4000dc:	17 1d 40 00 71 02 40 00 17 1d 40 00 17 1d 40 00     ..@.q.@...@...@.
  4000ec:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  4000fc:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  40010c:	17 1d 40 00 17 1d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ......@...@...@.
  40012c:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  40013c:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  40014c:	17 1d 40 00 17 1d 40 00 17 1d 40 00 17 1d 40 00     ..@...@...@...@.
  40015c:	17 1d 40 00 17 1d 40 00 17 1d 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00408d8c 	.word	0x00408d8c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00408d8c 	.word	0x00408d8c
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00408d8c 	.word	0x00408d8c
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001d4:	b570      	push	{r4, r5, r6, lr}
  4001d6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001dc:	4013      	ands	r3, r2
  4001de:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001e0:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001e2:	4e1c      	ldr	r6, [pc, #112]	; (400254 <afec_process_callback+0x80>)
  4001e4:	4d1c      	ldr	r5, [pc, #112]	; (400258 <afec_process_callback+0x84>)
  4001e6:	42a8      	cmp	r0, r5
  4001e8:	bf14      	ite	ne
  4001ea:	2000      	movne	r0, #0
  4001ec:	2001      	moveq	r0, #1
  4001ee:	0105      	lsls	r5, r0, #4
  4001f0:	e00b      	b.n	40020a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001f2:	2c0e      	cmp	r4, #14
  4001f4:	d81e      	bhi.n	400234 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001f6:	9a01      	ldr	r2, [sp, #4]
  4001f8:	f104 010c 	add.w	r1, r4, #12
  4001fc:	2301      	movs	r3, #1
  4001fe:	408b      	lsls	r3, r1
  400200:	4213      	tst	r3, r2
  400202:	d110      	bne.n	400226 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400204:	3401      	adds	r4, #1
  400206:	2c10      	cmp	r4, #16
  400208:	d022      	beq.n	400250 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40020a:	2c0b      	cmp	r4, #11
  40020c:	d8f1      	bhi.n	4001f2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40020e:	9a01      	ldr	r2, [sp, #4]
  400210:	2301      	movs	r3, #1
  400212:	40a3      	lsls	r3, r4
  400214:	4213      	tst	r3, r2
  400216:	d0f5      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400218:	192b      	adds	r3, r5, r4
  40021a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40021e:	2b00      	cmp	r3, #0
  400220:	d0f0      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400222:	4798      	blx	r3
  400224:	e7ee      	b.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400226:	192b      	adds	r3, r5, r4
  400228:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0e9      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400230:	4798      	blx	r3
  400232:	e7e7      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400234:	9a01      	ldr	r2, [sp, #4]
  400236:	f104 010f 	add.w	r1, r4, #15
  40023a:	2301      	movs	r3, #1
  40023c:	408b      	lsls	r3, r1
  40023e:	4213      	tst	r3, r2
  400240:	d0e0      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400242:	192b      	adds	r3, r5, r4
  400244:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400248:	2b00      	cmp	r3, #0
  40024a:	d0db      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40024c:	4798      	blx	r3
  40024e:	e7d9      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400250:	b002      	add	sp, #8
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	2040c794 	.word	0x2040c794
  400258:	40064000 	.word	0x40064000

0040025c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40025c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40025e:	4802      	ldr	r0, [pc, #8]	; (400268 <AFEC0_Handler+0xc>)
  400260:	4b02      	ldr	r3, [pc, #8]	; (40026c <AFEC0_Handler+0x10>)
  400262:	4798      	blx	r3
  400264:	bd08      	pop	{r3, pc}
  400266:	bf00      	nop
  400268:	4003c000 	.word	0x4003c000
  40026c:	004001d5 	.word	0x004001d5

00400270 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400270:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400272:	4802      	ldr	r0, [pc, #8]	; (40027c <AFEC1_Handler+0xc>)
  400274:	4b02      	ldr	r3, [pc, #8]	; (400280 <AFEC1_Handler+0x10>)
  400276:	4798      	blx	r3
  400278:	bd08      	pop	{r3, pc}
  40027a:	bf00      	nop
  40027c:	40064000 	.word	0x40064000
  400280:	004001d5 	.word	0x004001d5

00400284 <mxt_init>:
* to the maXTouch Xplained Pro.
*
* \param device Pointer to mxt_device struct
*/
void mxt_init(struct mxt_device *device)
{
  400284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400288:	b09c      	sub	sp, #112	; 0x70
  40028a:	4604      	mov	r4, r0
  enum status_code status;

  /* T8 configuration object data */
  uint8_t t8_object[] = {
  40028c:	4d48      	ldr	r5, [pc, #288]	; (4003b0 <mxt_init+0x12c>)
  40028e:	ab19      	add	r3, sp, #100	; 0x64
  400290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400294:	c303      	stmia	r3!, {r0, r1}
  400296:	801a      	strh	r2, [r3, #0]
    0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
    0x00, 0x32, 0x19
  };

  /* T9 configuration object data */
  uint8_t t9_object[] = {
  400298:	ae10      	add	r6, sp, #64	; 0x40
  40029a:	f105 070c 	add.w	r7, r5, #12
  40029e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4002a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4002a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002a6:	683b      	ldr	r3, [r7, #0]
  4002a8:	6033      	str	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
    0x02
  };

  /* T46 configuration object data */
  uint8_t t46_object[] = {
  4002aa:	ab0d      	add	r3, sp, #52	; 0x34
  4002ac:	f105 0230 	add.w	r2, r5, #48	; 0x30
  4002b0:	ca07      	ldmia	r2, {r0, r1, r2}
  4002b2:	c303      	stmia	r3!, {r0, r1}
  4002b4:	701a      	strb	r2, [r3, #0]
    0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
    0x00, 0x00
  };
  
  /* T56 configuration object data */
  uint8_t t56_object[] = {
  4002b6:	ae04      	add	r6, sp, #16
  4002b8:	353c      	adds	r5, #60	; 0x3c
  4002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4002bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4002c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002c2:	682b      	ldr	r3, [r5, #0]
  4002c4:	7033      	strb	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
  };

  /* TWI configuration */
  twihs_master_options_t twi_opt = {
  4002c6:	2500      	movs	r5, #0
  4002c8:	9503      	str	r5, [sp, #12]
  4002ca:	4b3a      	ldr	r3, [pc, #232]	; (4003b4 <mxt_init+0x130>)
  4002cc:	9302      	str	r3, [sp, #8]
  4002ce:	274a      	movs	r7, #74	; 0x4a
  4002d0:	f88d 700c 	strb.w	r7, [sp, #12]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4002d4:	4b38      	ldr	r3, [pc, #224]	; (4003b8 <mxt_init+0x134>)
  4002d6:	9301      	str	r3, [sp, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002d8:	2013      	movs	r0, #19
  4002da:	4b38      	ldr	r3, [pc, #224]	; (4003bc <mxt_init+0x138>)
  4002dc:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4002de:	4e38      	ldr	r6, [pc, #224]	; (4003c0 <mxt_init+0x13c>)
  4002e0:	a901      	add	r1, sp, #4
  4002e2:	4630      	mov	r0, r6
  4002e4:	4b37      	ldr	r3, [pc, #220]	; (4003c4 <mxt_init+0x140>)
  4002e6:	4798      	blx	r3

  status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
  Assert(status == STATUS_OK);

  /* Initialize the maXTouch device */
  status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  4002e8:	2302      	movs	r3, #2
  4002ea:	463a      	mov	r2, r7
  4002ec:	4631      	mov	r1, r6
  4002ee:	4620      	mov	r0, r4
  4002f0:	4e35      	ldr	r6, [pc, #212]	; (4003c8 <mxt_init+0x144>)
  4002f2:	47b0      	blx	r6
  MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
  Assert(status == STATUS_OK);

  /* Issue soft reset of maXTouch device by writing a non-zero value to
  * the reset register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  4002f4:	462a      	mov	r2, r5
  4002f6:	2106      	movs	r1, #6
  4002f8:	4620      	mov	r0, r4
  4002fa:	4e34      	ldr	r6, [pc, #208]	; (4003cc <mxt_init+0x148>)
  4002fc:	47b0      	blx	r6
  4002fe:	2201      	movs	r2, #1
  400300:	4601      	mov	r1, r0
  400302:	4620      	mov	r0, r4
  400304:	4f32      	ldr	r7, [pc, #200]	; (4003d0 <mxt_init+0x14c>)
  400306:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

  /* Wait for the reset of the device to complete */
  delay_ms(MXT_RESET_TIME);
  400308:	4832      	ldr	r0, [pc, #200]	; (4003d4 <mxt_init+0x150>)
  40030a:	4b33      	ldr	r3, [pc, #204]	; (4003d8 <mxt_init+0x154>)
  40030c:	4798      	blx	r3

  /* Write data to configuration registers in T7 configuration object */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40030e:	462a      	mov	r2, r5
  400310:	2107      	movs	r1, #7
  400312:	4620      	mov	r0, r4
  400314:	47b0      	blx	r6
  400316:	2220      	movs	r2, #32
  400318:	4601      	mov	r1, r0
  40031a:	4620      	mov	r0, r4
  40031c:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40031e:	462a      	mov	r2, r5
  400320:	2107      	movs	r1, #7
  400322:	4620      	mov	r0, r4
  400324:	47b0      	blx	r6
  400326:	1c41      	adds	r1, r0, #1
  400328:	2210      	movs	r2, #16
  40032a:	b289      	uxth	r1, r1
  40032c:	4620      	mov	r0, r4
  40032e:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400330:	462a      	mov	r2, r5
  400332:	2107      	movs	r1, #7
  400334:	4620      	mov	r0, r4
  400336:	47b0      	blx	r6
  400338:	1c81      	adds	r1, r0, #2
  40033a:	224b      	movs	r2, #75	; 0x4b
  40033c:	b289      	uxth	r1, r1
  40033e:	4620      	mov	r0, r4
  400340:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400342:	462a      	mov	r2, r5
  400344:	2107      	movs	r1, #7
  400346:	4620      	mov	r0, r4
  400348:	47b0      	blx	r6
  40034a:	1cc1      	adds	r1, r0, #3
  40034c:	2284      	movs	r2, #132	; 0x84
  40034e:	b289      	uxth	r1, r1
  400350:	4620      	mov	r0, r4
  400352:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

  /* Write predefined configuration data to configuration objects */
  mxt_write_config_object(device, mxt_get_object_address(device,
  400354:	462a      	mov	r2, r5
  400356:	2108      	movs	r1, #8
  400358:	4620      	mov	r0, r4
  40035a:	47b0      	blx	r6
  40035c:	aa19      	add	r2, sp, #100	; 0x64
  40035e:	4601      	mov	r1, r0
  400360:	4620      	mov	r0, r4
  400362:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4003dc <mxt_init+0x158>
  400366:	47c0      	blx	r8
  MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400368:	462a      	mov	r2, r5
  40036a:	2109      	movs	r1, #9
  40036c:	4620      	mov	r0, r4
  40036e:	47b0      	blx	r6
  400370:	aa10      	add	r2, sp, #64	; 0x40
  400372:	4601      	mov	r1, r0
  400374:	4620      	mov	r0, r4
  400376:	47c0      	blx	r8
  MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400378:	462a      	mov	r2, r5
  40037a:	212e      	movs	r1, #46	; 0x2e
  40037c:	4620      	mov	r0, r4
  40037e:	47b0      	blx	r6
  400380:	aa0d      	add	r2, sp, #52	; 0x34
  400382:	4601      	mov	r1, r0
  400384:	4620      	mov	r0, r4
  400386:	47c0      	blx	r8
  MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400388:	462a      	mov	r2, r5
  40038a:	2138      	movs	r1, #56	; 0x38
  40038c:	4620      	mov	r0, r4
  40038e:	47b0      	blx	r6
  400390:	aa04      	add	r2, sp, #16
  400392:	4601      	mov	r1, r0
  400394:	4620      	mov	r0, r4
  400396:	47c0      	blx	r8
  MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

  /* Issue recalibration command to maXTouch device by writing a non-zero
  * value to the calibrate register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400398:	462a      	mov	r2, r5
  40039a:	2106      	movs	r1, #6
  40039c:	4620      	mov	r0, r4
  40039e:	47b0      	blx	r6
  4003a0:	1c81      	adds	r1, r0, #2
  4003a2:	2201      	movs	r2, #1
  4003a4:	b289      	uxth	r1, r1
  4003a6:	4620      	mov	r0, r4
  4003a8:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
  4003aa:	b01c      	add	sp, #112	; 0x70
  4003ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003b0:	00407c18 	.word	0x00407c18
  4003b4:	00061a80 	.word	0x00061a80
  4003b8:	08f0d180 	.word	0x08f0d180
  4003bc:	00401815 	.word	0x00401815
  4003c0:	40018000 	.word	0x40018000
  4003c4:	00401a61 	.word	0x00401a61
  4003c8:	004003e1 	.word	0x004003e1
  4003cc:	00400679 	.word	0x00400679
  4003d0:	00400731 	.word	0x00400731
  4003d4:	003228d8 	.word	0x003228d8
  4003d8:	20400001 	.word	0x20400001
  4003dc:	004006b9 	.word	0x004006b9

004003e0 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4003e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003e2:	b087      	sub	sp, #28
  4003e4:	4604      	mov	r4, r0
  4003e6:	460e      	mov	r6, r1
  4003e8:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4003ea:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4003ec:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4003ee:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4003f0:	2500      	movs	r5, #0
  4003f2:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4003f4:	2007      	movs	r0, #7
  4003f6:	4b9d      	ldr	r3, [pc, #628]	; (40066c <mxt_init_device+0x28c>)
  4003f8:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4003fa:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4003fc:	9501      	str	r5, [sp, #4]
  4003fe:	9505      	str	r5, [sp, #20]
  400400:	2302      	movs	r3, #2
  400402:	9302      	str	r3, [sp, #8]
  400404:	9003      	str	r0, [sp, #12]
  400406:	2307      	movs	r3, #7
  400408:	9304      	str	r3, [sp, #16]
  40040a:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40040e:	a901      	add	r1, sp, #4
  400410:	4630      	mov	r0, r6
  400412:	4b97      	ldr	r3, [pc, #604]	; (400670 <mxt_init_device+0x290>)
  400414:	4798      	blx	r3
  400416:	1b40      	subs	r0, r0, r5
  400418:	bf18      	it	ne
  40041a:	2001      	movne	r0, #1
  40041c:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  40041e:	b108      	cbz	r0, 400424 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400420:	b007      	add	sp, #28
  400422:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400424:	6825      	ldr	r5, [r4, #0]
  400426:	79a8      	ldrb	r0, [r5, #6]
  400428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40042c:	0040      	lsls	r0, r0, #1
  40042e:	4b8f      	ldr	r3, [pc, #572]	; (40066c <mxt_init_device+0x28c>)
  400430:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400432:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400434:	2300      	movs	r3, #0
  400436:	9301      	str	r3, [sp, #4]
  400438:	9304      	str	r3, [sp, #16]
  40043a:	9305      	str	r3, [sp, #20]
  40043c:	2307      	movs	r3, #7
  40043e:	f88d 3004 	strb.w	r3, [sp, #4]
  400442:	2302      	movs	r3, #2
  400444:	9302      	str	r3, [sp, #8]
  400446:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400448:	79ab      	ldrb	r3, [r5, #6]
  40044a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40044e:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400450:	9304      	str	r3, [sp, #16]
  400452:	7b23      	ldrb	r3, [r4, #12]
  400454:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400458:	a901      	add	r1, sp, #4
  40045a:	68a0      	ldr	r0, [r4, #8]
  40045c:	4b84      	ldr	r3, [pc, #528]	; (400670 <mxt_init_device+0x290>)
  40045e:	4798      	blx	r3
  400460:	3000      	adds	r0, #0
  400462:	bf18      	it	ne
  400464:	2001      	movne	r0, #1
  400466:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  400468:	2800      	cmp	r0, #0
  40046a:	d1d9      	bne.n	400420 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  40046c:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  40046e:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400470:	79bb      	ldrb	r3, [r7, #6]
  400472:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  400476:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  400478:	3607      	adds	r6, #7
  40047a:	b2b6      	uxth	r6, r6
  40047c:	463a      	mov	r2, r7
  40047e:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400480:	2100      	movs	r1, #0
		result ^= crcpoly;
  400482:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400674 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400486:	f892 e001 	ldrb.w	lr, [r2, #1]
  40048a:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40048c:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400490:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400494:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  400498:	bf18      	it	ne
  40049a:	ea81 010c 	eorne.w	r1, r1, ip
  40049e:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  4004a0:	42ba      	cmp	r2, r7
  4004a2:	d1f0      	bne.n	400486 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4004a4:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4004aa:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4004ae:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4004b2:	d003      	beq.n	4004bc <mxt_init_device+0xdc>
		result ^= crcpoly;
  4004b4:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4004b8:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4004bc:	f1a6 0708 	sub.w	r7, r6, #8
  4004c0:	2f01      	cmp	r7, #1
  4004c2:	dd12      	ble.n	4004ea <mxt_init_device+0x10a>
  4004c4:	2301      	movs	r3, #1
		result ^= crcpoly;
  4004c6:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400674 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4004ca:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4004cc:	784d      	ldrb	r5, [r1, #1]
  4004ce:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004d0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4004d4:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4004d8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4004dc:	bf18      	it	ne
  4004de:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4004e2:	3302      	adds	r3, #2
  4004e4:	b29b      	uxth	r3, r3
  4004e6:	42bb      	cmp	r3, r7
  4004e8:	dbef      	blt.n	4004ca <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4004ea:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004ec:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4004f0:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4004f4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4004f8:	d003      	beq.n	400502 <mxt_init_device+0x122>
		result ^= crcpoly;
  4004fa:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4004fe:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  400502:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  400506:	2300      	movs	r3, #0
  400508:	9301      	str	r3, [sp, #4]
  40050a:	9305      	str	r3, [sp, #20]
  40050c:	f88d 6004 	strb.w	r6, [sp, #4]
  400510:	0a36      	lsrs	r6, r6, #8
  400512:	f88d 6005 	strb.w	r6, [sp, #5]
  400516:	2302      	movs	r3, #2
  400518:	9302      	str	r3, [sp, #8]
  40051a:	f8cd d00c 	str.w	sp, [sp, #12]
  40051e:	2303      	movs	r3, #3
  400520:	9304      	str	r3, [sp, #16]
  400522:	7b23      	ldrb	r3, [r4, #12]
  400524:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400528:	a901      	add	r1, sp, #4
  40052a:	68a0      	ldr	r0, [r4, #8]
  40052c:	4b50      	ldr	r3, [pc, #320]	; (400670 <mxt_init_device+0x290>)
  40052e:	4798      	blx	r3
  400530:	b328      	cbz	r0, 40057e <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400532:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  400536:	42ab      	cmp	r3, r5
  400538:	f040 808b 	bne.w	400652 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40053c:	6825      	ldr	r5, [r4, #0]
  40053e:	79a8      	ldrb	r0, [r5, #6]
  400540:	b198      	cbz	r0, 40056a <mxt_init_device+0x18a>
  400542:	2300      	movs	r3, #0
  400544:	3301      	adds	r3, #1
  400546:	b2da      	uxtb	r2, r3
  400548:	4290      	cmp	r0, r2
  40054a:	d8fb      	bhi.n	400544 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  40054c:	6862      	ldr	r2, [r4, #4]
  40054e:	1e43      	subs	r3, r0, #1
  400550:	b2db      	uxtb	r3, r3
  400552:	3301      	adds	r3, #1
  400554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400558:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  40055c:	2000      	movs	r0, #0
  40055e:	7953      	ldrb	r3, [r2, #5]
  400560:	4418      	add	r0, r3
  400562:	b2c0      	uxtb	r0, r0
  400564:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400566:	4291      	cmp	r1, r2
  400568:	d1f9      	bne.n	40055e <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40056a:	0040      	lsls	r0, r0, #1
  40056c:	4b3f      	ldr	r3, [pc, #252]	; (40066c <mxt_init_device+0x28c>)
  40056e:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400570:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400572:	79ab      	ldrb	r3, [r5, #6]
  400574:	b173      	cbz	r3, 400594 <mxt_init_device+0x1b4>
  400576:	2700      	movs	r7, #0
  400578:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40057a:	46be      	mov	lr, r7
  40057c:	e037      	b.n	4005ee <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  40057e:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400582:	f89d 3000 	ldrb.w	r3, [sp]
  400586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40058a:	f89d 2001 	ldrb.w	r2, [sp, #1]
  40058e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400592:	e7d0      	b.n	400536 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400594:	f06f 0003 	mvn.w	r0, #3
  400598:	e742      	b.n	400420 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40059a:	3001      	adds	r0, #1
  40059c:	b2c0      	uxtb	r0, r0
  40059e:	6862      	ldr	r2, [r4, #4]
  4005a0:	1953      	adds	r3, r2, r5
  4005a2:	7919      	ldrb	r1, [r3, #4]
  4005a4:	4281      	cmp	r1, r0
  4005a6:	d31c      	bcc.n	4005e2 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  4005a8:	795b      	ldrb	r3, [r3, #5]
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	d0f5      	beq.n	40059a <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4005ae:	6862      	ldr	r2, [r4, #4]
  4005b0:	442a      	add	r2, r5
  4005b2:	7953      	ldrb	r3, [r2, #5]
  4005b4:	2b00      	cmp	r3, #0
  4005b6:	d0f0      	beq.n	40059a <mxt_init_device+0x1ba>
  4005b8:	4633      	mov	r3, r6
							device->object_list[i].type;
  4005ba:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4005bc:	6962      	ldr	r2, [r4, #20]
  4005be:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4005c2:	6962      	ldr	r2, [r4, #20]
  4005c4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4005c8:	7050      	strb	r0, [r2, #1]
					id_index++;
  4005ca:	3301      	adds	r3, #1
  4005cc:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4005ce:	6862      	ldr	r2, [r4, #4]
  4005d0:	442a      	add	r2, r5
  4005d2:	1b99      	subs	r1, r3, r6
  4005d4:	f892 c005 	ldrb.w	ip, [r2, #5]
  4005d8:	b2c9      	uxtb	r1, r1
  4005da:	458c      	cmp	ip, r1
  4005dc:	d8ed      	bhi.n	4005ba <mxt_init_device+0x1da>
					id_index++;
  4005de:	461e      	mov	r6, r3
  4005e0:	e7db      	b.n	40059a <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4005e2:	3701      	adds	r7, #1
  4005e4:	b2ff      	uxtb	r7, r7
  4005e6:	6823      	ldr	r3, [r4, #0]
  4005e8:	799b      	ldrb	r3, [r3, #6]
  4005ea:	429f      	cmp	r7, r3
  4005ec:	d207      	bcs.n	4005fe <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4005ee:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4005f2:	005a      	lsls	r2, r3, #1
  4005f4:	4615      	mov	r5, r2
  4005f6:	6863      	ldr	r3, [r4, #4]
  4005f8:	4413      	add	r3, r2
  4005fa:	4670      	mov	r0, lr
  4005fc:	e7d4      	b.n	4005a8 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4005fe:	b35b      	cbz	r3, 400658 <mxt_init_device+0x278>
  400600:	4610      	mov	r0, r2
  400602:	3b01      	subs	r3, #1
  400604:	b2db      	uxtb	r3, r3
  400606:	3301      	adds	r3, #1
  400608:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40060c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400610:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400612:	7943      	ldrb	r3, [r0, #5]
  400614:	4419      	add	r1, r3
  400616:	b2c9      	uxtb	r1, r1
  400618:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40061a:	4282      	cmp	r2, r0
  40061c:	d1f9      	bne.n	400612 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  40061e:	b1f1      	cbz	r1, 40065e <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400620:	6962      	ldr	r2, [r4, #20]
  400622:	7813      	ldrb	r3, [r2, #0]
  400624:	2b09      	cmp	r3, #9
  400626:	d00f      	beq.n	400648 <mxt_init_device+0x268>
  400628:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40062a:	3301      	adds	r3, #1
  40062c:	b2db      	uxtb	r3, r3
  40062e:	428b      	cmp	r3, r1
  400630:	d00c      	beq.n	40064c <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400632:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  400636:	2809      	cmp	r0, #9
  400638:	d1f7      	bne.n	40062a <mxt_init_device+0x24a>
			return i;
  40063a:	b25b      	sxtb	r3, r3
	if (status == -1) {
  40063c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400640:	d010      	beq.n	400664 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400642:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400644:	2000      	movs	r0, #0
  400646:	e6eb      	b.n	400420 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  400648:	2300      	movs	r3, #0
  40064a:	e7f6      	b.n	40063a <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  40064c:	f06f 0003 	mvn.w	r0, #3
  400650:	e6e6      	b.n	400420 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400652:	f06f 0003 	mvn.w	r0, #3
  400656:	e6e3      	b.n	400420 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400658:	f06f 0003 	mvn.w	r0, #3
  40065c:	e6e0      	b.n	400420 <mxt_init_device+0x40>
  40065e:	f06f 0003 	mvn.w	r0, #3
  400662:	e6dd      	b.n	400420 <mxt_init_device+0x40>
  400664:	f06f 0003 	mvn.w	r0, #3
  400668:	e6da      	b.n	400420 <mxt_init_device+0x40>
  40066a:	bf00      	nop
  40066c:	00404cf1 	.word	0x00404cf1
  400670:	00401a95 	.word	0x00401a95
  400674:	0080001b 	.word	0x0080001b

00400678 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  400678:	6803      	ldr	r3, [r0, #0]
  40067a:	799a      	ldrb	r2, [r3, #6]
  40067c:	b1d2      	cbz	r2, 4006b4 <mxt_get_object_address+0x3c>
{
  40067e:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400680:	6844      	ldr	r4, [r0, #4]
  400682:	7823      	ldrb	r3, [r4, #0]
  400684:	428b      	cmp	r3, r1
  400686:	d00e      	beq.n	4006a6 <mxt_get_object_address+0x2e>
  400688:	1da3      	adds	r3, r4, #6
  40068a:	3a01      	subs	r2, #1
  40068c:	b2d2      	uxtb	r2, r2
  40068e:	3201      	adds	r2, #1
  400690:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400694:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  400698:	4293      	cmp	r3, r2
  40069a:	d009      	beq.n	4006b0 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  40069c:	461c      	mov	r4, r3
  40069e:	f813 0b06 	ldrb.w	r0, [r3], #6
  4006a2:	4288      	cmp	r0, r1
  4006a4:	d1f8      	bne.n	400698 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  4006a6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  4006aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006ae:	4770      	bx	lr
	return 0;
  4006b0:	2000      	movs	r0, #0
  4006b2:	e7fa      	b.n	4006aa <mxt_get_object_address+0x32>
  4006b4:	2000      	movs	r0, #0
  4006b6:	4770      	bx	lr

004006b8 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4006b8:	b530      	push	{r4, r5, lr}
  4006ba:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4006bc:	2300      	movs	r3, #0
  4006be:	9301      	str	r3, [sp, #4]
  4006c0:	9304      	str	r3, [sp, #16]
  4006c2:	9305      	str	r3, [sp, #20]
  4006c4:	f88d 1004 	strb.w	r1, [sp, #4]
  4006c8:	0a0b      	lsrs	r3, r1, #8
  4006ca:	f88d 3005 	strb.w	r3, [sp, #5]
  4006ce:	2302      	movs	r3, #2
  4006d0:	9302      	str	r3, [sp, #8]
  4006d2:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4006d4:	6803      	ldr	r3, [r0, #0]
  4006d6:	799a      	ldrb	r2, [r3, #6]
  4006d8:	b1ba      	cbz	r2, 40070a <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4006da:	6844      	ldr	r4, [r0, #4]
  4006dc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4006e0:	428b      	cmp	r3, r1
  4006e2:	d00f      	beq.n	400704 <mxt_write_config_object+0x4c>
  4006e4:	1da3      	adds	r3, r4, #6
  4006e6:	3a01      	subs	r2, #1
  4006e8:	b2d2      	uxtb	r2, r2
  4006ea:	3201      	adds	r2, #1
  4006ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4006f0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4006f4:	4293      	cmp	r3, r2
  4006f6:	d016      	beq.n	400726 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4006f8:	461c      	mov	r4, r3
  4006fa:	3306      	adds	r3, #6
  4006fc:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  400700:	428d      	cmp	r5, r1
  400702:	d1f7      	bne.n	4006f4 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  400704:	78e2      	ldrb	r2, [r4, #3]
  400706:	3201      	adds	r2, #1
  400708:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  40070a:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  40070c:	7b03      	ldrb	r3, [r0, #12]
  40070e:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400712:	a901      	add	r1, sp, #4
  400714:	6880      	ldr	r0, [r0, #8]
  400716:	4b05      	ldr	r3, [pc, #20]	; (40072c <mxt_write_config_object+0x74>)
  400718:	4798      	blx	r3
  40071a:	3000      	adds	r0, #0
  40071c:	bf18      	it	ne
  40071e:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400720:	4240      	negs	r0, r0
  400722:	b007      	add	sp, #28
  400724:	bd30      	pop	{r4, r5, pc}
	return 0;
  400726:	2200      	movs	r2, #0
  400728:	e7ef      	b.n	40070a <mxt_write_config_object+0x52>
  40072a:	bf00      	nop
  40072c:	00401b41 	.word	0x00401b41

00400730 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400730:	b500      	push	{lr}
  400732:	b089      	sub	sp, #36	; 0x24
  400734:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400738:	2300      	movs	r3, #0
  40073a:	9303      	str	r3, [sp, #12]
  40073c:	9307      	str	r3, [sp, #28]
  40073e:	f88d 100c 	strb.w	r1, [sp, #12]
  400742:	0a09      	lsrs	r1, r1, #8
  400744:	f88d 100d 	strb.w	r1, [sp, #13]
  400748:	2302      	movs	r3, #2
  40074a:	9304      	str	r3, [sp, #16]
  40074c:	f10d 0307 	add.w	r3, sp, #7
  400750:	9305      	str	r3, [sp, #20]
  400752:	2301      	movs	r3, #1
  400754:	9306      	str	r3, [sp, #24]
  400756:	7b03      	ldrb	r3, [r0, #12]
  400758:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  40075c:	a903      	add	r1, sp, #12
  40075e:	6880      	ldr	r0, [r0, #8]
  400760:	4b04      	ldr	r3, [pc, #16]	; (400774 <mxt_write_config_reg+0x44>)
  400762:	4798      	blx	r3
  400764:	3000      	adds	r0, #0
  400766:	bf18      	it	ne
  400768:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40076a:	4240      	negs	r0, r0
  40076c:	b009      	add	sp, #36	; 0x24
  40076e:	f85d fb04 	ldr.w	pc, [sp], #4
  400772:	bf00      	nop
  400774:	00401b41 	.word	0x00401b41

00400778 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  400778:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40077a:	4b07      	ldr	r3, [pc, #28]	; (400798 <mxt_is_message_pending+0x20>)
  40077c:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400780:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400782:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400784:	f002 021f 	and.w	r2, r2, #31
  400788:	2301      	movs	r3, #1
  40078a:	fa03 f202 	lsl.w	r2, r3, r2
  40078e:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400790:	bf0c      	ite	eq
  400792:	4618      	moveq	r0, r3
  400794:	2000      	movne	r0, #0
  400796:	4770      	bx	lr
  400798:	00200707 	.word	0x00200707

0040079c <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  40079c:	b530      	push	{r4, r5, lr}
  40079e:	b087      	sub	sp, #28
  4007a0:	4604      	mov	r4, r0
  4007a2:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  4007a4:	2200      	movs	r2, #0
  4007a6:	2105      	movs	r1, #5
  4007a8:	4b0d      	ldr	r3, [pc, #52]	; (4007e0 <mxt_read_message+0x44>)
  4007aa:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4007ac:	2300      	movs	r3, #0
  4007ae:	9301      	str	r3, [sp, #4]
  4007b0:	9305      	str	r3, [sp, #20]
  4007b2:	f88d 0004 	strb.w	r0, [sp, #4]
  4007b6:	0a00      	lsrs	r0, r0, #8
  4007b8:	f88d 0005 	strb.w	r0, [sp, #5]
  4007bc:	2302      	movs	r3, #2
  4007be:	9302      	str	r3, [sp, #8]
  4007c0:	9503      	str	r5, [sp, #12]
  4007c2:	2309      	movs	r3, #9
  4007c4:	9304      	str	r3, [sp, #16]
  4007c6:	7b23      	ldrb	r3, [r4, #12]
  4007c8:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4007cc:	a901      	add	r1, sp, #4
  4007ce:	68a0      	ldr	r0, [r4, #8]
  4007d0:	4b04      	ldr	r3, [pc, #16]	; (4007e4 <mxt_read_message+0x48>)
  4007d2:	4798      	blx	r3
  4007d4:	3000      	adds	r0, #0
  4007d6:	bf18      	it	ne
  4007d8:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4007da:	4240      	negs	r0, r0
  4007dc:	b007      	add	sp, #28
  4007de:	bd30      	pop	{r4, r5, pc}
  4007e0:	00400679 	.word	0x00400679
  4007e4:	00401a95 	.word	0x00401a95

004007e8 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4007ea:	b085      	sub	sp, #20
  4007ec:	4604      	mov	r4, r0
  4007ee:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4007f0:	4d17      	ldr	r5, [pc, #92]	; (400850 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4007f2:	4f18      	ldr	r7, [pc, #96]	; (400854 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  4007f4:	4620      	mov	r0, r4
  4007f6:	47a8      	blx	r5
  4007f8:	b328      	cbz	r0, 400846 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4007fa:	a901      	add	r1, sp, #4
  4007fc:	4620      	mov	r0, r4
  4007fe:	47b8      	blx	r7
  400800:	4603      	mov	r3, r0
  400802:	bb10      	cbnz	r0, 40084a <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  400804:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400808:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  40080a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  40080e:	2a09      	cmp	r2, #9
  400810:	d1f0      	bne.n	4007f4 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400812:	7f22      	ldrb	r2, [r4, #28]
  400814:	1a9b      	subs	r3, r3, r2
  400816:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  400818:	f89d 3005 	ldrb.w	r3, [sp, #5]
  40081c:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  40081e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400822:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  400826:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  400828:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  40082c:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  40082e:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400832:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  400836:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  40083a:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  40083c:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400840:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400842:	2300      	movs	r3, #0
  400844:	e001      	b.n	40084a <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  400846:	f06f 0303 	mvn.w	r3, #3
}
  40084a:	4618      	mov	r0, r3
  40084c:	b005      	add	sp, #20
  40084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400850:	00400779 	.word	0x00400779
  400854:	0040079d 	.word	0x0040079d

00400858 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400858:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40085a:	4810      	ldr	r0, [pc, #64]	; (40089c <sysclk_init+0x44>)
  40085c:	4b10      	ldr	r3, [pc, #64]	; (4008a0 <sysclk_init+0x48>)
  40085e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400860:	213e      	movs	r1, #62	; 0x3e
  400862:	2000      	movs	r0, #0
  400864:	4b0f      	ldr	r3, [pc, #60]	; (4008a4 <sysclk_init+0x4c>)
  400866:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400868:	4c0f      	ldr	r4, [pc, #60]	; (4008a8 <sysclk_init+0x50>)
  40086a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40086c:	2800      	cmp	r0, #0
  40086e:	d0fc      	beq.n	40086a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400870:	4b0e      	ldr	r3, [pc, #56]	; (4008ac <sysclk_init+0x54>)
  400872:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400874:	4a0e      	ldr	r2, [pc, #56]	; (4008b0 <sysclk_init+0x58>)
  400876:	4b0f      	ldr	r3, [pc, #60]	; (4008b4 <sysclk_init+0x5c>)
  400878:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40087a:	4c0f      	ldr	r4, [pc, #60]	; (4008b8 <sysclk_init+0x60>)
  40087c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40087e:	2800      	cmp	r0, #0
  400880:	d0fc      	beq.n	40087c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400882:	2002      	movs	r0, #2
  400884:	4b0d      	ldr	r3, [pc, #52]	; (4008bc <sysclk_init+0x64>)
  400886:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400888:	2000      	movs	r0, #0
  40088a:	4b0d      	ldr	r3, [pc, #52]	; (4008c0 <sysclk_init+0x68>)
  40088c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40088e:	4b0d      	ldr	r3, [pc, #52]	; (4008c4 <sysclk_init+0x6c>)
  400890:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400892:	480d      	ldr	r0, [pc, #52]	; (4008c8 <sysclk_init+0x70>)
  400894:	4b02      	ldr	r3, [pc, #8]	; (4008a0 <sysclk_init+0x48>)
  400896:	4798      	blx	r3
  400898:	bd10      	pop	{r4, pc}
  40089a:	bf00      	nop
  40089c:	07270e00 	.word	0x07270e00
  4008a0:	00401eed 	.word	0x00401eed
  4008a4:	00401791 	.word	0x00401791
  4008a8:	004017e5 	.word	0x004017e5
  4008ac:	004017f5 	.word	0x004017f5
  4008b0:	20183f01 	.word	0x20183f01
  4008b4:	400e0600 	.word	0x400e0600
  4008b8:	00401805 	.word	0x00401805
  4008bc:	004016f5 	.word	0x004016f5
  4008c0:	0040172d 	.word	0x0040172d
  4008c4:	00401de1 	.word	0x00401de1
  4008c8:	11e1a300 	.word	0x11e1a300

004008cc <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4008cc:	b510      	push	{r4, lr}
  4008ce:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4008d0:	4b10      	ldr	r3, [pc, #64]	; (400914 <spi_master_init+0x48>)
  4008d2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4008d4:	2380      	movs	r3, #128	; 0x80
  4008d6:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4008d8:	6863      	ldr	r3, [r4, #4]
  4008da:	f043 0301 	orr.w	r3, r3, #1
  4008de:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4008e0:	6863      	ldr	r3, [r4, #4]
  4008e2:	f043 0310 	orr.w	r3, r3, #16
  4008e6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4008e8:	6863      	ldr	r3, [r4, #4]
  4008ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4008ee:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4008f0:	2100      	movs	r1, #0
  4008f2:	4620      	mov	r0, r4
  4008f4:	4b08      	ldr	r3, [pc, #32]	; (400918 <spi_master_init+0x4c>)
  4008f6:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4008f8:	6863      	ldr	r3, [r4, #4]
  4008fa:	f023 0302 	bic.w	r3, r3, #2
  4008fe:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400900:	6863      	ldr	r3, [r4, #4]
  400902:	f023 0304 	bic.w	r3, r3, #4
  400906:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400908:	2100      	movs	r1, #0
  40090a:	4620      	mov	r0, r4
  40090c:	4b03      	ldr	r3, [pc, #12]	; (40091c <spi_master_init+0x50>)
  40090e:	4798      	blx	r3
  400910:	bd10      	pop	{r4, pc}
  400912:	bf00      	nop
  400914:	00401835 	.word	0x00401835
  400918:	00401861 	.word	0x00401861
  40091c:	00401877 	.word	0x00401877

00400920 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400924:	4604      	mov	r4, r0
  400926:	460d      	mov	r5, r1
  400928:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  40092a:	4915      	ldr	r1, [pc, #84]	; (400980 <spi_master_setup_device+0x60>)
  40092c:	4618      	mov	r0, r3
  40092e:	4b15      	ldr	r3, [pc, #84]	; (400984 <spi_master_setup_device+0x64>)
  400930:	4798      	blx	r3
  400932:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400934:	2300      	movs	r3, #0
  400936:	461a      	mov	r2, r3
  400938:	6829      	ldr	r1, [r5, #0]
  40093a:	4620      	mov	r0, r4
  40093c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 40099c <spi_master_setup_device+0x7c>
  400940:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400942:	2208      	movs	r2, #8
  400944:	6829      	ldr	r1, [r5, #0]
  400946:	4620      	mov	r0, r4
  400948:	4b0f      	ldr	r3, [pc, #60]	; (400988 <spi_master_setup_device+0x68>)
  40094a:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  40094c:	b2fa      	uxtb	r2, r7
  40094e:	6829      	ldr	r1, [r5, #0]
  400950:	4620      	mov	r0, r4
  400952:	4b0e      	ldr	r3, [pc, #56]	; (40098c <spi_master_setup_device+0x6c>)
  400954:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400956:	2208      	movs	r2, #8
  400958:	6829      	ldr	r1, [r5, #0]
  40095a:	4620      	mov	r0, r4
  40095c:	4b0c      	ldr	r3, [pc, #48]	; (400990 <spi_master_setup_device+0x70>)
  40095e:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400960:	0872      	lsrs	r2, r6, #1
  400962:	6829      	ldr	r1, [r5, #0]
  400964:	4620      	mov	r0, r4
  400966:	4b0b      	ldr	r3, [pc, #44]	; (400994 <spi_master_setup_device+0x74>)
  400968:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  40096a:	f086 0201 	eor.w	r2, r6, #1
  40096e:	f002 0201 	and.w	r2, r2, #1
  400972:	6829      	ldr	r1, [r5, #0]
  400974:	4620      	mov	r0, r4
  400976:	4b08      	ldr	r3, [pc, #32]	; (400998 <spi_master_setup_device+0x78>)
  400978:	4798      	blx	r3
  40097a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40097e:	bf00      	nop
  400980:	08f0d180 	.word	0x08f0d180
  400984:	00401953 	.word	0x00401953
  400988:	0040193f 	.word	0x0040193f
  40098c:	00401969 	.word	0x00401969
  400990:	004018f9 	.word	0x004018f9
  400994:	004018bd 	.word	0x004018bd
  400998:	004018db 	.word	0x004018db
  40099c:	00401991 	.word	0x00401991

004009a0 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4009a0:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4009a2:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4009a4:	f013 0f04 	tst.w	r3, #4
  4009a8:	d006      	beq.n	4009b8 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4009aa:	6809      	ldr	r1, [r1, #0]
  4009ac:	290f      	cmp	r1, #15
  4009ae:	d900      	bls.n	4009b2 <spi_select_device+0x12>
  4009b0:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4009b2:	4b06      	ldr	r3, [pc, #24]	; (4009cc <spi_select_device+0x2c>)
  4009b4:	4798      	blx	r3
  4009b6:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4009b8:	6809      	ldr	r1, [r1, #0]
  4009ba:	2903      	cmp	r1, #3
  4009bc:	d8f8      	bhi.n	4009b0 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4009be:	2301      	movs	r3, #1
  4009c0:	fa03 f101 	lsl.w	r1, r3, r1
  4009c4:	43c9      	mvns	r1, r1
  4009c6:	4b01      	ldr	r3, [pc, #4]	; (4009cc <spi_select_device+0x2c>)
  4009c8:	4798      	blx	r3
		}
	}
}
  4009ca:	e7f1      	b.n	4009b0 <spi_select_device+0x10>
  4009cc:	00401861 	.word	0x00401861

004009d0 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4009d0:	b11a      	cbz	r2, 4009da <spi_write_packet+0xa>
{
  4009d2:	b410      	push	{r4}
  4009d4:	460c      	mov	r4, r1
  4009d6:	4411      	add	r1, r2
  4009d8:	e006      	b.n	4009e8 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4009da:	2000      	movs	r0, #0
  4009dc:	4770      	bx	lr
		val = data[i];
  4009de:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4009e2:	60c3      	str	r3, [r0, #12]
	while (len) {
  4009e4:	42a1      	cmp	r1, r4
  4009e6:	d00c      	beq.n	400a02 <spi_write_packet+0x32>
{
  4009e8:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4009ec:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4009ee:	f012 0f02 	tst.w	r2, #2
  4009f2:	d1f4      	bne.n	4009de <spi_write_packet+0xe>
			if (!timeout--) {
  4009f4:	3b01      	subs	r3, #1
  4009f6:	d1f9      	bne.n	4009ec <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4009f8:	f06f 0002 	mvn.w	r0, #2
}
  4009fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a00:	4770      	bx	lr
	return STATUS_OK;
  400a02:	2000      	movs	r0, #0
  400a04:	e7fa      	b.n	4009fc <spi_write_packet+0x2c>

00400a06 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400a06:	b13a      	cbz	r2, 400a18 <spi_read_packet+0x12>
{
  400a08:	b470      	push	{r4, r5, r6}
  400a0a:	4615      	mov	r5, r2
  400a0c:	460c      	mov	r4, r1
  400a0e:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a10:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400a12:	f240 2101 	movw	r1, #513	; 0x201
  400a16:	e012      	b.n	400a3e <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400a18:	2000      	movs	r0, #0
  400a1a:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a1c:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400a1e:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400a22:	6902      	ldr	r2, [r0, #16]
  400a24:	ea31 0202 	bics.w	r2, r1, r2
  400a28:	d004      	beq.n	400a34 <spi_read_packet+0x2e>
			if (!timeout--) {
  400a2a:	3b01      	subs	r3, #1
  400a2c:	d1f9      	bne.n	400a22 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400a2e:	f06f 0002 	mvn.w	r0, #2
  400a32:	e00e      	b.n	400a52 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400a34:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400a36:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400a3a:	42a5      	cmp	r5, r4
  400a3c:	d00b      	beq.n	400a56 <spi_read_packet+0x50>
{
  400a3e:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400a42:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400a44:	f012 0f02 	tst.w	r2, #2
  400a48:	d1e8      	bne.n	400a1c <spi_read_packet+0x16>
			if (!timeout--) {
  400a4a:	3b01      	subs	r3, #1
  400a4c:	d1f9      	bne.n	400a42 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400a4e:	f06f 0002 	mvn.w	r0, #2
}
  400a52:	bc70      	pop	{r4, r5, r6}
  400a54:	4770      	bx	lr
	return STATUS_OK;
  400a56:	2000      	movs	r0, #0
  400a58:	e7fb      	b.n	400a52 <spi_read_packet+0x4c>
	...

00400a5c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400a60:	b980      	cbnz	r0, 400a84 <_read+0x28>
  400a62:	460c      	mov	r4, r1
  400a64:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400a66:	2a00      	cmp	r2, #0
  400a68:	dd0f      	ble.n	400a8a <_read+0x2e>
  400a6a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400a6c:	4e08      	ldr	r6, [pc, #32]	; (400a90 <_read+0x34>)
  400a6e:	4d09      	ldr	r5, [pc, #36]	; (400a94 <_read+0x38>)
  400a70:	6830      	ldr	r0, [r6, #0]
  400a72:	4621      	mov	r1, r4
  400a74:	682b      	ldr	r3, [r5, #0]
  400a76:	4798      	blx	r3
		ptr++;
  400a78:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400a7a:	42bc      	cmp	r4, r7
  400a7c:	d1f8      	bne.n	400a70 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400a7e:	4640      	mov	r0, r8
  400a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a84:	f04f 38ff 	mov.w	r8, #4294967295
  400a88:	e7f9      	b.n	400a7e <_read+0x22>
	for (; len > 0; --len) {
  400a8a:	4680      	mov	r8, r0
  400a8c:	e7f7      	b.n	400a7e <_read+0x22>
  400a8e:	bf00      	nop
  400a90:	2040c81c 	.word	0x2040c81c
  400a94:	2040c814 	.word	0x2040c814

00400a98 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400a98:	3801      	subs	r0, #1
  400a9a:	2802      	cmp	r0, #2
  400a9c:	d815      	bhi.n	400aca <_write+0x32>
{
  400a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400aa2:	460e      	mov	r6, r1
  400aa4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400aa6:	b19a      	cbz	r2, 400ad0 <_write+0x38>
  400aa8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400aaa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400ae4 <_write+0x4c>
  400aae:	4f0c      	ldr	r7, [pc, #48]	; (400ae0 <_write+0x48>)
  400ab0:	f8d8 0000 	ldr.w	r0, [r8]
  400ab4:	f815 1b01 	ldrb.w	r1, [r5], #1
  400ab8:	683b      	ldr	r3, [r7, #0]
  400aba:	4798      	blx	r3
  400abc:	2800      	cmp	r0, #0
  400abe:	db0a      	blt.n	400ad6 <_write+0x3e>
  400ac0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400ac2:	3c01      	subs	r4, #1
  400ac4:	d1f4      	bne.n	400ab0 <_write+0x18>
  400ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400aca:	f04f 30ff 	mov.w	r0, #4294967295
  400ace:	4770      	bx	lr
	for (; len != 0; --len) {
  400ad0:	4610      	mov	r0, r2
  400ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400ad6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ade:	bf00      	nop
  400ae0:	2040c818 	.word	0x2040c818
  400ae4:	2040c81c 	.word	0x2040c81c

00400ae8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400aec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400af0:	4b9e      	ldr	r3, [pc, #632]	; (400d6c <board_init+0x284>)
  400af2:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400af8:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400afc:	4b9c      	ldr	r3, [pc, #624]	; (400d70 <board_init+0x288>)
  400afe:	2200      	movs	r2, #0
  400b00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400b04:	695a      	ldr	r2, [r3, #20]
  400b06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400b0a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b10:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400b14:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400b18:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400b1c:	f007 0007 	and.w	r0, r7, #7
  400b20:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400b22:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400b26:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400b2a:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400b2e:	f3bf 8f4f 	dsb	sy
  400b32:	f04f 34ff 	mov.w	r4, #4294967295
  400b36:	fa04 fc00 	lsl.w	ip, r4, r0
  400b3a:	fa06 f000 	lsl.w	r0, r6, r0
  400b3e:	fa04 f40e 	lsl.w	r4, r4, lr
  400b42:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400b46:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400b48:	463a      	mov	r2, r7
  400b4a:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400b4c:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400b50:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400b54:	3a01      	subs	r2, #1
  400b56:	4423      	add	r3, r4
  400b58:	f1b2 3fff 	cmp.w	r2, #4294967295
  400b5c:	d1f6      	bne.n	400b4c <board_init+0x64>
        } while(sets--);
  400b5e:	3e01      	subs	r6, #1
  400b60:	4460      	add	r0, ip
  400b62:	f1b6 3fff 	cmp.w	r6, #4294967295
  400b66:	d1ef      	bne.n	400b48 <board_init+0x60>
  400b68:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400b6c:	4b80      	ldr	r3, [pc, #512]	; (400d70 <board_init+0x288>)
  400b6e:	695a      	ldr	r2, [r3, #20]
  400b70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400b74:	615a      	str	r2, [r3, #20]
  400b76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b7a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b7e:	4a7d      	ldr	r2, [pc, #500]	; (400d74 <board_init+0x28c>)
  400b80:	497d      	ldr	r1, [pc, #500]	; (400d78 <board_init+0x290>)
  400b82:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b84:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400b88:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400b8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b8e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b92:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400b96:	f022 0201 	bic.w	r2, r2, #1
  400b9a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400b9e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400ba2:	f022 0201 	bic.w	r2, r2, #1
  400ba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400baa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bae:	f3bf 8f6f 	isb	sy
  400bb2:	200a      	movs	r0, #10
  400bb4:	4c71      	ldr	r4, [pc, #452]	; (400d7c <board_init+0x294>)
  400bb6:	47a0      	blx	r4
  400bb8:	200b      	movs	r0, #11
  400bba:	47a0      	blx	r4
  400bbc:	200c      	movs	r0, #12
  400bbe:	47a0      	blx	r4
  400bc0:	2010      	movs	r0, #16
  400bc2:	47a0      	blx	r4
  400bc4:	2011      	movs	r0, #17
  400bc6:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bc8:	4e6d      	ldr	r6, [pc, #436]	; (400d80 <board_init+0x298>)
  400bca:	f44f 7880 	mov.w	r8, #256	; 0x100
  400bce:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bd2:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bd6:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400bda:	4c6a      	ldr	r4, [pc, #424]	; (400d84 <board_init+0x29c>)
  400bdc:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400be0:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400be2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400be6:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400be8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bec:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400bee:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400bf0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400bf4:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400bfa:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bfc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400c02:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400c04:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400c08:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400c0c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400c14:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c16:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c1a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c1c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c1e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c22:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400c24:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400c28:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c2a:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400c2c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400c30:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c32:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400c34:	4a54      	ldr	r2, [pc, #336]	; (400d88 <board_init+0x2a0>)
  400c36:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400c3a:	f043 0310 	orr.w	r3, r3, #16
  400c3e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400c42:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400c46:	2310      	movs	r3, #16
  400c48:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c4e:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c50:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400c56:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400c58:	4319      	orrs	r1, r3
  400c5a:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c5c:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400c5e:	4319      	orrs	r1, r3
  400c60:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c62:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400c64:	2208      	movs	r2, #8
  400c66:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c68:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c6c:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c6e:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c70:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c74:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400c76:	f021 0108 	bic.w	r1, r1, #8
  400c7a:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c7c:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400c7e:	f021 0108 	bic.w	r1, r1, #8
  400c82:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c84:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400c86:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c88:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c8c:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c8e:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c90:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c94:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400c96:	f022 0210 	bic.w	r2, r2, #16
  400c9a:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c9c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400c9e:	f022 0210 	bic.w	r2, r2, #16
  400ca2:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ca4:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400ca6:	2300      	movs	r3, #0
  400ca8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400cac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cb0:	4630      	mov	r0, r6
  400cb2:	4f36      	ldr	r7, [pc, #216]	; (400d8c <board_init+0x2a4>)
  400cb4:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400cb6:	2300      	movs	r3, #0
  400cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400cbc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cc0:	4630      	mov	r0, r6
  400cc2:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400cc4:	2301      	movs	r3, #1
  400cc6:	22ff      	movs	r2, #255	; 0xff
  400cc8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ccc:	4630      	mov	r0, r6
  400cce:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400cd0:	2301      	movs	r3, #1
  400cd2:	223f      	movs	r2, #63	; 0x3f
  400cd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cd8:	482d      	ldr	r0, [pc, #180]	; (400d90 <board_init+0x2a8>)
  400cda:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400cdc:	2301      	movs	r3, #1
  400cde:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400ce2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ce6:	4620      	mov	r0, r4
  400ce8:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400cea:	2301      	movs	r3, #1
  400cec:	4642      	mov	r2, r8
  400cee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cf2:	4630      	mov	r0, r6
  400cf4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400cf6:	2301      	movs	r3, #1
  400cf8:	462a      	mov	r2, r5
  400cfa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cfe:	4630      	mov	r0, r6
  400d00:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400d02:	2301      	movs	r3, #1
  400d04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400d08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d0c:	4821      	ldr	r0, [pc, #132]	; (400d94 <board_init+0x2ac>)
  400d0e:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400d10:	2300      	movs	r3, #0
  400d12:	f44f 7200 	mov.w	r2, #512	; 0x200
  400d16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d1a:	4630      	mov	r0, r6
  400d1c:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
  400d22:	4630      	mov	r0, r6
  400d24:	4b1c      	ldr	r3, [pc, #112]	; (400d98 <board_init+0x2b0>)
  400d26:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400d28:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d2c:	2074      	movs	r0, #116	; 0x74
  400d2e:	4c1b      	ldr	r4, [pc, #108]	; (400d9c <board_init+0x2b4>)
  400d30:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400d32:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d36:	2075      	movs	r0, #117	; 0x75
  400d38:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400d3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d3e:	2076      	movs	r0, #118	; 0x76
  400d40:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400d42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d46:	207b      	movs	r0, #123	; 0x7b
  400d48:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400d4a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d4e:	2018      	movs	r0, #24
  400d50:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400d52:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d56:	2006      	movs	r0, #6
  400d58:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400d5a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d5e:	2053      	movs	r0, #83	; 0x53
  400d60:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400d62:	2053      	movs	r0, #83	; 0x53
  400d64:	4b0e      	ldr	r3, [pc, #56]	; (400da0 <board_init+0x2b8>)
  400d66:	4798      	blx	r3
  400d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d6c:	400e1850 	.word	0x400e1850
  400d70:	e000ed00 	.word	0xe000ed00
  400d74:	400e0c00 	.word	0x400e0c00
  400d78:	5a00080c 	.word	0x5a00080c
  400d7c:	00401815 	.word	0x00401815
  400d80:	400e1200 	.word	0x400e1200
  400d84:	400e0e00 	.word	0x400e0e00
  400d88:	40088000 	.word	0x40088000
  400d8c:	00401441 	.word	0x00401441
  400d90:	400e1600 	.word	0x400e1600
  400d94:	400e1400 	.word	0x400e1400
  400d98:	0040134d 	.word	0x0040134d
  400d9c:	00401511 	.word	0x00401511
  400da0:	004014d9 	.word	0x004014d9

00400da4 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400da4:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400da6:	6804      	ldr	r4, [r0, #0]
  400da8:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400dac:	d302      	bcc.n	400db4 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400dae:	f240 143f 	movw	r4, #319	; 0x13f
  400db2:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400db4:	6814      	ldr	r4, [r2, #0]
  400db6:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400dba:	d302      	bcc.n	400dc2 <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400dbc:	f240 143f 	movw	r4, #319	; 0x13f
  400dc0:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400dc2:	680c      	ldr	r4, [r1, #0]
  400dc4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400dc8:	d302      	bcc.n	400dd0 <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400dca:	f240 14df 	movw	r4, #479	; 0x1df
  400dce:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400dd0:	681c      	ldr	r4, [r3, #0]
  400dd2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400dd6:	d302      	bcc.n	400dde <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400dd8:	f240 14df 	movw	r4, #479	; 0x1df
  400ddc:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400dde:	6804      	ldr	r4, [r0, #0]
  400de0:	6815      	ldr	r5, [r2, #0]
  400de2:	42ac      	cmp	r4, r5
  400de4:	d901      	bls.n	400dea <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400de6:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400de8:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400dea:	680a      	ldr	r2, [r1, #0]
  400dec:	6818      	ldr	r0, [r3, #0]
  400dee:	4282      	cmp	r2, r0
  400df0:	d901      	bls.n	400df6 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400df2:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400df4:	601a      	str	r2, [r3, #0]
	}
}
  400df6:	bc30      	pop	{r4, r5}
  400df8:	4770      	bx	lr
	...

00400dfc <ili9488_write_ram_prepare>:
{
  400dfc:	b510      	push	{r4, lr}
  400dfe:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400e00:	2006      	movs	r0, #6
  400e02:	4b0a      	ldr	r3, [pc, #40]	; (400e2c <ili9488_write_ram_prepare+0x30>)
  400e04:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400e06:	2300      	movs	r3, #0
  400e08:	2203      	movs	r2, #3
  400e0a:	212c      	movs	r1, #44	; 0x2c
  400e0c:	4808      	ldr	r0, [pc, #32]	; (400e30 <ili9488_write_ram_prepare+0x34>)
  400e0e:	4c09      	ldr	r4, [pc, #36]	; (400e34 <ili9488_write_ram_prepare+0x38>)
  400e10:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400e12:	2300      	movs	r3, #0
  400e14:	9301      	str	r3, [sp, #4]
  400e16:	9b01      	ldr	r3, [sp, #4]
  400e18:	2bfe      	cmp	r3, #254	; 0xfe
  400e1a:	d805      	bhi.n	400e28 <ili9488_write_ram_prepare+0x2c>
  400e1c:	9b01      	ldr	r3, [sp, #4]
  400e1e:	3301      	adds	r3, #1
  400e20:	9301      	str	r3, [sp, #4]
  400e22:	9b01      	ldr	r3, [sp, #4]
  400e24:	2bfe      	cmp	r3, #254	; 0xfe
  400e26:	d9f9      	bls.n	400e1c <ili9488_write_ram_prepare+0x20>
}
  400e28:	b002      	add	sp, #8
  400e2a:	bd10      	pop	{r4, pc}
  400e2c:	004014f5 	.word	0x004014f5
  400e30:	40008000 	.word	0x40008000
  400e34:	00401889 	.word	0x00401889

00400e38 <ili9488_write_register>:
{
  400e38:	b570      	push	{r4, r5, r6, lr}
  400e3a:	b082      	sub	sp, #8
  400e3c:	4605      	mov	r5, r0
  400e3e:	460e      	mov	r6, r1
  400e40:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400e42:	2006      	movs	r0, #6
  400e44:	4b14      	ldr	r3, [pc, #80]	; (400e98 <ili9488_write_register+0x60>)
  400e46:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400e48:	2300      	movs	r3, #0
  400e4a:	2203      	movs	r2, #3
  400e4c:	4629      	mov	r1, r5
  400e4e:	4813      	ldr	r0, [pc, #76]	; (400e9c <ili9488_write_register+0x64>)
  400e50:	4d13      	ldr	r5, [pc, #76]	; (400ea0 <ili9488_write_register+0x68>)
  400e52:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400e54:	2300      	movs	r3, #0
  400e56:	9301      	str	r3, [sp, #4]
  400e58:	9b01      	ldr	r3, [sp, #4]
  400e5a:	2bfe      	cmp	r3, #254	; 0xfe
  400e5c:	d805      	bhi.n	400e6a <ili9488_write_register+0x32>
  400e5e:	9b01      	ldr	r3, [sp, #4]
  400e60:	3301      	adds	r3, #1
  400e62:	9301      	str	r3, [sp, #4]
  400e64:	9b01      	ldr	r3, [sp, #4]
  400e66:	2bfe      	cmp	r3, #254	; 0xfe
  400e68:	d9f9      	bls.n	400e5e <ili9488_write_register+0x26>
	if(size > 0) {
  400e6a:	b90c      	cbnz	r4, 400e70 <ili9488_write_register+0x38>
}
  400e6c:	b002      	add	sp, #8
  400e6e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400e70:	2006      	movs	r0, #6
  400e72:	4b0c      	ldr	r3, [pc, #48]	; (400ea4 <ili9488_write_register+0x6c>)
  400e74:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400e76:	4622      	mov	r2, r4
  400e78:	4631      	mov	r1, r6
  400e7a:	4808      	ldr	r0, [pc, #32]	; (400e9c <ili9488_write_register+0x64>)
  400e7c:	4b0a      	ldr	r3, [pc, #40]	; (400ea8 <ili9488_write_register+0x70>)
  400e7e:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400e80:	2300      	movs	r3, #0
  400e82:	9301      	str	r3, [sp, #4]
  400e84:	9b01      	ldr	r3, [sp, #4]
  400e86:	2b5e      	cmp	r3, #94	; 0x5e
  400e88:	d8f0      	bhi.n	400e6c <ili9488_write_register+0x34>
  400e8a:	9b01      	ldr	r3, [sp, #4]
  400e8c:	3301      	adds	r3, #1
  400e8e:	9301      	str	r3, [sp, #4]
  400e90:	9b01      	ldr	r3, [sp, #4]
  400e92:	2b5e      	cmp	r3, #94	; 0x5e
  400e94:	d9f9      	bls.n	400e8a <ili9488_write_register+0x52>
  400e96:	e7e9      	b.n	400e6c <ili9488_write_register+0x34>
  400e98:	004014f5 	.word	0x004014f5
  400e9c:	40008000 	.word	0x40008000
  400ea0:	00401889 	.word	0x00401889
  400ea4:	004014d9 	.word	0x004014d9
  400ea8:	004009d1 	.word	0x004009d1

00400eac <ili9488_write_ram_buffer>:
{
  400eac:	b530      	push	{r4, r5, lr}
  400eae:	b083      	sub	sp, #12
  400eb0:	4604      	mov	r4, r0
  400eb2:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400eb4:	2006      	movs	r0, #6
  400eb6:	4b0a      	ldr	r3, [pc, #40]	; (400ee0 <ili9488_write_ram_buffer+0x34>)
  400eb8:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400eba:	462a      	mov	r2, r5
  400ebc:	4621      	mov	r1, r4
  400ebe:	4809      	ldr	r0, [pc, #36]	; (400ee4 <ili9488_write_ram_buffer+0x38>)
  400ec0:	4b09      	ldr	r3, [pc, #36]	; (400ee8 <ili9488_write_ram_buffer+0x3c>)
  400ec2:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400ec4:	2300      	movs	r3, #0
  400ec6:	9301      	str	r3, [sp, #4]
  400ec8:	9b01      	ldr	r3, [sp, #4]
  400eca:	2bfe      	cmp	r3, #254	; 0xfe
  400ecc:	d805      	bhi.n	400eda <ili9488_write_ram_buffer+0x2e>
  400ece:	9b01      	ldr	r3, [sp, #4]
  400ed0:	3301      	adds	r3, #1
  400ed2:	9301      	str	r3, [sp, #4]
  400ed4:	9b01      	ldr	r3, [sp, #4]
  400ed6:	2bfe      	cmp	r3, #254	; 0xfe
  400ed8:	d9f9      	bls.n	400ece <ili9488_write_ram_buffer+0x22>
}
  400eda:	b003      	add	sp, #12
  400edc:	bd30      	pop	{r4, r5, pc}
  400ede:	bf00      	nop
  400ee0:	004014d9 	.word	0x004014d9
  400ee4:	40008000 	.word	0x40008000
  400ee8:	004009d1 	.word	0x004009d1

00400eec <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400eec:	4601      	mov	r1, r0
  400eee:	b130      	cbz	r0, 400efe <ili9488_delay+0x12>
  400ef0:	4a03      	ldr	r2, [pc, #12]	; (400f00 <ili9488_delay+0x14>)
{
  400ef2:	4b04      	ldr	r3, [pc, #16]	; (400f04 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400ef4:	3b01      	subs	r3, #1
  400ef6:	d1fd      	bne.n	400ef4 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400ef8:	4291      	cmp	r1, r2
  400efa:	d8fa      	bhi.n	400ef2 <ili9488_delay+0x6>
  400efc:	4770      	bx	lr
  400efe:	4770      	bx	lr
  400f00:	000186a1 	.word	0x000186a1
  400f04:	000186a0 	.word	0x000186a0

00400f08 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400f08:	b500      	push	{lr}
  400f0a:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400f0c:	b958      	cbnz	r0, 400f26 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400f0e:	2348      	movs	r3, #72	; 0x48
  400f10:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400f14:	2201      	movs	r2, #1
  400f16:	f10d 0107 	add.w	r1, sp, #7
  400f1a:	2036      	movs	r0, #54	; 0x36
  400f1c:	4b04      	ldr	r3, [pc, #16]	; (400f30 <ili9488_set_display_direction+0x28>)
  400f1e:	4798      	blx	r3
}
  400f20:	b003      	add	sp, #12
  400f22:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400f26:	23e8      	movs	r3, #232	; 0xe8
  400f28:	f88d 3007 	strb.w	r3, [sp, #7]
  400f2c:	e7f2      	b.n	400f14 <ili9488_set_display_direction+0xc>
  400f2e:	bf00      	nop
  400f30:	00400e39 	.word	0x00400e39

00400f34 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400f34:	b510      	push	{r4, lr}
  400f36:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400f38:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400f3c:	3a01      	subs	r2, #1
  400f3e:	4402      	add	r2, r0
  400f40:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400f44:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400f48:	3b01      	subs	r3, #1
  400f4a:	4419      	add	r1, r3
  400f4c:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400f50:	0a03      	lsrs	r3, r0, #8
  400f52:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400f56:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400f5a:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400f5e:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400f62:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400f66:	2204      	movs	r2, #4
  400f68:	eb0d 0102 	add.w	r1, sp, r2
  400f6c:	202a      	movs	r0, #42	; 0x2a
  400f6e:	4c10      	ldr	r4, [pc, #64]	; (400fb0 <ili9488_set_window+0x7c>)
  400f70:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400f72:	2200      	movs	r2, #0
  400f74:	4611      	mov	r1, r2
  400f76:	4610      	mov	r0, r2
  400f78:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400f7a:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400f7e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400f82:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400f86:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400f8a:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400f8e:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400f92:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400f96:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400f9a:	2204      	movs	r2, #4
  400f9c:	eb0d 0102 	add.w	r1, sp, r2
  400fa0:	202b      	movs	r0, #43	; 0x2b
  400fa2:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400fa4:	2200      	movs	r2, #0
  400fa6:	4611      	mov	r1, r2
  400fa8:	4610      	mov	r0, r2
  400faa:	47a0      	blx	r4
}
  400fac:	b004      	add	sp, #16
  400fae:	bd10      	pop	{r4, pc}
  400fb0:	00400e39 	.word	0x00400e39

00400fb4 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400fb4:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400fb6:	2200      	movs	r2, #0
  400fb8:	4611      	mov	r1, r2
  400fba:	2029      	movs	r0, #41	; 0x29
  400fbc:	4b01      	ldr	r3, [pc, #4]	; (400fc4 <ili9488_display_on+0x10>)
  400fbe:	4798      	blx	r3
  400fc0:	bd08      	pop	{r3, pc}
  400fc2:	bf00      	nop
  400fc4:	00400e39 	.word	0x00400e39

00400fc8 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400fc8:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400fca:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400fce:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400fd2:	4b06      	ldr	r3, [pc, #24]	; (400fec <ili9488_set_foreground_color+0x24>)
  400fd4:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400fd8:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400fda:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400fdc:	7098      	strb	r0, [r3, #2]
  400fde:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400fe0:	4293      	cmp	r3, r2
  400fe2:	d1f9      	bne.n	400fd8 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fe8:	4770      	bx	lr
  400fea:	bf00      	nop
  400fec:	204009dc 	.word	0x204009dc

00400ff0 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400ff0:	b510      	push	{r4, lr}
  400ff2:	b084      	sub	sp, #16
  400ff4:	f8ad 0006 	strh.w	r0, [sp, #6]
  400ff8:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400ffc:	0a03      	lsrs	r3, r0, #8
  400ffe:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  401002:	b2c0      	uxtb	r0, r0
  401004:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  401008:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  40100c:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401010:	2204      	movs	r2, #4
  401012:	a903      	add	r1, sp, #12
  401014:	202a      	movs	r0, #42	; 0x2a
  401016:	4c0e      	ldr	r4, [pc, #56]	; (401050 <ili9488_set_cursor_position+0x60>)
  401018:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40101a:	2200      	movs	r2, #0
  40101c:	4611      	mov	r1, r2
  40101e:	4610      	mov	r0, r2
  401020:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  401022:	f89d 2005 	ldrb.w	r2, [sp, #5]
  401026:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  40102a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40102e:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  401032:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  401036:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  40103a:	2204      	movs	r2, #4
  40103c:	a903      	add	r1, sp, #12
  40103e:	202b      	movs	r0, #43	; 0x2b
  401040:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401042:	2200      	movs	r2, #0
  401044:	4611      	mov	r1, r2
  401046:	4610      	mov	r0, r2
  401048:	47a0      	blx	r4
}
  40104a:	b004      	add	sp, #16
  40104c:	bd10      	pop	{r4, pc}
  40104e:	bf00      	nop
  401050:	00400e39 	.word	0x00400e39

00401054 <ili9488_init>:
{
  401054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401058:	b087      	sub	sp, #28
  40105a:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  40105c:	2703      	movs	r7, #3
  40105e:	ae06      	add	r6, sp, #24
  401060:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  401064:	4d5d      	ldr	r5, [pc, #372]	; (4011dc <ili9488_init+0x188>)
  401066:	4628      	mov	r0, r5
  401068:	4b5d      	ldr	r3, [pc, #372]	; (4011e0 <ili9488_init+0x18c>)
  40106a:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  40106c:	2400      	movs	r4, #0
  40106e:	9400      	str	r4, [sp, #0]
  401070:	4b5c      	ldr	r3, [pc, #368]	; (4011e4 <ili9488_init+0x190>)
  401072:	463a      	mov	r2, r7
  401074:	4631      	mov	r1, r6
  401076:	4628      	mov	r0, r5
  401078:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401214 <ili9488_init+0x1c0>
  40107c:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  40107e:	4622      	mov	r2, r4
  401080:	4639      	mov	r1, r7
  401082:	4628      	mov	r0, r5
  401084:	4b58      	ldr	r3, [pc, #352]	; (4011e8 <ili9488_init+0x194>)
  401086:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  401088:	4631      	mov	r1, r6
  40108a:	4628      	mov	r0, r5
  40108c:	4b57      	ldr	r3, [pc, #348]	; (4011ec <ili9488_init+0x198>)
  40108e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401090:	2001      	movs	r0, #1
  401092:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  401094:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  401096:	4622      	mov	r2, r4
  401098:	4621      	mov	r1, r4
  40109a:	4e55      	ldr	r6, [pc, #340]	; (4011f0 <ili9488_init+0x19c>)
  40109c:	47b0      	blx	r6
	ili9488_delay(200);
  40109e:	20c8      	movs	r0, #200	; 0xc8
  4010a0:	4d54      	ldr	r5, [pc, #336]	; (4011f4 <ili9488_init+0x1a0>)
  4010a2:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4010a4:	4622      	mov	r2, r4
  4010a6:	4621      	mov	r1, r4
  4010a8:	2011      	movs	r0, #17
  4010aa:	47b0      	blx	r6
	ili9488_delay(200);
  4010ac:	20c8      	movs	r0, #200	; 0xc8
  4010ae:	47a8      	blx	r5
	reg = 0x81;
  4010b0:	2381      	movs	r3, #129	; 0x81
  4010b2:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  4010b6:	f88d 400b 	strb.w	r4, [sp, #11]
  4010ba:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4010bc:	f04f 0801 	mov.w	r8, #1
  4010c0:	4f4b      	ldr	r7, [pc, #300]	; (4011f0 <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  4010c2:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4010c4:	4642      	mov	r2, r8
  4010c6:	f10d 010a 	add.w	r1, sp, #10
  4010ca:	20fb      	movs	r0, #251	; 0xfb
  4010cc:	47b8      	blx	r7
		reg++;
  4010ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4010d2:	3301      	adds	r3, #1
  4010d4:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  4010d8:	9503      	str	r5, [sp, #12]
  4010da:	9b03      	ldr	r3, [sp, #12]
  4010dc:	2bfe      	cmp	r3, #254	; 0xfe
  4010de:	d805      	bhi.n	4010ec <ili9488_init+0x98>
  4010e0:	9b03      	ldr	r3, [sp, #12]
  4010e2:	3301      	adds	r3, #1
  4010e4:	9303      	str	r3, [sp, #12]
  4010e6:	9b03      	ldr	r3, [sp, #12]
  4010e8:	2bfe      	cmp	r3, #254	; 0xfe
  4010ea:	d9f9      	bls.n	4010e0 <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  4010ec:	462a      	mov	r2, r5
  4010ee:	4629      	mov	r1, r5
  4010f0:	20d3      	movs	r0, #211	; 0xd3
  4010f2:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  4010f4:	2006      	movs	r0, #6
  4010f6:	4b40      	ldr	r3, [pc, #256]	; (4011f8 <ili9488_init+0x1a4>)
  4010f8:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  4010fa:	4642      	mov	r2, r8
  4010fc:	f10d 0109 	add.w	r1, sp, #9
  401100:	4836      	ldr	r0, [pc, #216]	; (4011dc <ili9488_init+0x188>)
  401102:	4b3e      	ldr	r3, [pc, #248]	; (4011fc <ili9488_init+0x1a8>)
  401104:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  401106:	9503      	str	r5, [sp, #12]
  401108:	9b03      	ldr	r3, [sp, #12]
  40110a:	2bfe      	cmp	r3, #254	; 0xfe
  40110c:	d805      	bhi.n	40111a <ili9488_init+0xc6>
  40110e:	9b03      	ldr	r3, [sp, #12]
  401110:	3301      	adds	r3, #1
  401112:	9303      	str	r3, [sp, #12]
  401114:	9b03      	ldr	r3, [sp, #12]
  401116:	2bfe      	cmp	r3, #254	; 0xfe
  401118:	d9f9      	bls.n	40110e <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  40111a:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40111e:	40b3      	lsls	r3, r6
  401120:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  401122:	4642      	mov	r2, r8
  401124:	f10d 010b 	add.w	r1, sp, #11
  401128:	20fb      	movs	r0, #251	; 0xfb
  40112a:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  40112c:	9503      	str	r5, [sp, #12]
  40112e:	9a03      	ldr	r2, [sp, #12]
  401130:	f640 73fe 	movw	r3, #4094	; 0xffe
  401134:	429a      	cmp	r2, r3
  401136:	d806      	bhi.n	401146 <ili9488_init+0xf2>
  401138:	461a      	mov	r2, r3
  40113a:	9b03      	ldr	r3, [sp, #12]
  40113c:	3301      	adds	r3, #1
  40113e:	9303      	str	r3, [sp, #12]
  401140:	9b03      	ldr	r3, [sp, #12]
  401142:	4293      	cmp	r3, r2
  401144:	d9f9      	bls.n	40113a <ili9488_init+0xe6>
  401146:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401148:	f116 0f08 	cmn.w	r6, #8
  40114c:	d1ba      	bne.n	4010c4 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40114e:	f249 4388 	movw	r3, #38024	; 0x9488
  401152:	429c      	cmp	r4, r3
  401154:	d003      	beq.n	40115e <ili9488_init+0x10a>
		return 1;
  401156:	2001      	movs	r0, #1
}
  401158:	b007      	add	sp, #28
  40115a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40115e:	ad06      	add	r5, sp, #24
  401160:	2348      	movs	r3, #72	; 0x48
  401162:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401166:	2201      	movs	r2, #1
  401168:	4629      	mov	r1, r5
  40116a:	2036      	movs	r0, #54	; 0x36
  40116c:	4e20      	ldr	r6, [pc, #128]	; (4011f0 <ili9488_init+0x19c>)
  40116e:	47b0      	blx	r6
	ili9488_delay(100);
  401170:	2064      	movs	r0, #100	; 0x64
  401172:	4c20      	ldr	r4, [pc, #128]	; (4011f4 <ili9488_init+0x1a0>)
  401174:	47a0      	blx	r4
	param = 0x04;
  401176:	2304      	movs	r3, #4
  401178:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  40117c:	2201      	movs	r2, #1
  40117e:	4629      	mov	r1, r5
  401180:	20cf      	movs	r0, #207	; 0xcf
  401182:	47b0      	blx	r6
	ili9488_delay(100);
  401184:	2064      	movs	r0, #100	; 0x64
  401186:	47a0      	blx	r4
	param = 0x06;
  401188:	2306      	movs	r3, #6
  40118a:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40118e:	2201      	movs	r2, #1
  401190:	4629      	mov	r1, r5
  401192:	203a      	movs	r0, #58	; 0x3a
  401194:	47b0      	blx	r6
	ili9488_delay(100);
  401196:	2064      	movs	r0, #100	; 0x64
  401198:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  40119a:	2200      	movs	r2, #0
  40119c:	4611      	mov	r1, r2
  40119e:	2013      	movs	r0, #19
  4011a0:	47b0      	blx	r6
	ili9488_delay(100);
  4011a2:	2064      	movs	r0, #100	; 0x64
  4011a4:	47a0      	blx	r4
	ili9488_display_on();
  4011a6:	4b16      	ldr	r3, [pc, #88]	; (401200 <ili9488_init+0x1ac>)
  4011a8:	4798      	blx	r3
	ili9488_delay(100);
  4011aa:	2064      	movs	r0, #100	; 0x64
  4011ac:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  4011ae:	2000      	movs	r0, #0
  4011b0:	4b14      	ldr	r3, [pc, #80]	; (401204 <ili9488_init+0x1b0>)
  4011b2:	4798      	blx	r3
	ili9488_delay(100);
  4011b4:	2064      	movs	r0, #100	; 0x64
  4011b6:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4011b8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  4011bc:	f8b9 2000 	ldrh.w	r2, [r9]
  4011c0:	2100      	movs	r1, #0
  4011c2:	4608      	mov	r0, r1
  4011c4:	4c10      	ldr	r4, [pc, #64]	; (401208 <ili9488_init+0x1b4>)
  4011c6:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  4011c8:	f8d9 0008 	ldr.w	r0, [r9, #8]
  4011cc:	4b0f      	ldr	r3, [pc, #60]	; (40120c <ili9488_init+0x1b8>)
  4011ce:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  4011d0:	2100      	movs	r1, #0
  4011d2:	4608      	mov	r0, r1
  4011d4:	4b0e      	ldr	r3, [pc, #56]	; (401210 <ili9488_init+0x1bc>)
  4011d6:	4798      	blx	r3
	return 0;
  4011d8:	2000      	movs	r0, #0
  4011da:	e7bd      	b.n	401158 <ili9488_init+0x104>
  4011dc:	40008000 	.word	0x40008000
  4011e0:	004008cd 	.word	0x004008cd
  4011e4:	01312d00 	.word	0x01312d00
  4011e8:	004018f9 	.word	0x004018f9
  4011ec:	004009a1 	.word	0x004009a1
  4011f0:	00400e39 	.word	0x00400e39
  4011f4:	00400eed 	.word	0x00400eed
  4011f8:	004014d9 	.word	0x004014d9
  4011fc:	00400a07 	.word	0x00400a07
  401200:	00400fb5 	.word	0x00400fb5
  401204:	00400f09 	.word	0x00400f09
  401208:	00400f35 	.word	0x00400f35
  40120c:	00400fc9 	.word	0x00400fc9
  401210:	00400ff1 	.word	0x00400ff1
  401214:	00400921 	.word	0x00400921

00401218 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40121c:	b084      	sub	sp, #16
  40121e:	9003      	str	r0, [sp, #12]
  401220:	9102      	str	r1, [sp, #8]
  401222:	9201      	str	r2, [sp, #4]
  401224:	aa04      	add	r2, sp, #16
  401226:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  40122a:	4613      	mov	r3, r2
  40122c:	aa01      	add	r2, sp, #4
  40122e:	a902      	add	r1, sp, #8
  401230:	a803      	add	r0, sp, #12
  401232:	4c22      	ldr	r4, [pc, #136]	; (4012bc <ili9488_draw_filled_rectangle+0xa4>)
  401234:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  401236:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40123a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40123e:	9b00      	ldr	r3, [sp, #0]
  401240:	3301      	adds	r3, #1
  401242:	1a5b      	subs	r3, r3, r1
  401244:	9a01      	ldr	r2, [sp, #4]
  401246:	3201      	adds	r2, #1
  401248:	1a12      	subs	r2, r2, r0
  40124a:	b29b      	uxth	r3, r3
  40124c:	b292      	uxth	r2, r2
  40124e:	4c1c      	ldr	r4, [pc, #112]	; (4012c0 <ili9488_draw_filled_rectangle+0xa8>)
  401250:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401252:	4b1c      	ldr	r3, [pc, #112]	; (4012c4 <ili9488_draw_filled_rectangle+0xac>)
  401254:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401256:	9903      	ldr	r1, [sp, #12]
  401258:	9d01      	ldr	r5, [sp, #4]
  40125a:	1a69      	subs	r1, r5, r1
  40125c:	9d00      	ldr	r5, [sp, #0]
  40125e:	3501      	adds	r5, #1
  401260:	9b02      	ldr	r3, [sp, #8]
  401262:	1aed      	subs	r5, r5, r3
  401264:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401268:	4b17      	ldr	r3, [pc, #92]	; (4012c8 <ili9488_draw_filled_rectangle+0xb0>)
  40126a:	fba3 2305 	umull	r2, r3, r3, r5
  40126e:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  401270:	b163      	cbz	r3, 40128c <ili9488_draw_filled_rectangle+0x74>
  401272:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401274:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4012d0 <ili9488_draw_filled_rectangle+0xb8>
  401278:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  40127c:	4e13      	ldr	r6, [pc, #76]	; (4012cc <ili9488_draw_filled_rectangle+0xb4>)
  40127e:	4639      	mov	r1, r7
  401280:	4640      	mov	r0, r8
  401282:	47b0      	blx	r6
	while (blocks--) {
  401284:	3c01      	subs	r4, #1
  401286:	f1b4 3fff 	cmp.w	r4, #4294967295
  40128a:	d1f8      	bne.n	40127e <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  40128c:	490e      	ldr	r1, [pc, #56]	; (4012c8 <ili9488_draw_filled_rectangle+0xb0>)
  40128e:	fba1 3105 	umull	r3, r1, r1, r5
  401292:	0a09      	lsrs	r1, r1, #8
  401294:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401298:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  40129c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4012a0:	480b      	ldr	r0, [pc, #44]	; (4012d0 <ili9488_draw_filled_rectangle+0xb8>)
  4012a2:	4b0a      	ldr	r3, [pc, #40]	; (4012cc <ili9488_draw_filled_rectangle+0xb4>)
  4012a4:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4012a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4012aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4012ae:	2100      	movs	r1, #0
  4012b0:	4608      	mov	r0, r1
  4012b2:	4c03      	ldr	r4, [pc, #12]	; (4012c0 <ili9488_draw_filled_rectangle+0xa8>)
  4012b4:	47a0      	blx	r4

}
  4012b6:	b004      	add	sp, #16
  4012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012bc:	00400da5 	.word	0x00400da5
  4012c0:	00400f35 	.word	0x00400f35
  4012c4:	00400dfd 	.word	0x00400dfd
  4012c8:	cccccccd 	.word	0xcccccccd
  4012cc:	00400ead 	.word	0x00400ead
  4012d0:	204009dc 	.word	0x204009dc

004012d4 <ili9488_draw_pixmap>:
 * \param ul_height height of the picture.
 * \param p_ul_pixmap pixmap of the image.
 */
void ili9488_draw_pixmap(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height, const ili9488_color_t *p_ul_pixmap)
{
  4012d4:	b510      	push	{r4, lr}
  4012d6:	b084      	sub	sp, #16
	uint32_t size;
	uint32_t dwX1, dwY1, dwX2, dwY2;
	dwX1 = ul_x;
  4012d8:	9003      	str	r0, [sp, #12]
	dwY1 = ul_y;
  4012da:	9102      	str	r1, [sp, #8]
	dwX2 = ul_x + ul_width - 1;
  4012dc:	3a01      	subs	r2, #1
  4012de:	4410      	add	r0, r2
  4012e0:	9001      	str	r0, [sp, #4]
	dwY2 = ul_y + ul_height - 1;
  4012e2:	3b01      	subs	r3, #1
  4012e4:	4419      	add	r1, r3
  4012e6:	ab04      	add	r3, sp, #16
  4012e8:	f843 1d10 	str.w	r1, [r3, #-16]!

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&dwX1, &dwY1, &dwX2, &dwY2);
  4012ec:	aa01      	add	r2, sp, #4
  4012ee:	a902      	add	r1, sp, #8
  4012f0:	a803      	add	r0, sp, #12
  4012f2:	4c13      	ldr	r4, [pc, #76]	; (401340 <ili9488_draw_pixmap+0x6c>)
  4012f4:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(dwX1, dwY1, (dwX2 - dwX1 + 1), (dwY2 - dwY1 + 1));
  4012f6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  4012fa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  4012fe:	9b00      	ldr	r3, [sp, #0]
  401300:	3301      	adds	r3, #1
  401302:	1a5b      	subs	r3, r3, r1
  401304:	9a01      	ldr	r2, [sp, #4]
  401306:	3201      	adds	r2, #1
  401308:	1a12      	subs	r2, r2, r0
  40130a:	b29b      	uxth	r3, r3
  40130c:	b292      	uxth	r2, r2
  40130e:	4c0d      	ldr	r4, [pc, #52]	; (401344 <ili9488_draw_pixmap+0x70>)
  401310:	47a0      	blx	r4

	size = (dwX2 - dwX1) * (dwY2 - dwY1);
  401312:	9903      	ldr	r1, [sp, #12]
  401314:	9a01      	ldr	r2, [sp, #4]
  401316:	1a51      	subs	r1, r2, r1
  401318:	9a02      	ldr	r2, [sp, #8]
  40131a:	9b00      	ldr	r3, [sp, #0]
  40131c:	1a9a      	subs	r2, r3, r2
  40131e:	fb02 f201 	mul.w	r2, r2, r1

	ili9488_write_register(ILI9488_CMD_MEMORY_WRITE, p_ul_pixmap, size * LCD_DATA_COLOR_UNIT);
  401322:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401326:	9906      	ldr	r1, [sp, #24]
  401328:	202c      	movs	r0, #44	; 0x2c
  40132a:	4b07      	ldr	r3, [pc, #28]	; (401348 <ili9488_draw_pixmap+0x74>)
  40132c:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  40132e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  401332:	f44f 72a0 	mov.w	r2, #320	; 0x140
  401336:	2100      	movs	r1, #0
  401338:	4608      	mov	r0, r1
  40133a:	47a0      	blx	r4
}
  40133c:	b004      	add	sp, #16
  40133e:	bd10      	pop	{r4, pc}
  401340:	00400da5 	.word	0x00400da5
  401344:	00400f35 	.word	0x00400f35
  401348:	00400e39 	.word	0x00400e39

0040134c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40134c:	6301      	str	r1, [r0, #48]	; 0x30
  40134e:	4770      	bx	lr

00401350 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401350:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401352:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401356:	d03a      	beq.n	4013ce <pio_set_peripheral+0x7e>
  401358:	d813      	bhi.n	401382 <pio_set_peripheral+0x32>
  40135a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40135e:	d025      	beq.n	4013ac <pio_set_peripheral+0x5c>
  401360:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401364:	d10a      	bne.n	40137c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401366:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401368:	4313      	orrs	r3, r2
  40136a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40136c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40136e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401370:	400b      	ands	r3, r1
  401372:	ea23 0302 	bic.w	r3, r3, r2
  401376:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401378:	6042      	str	r2, [r0, #4]
  40137a:	4770      	bx	lr
	switch (ul_type) {
  40137c:	2900      	cmp	r1, #0
  40137e:	d1fb      	bne.n	401378 <pio_set_peripheral+0x28>
  401380:	4770      	bx	lr
  401382:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401386:	d021      	beq.n	4013cc <pio_set_peripheral+0x7c>
  401388:	d809      	bhi.n	40139e <pio_set_peripheral+0x4e>
  40138a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40138e:	d1f3      	bne.n	401378 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401390:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401392:	4313      	orrs	r3, r2
  401394:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401396:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401398:	4313      	orrs	r3, r2
  40139a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40139c:	e7ec      	b.n	401378 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40139e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4013a2:	d013      	beq.n	4013cc <pio_set_peripheral+0x7c>
  4013a4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4013a8:	d010      	beq.n	4013cc <pio_set_peripheral+0x7c>
  4013aa:	e7e5      	b.n	401378 <pio_set_peripheral+0x28>
{
  4013ac:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013ae:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013b0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4013b2:	43d3      	mvns	r3, r2
  4013b4:	4021      	ands	r1, r4
  4013b6:	461c      	mov	r4, r3
  4013b8:	4019      	ands	r1, r3
  4013ba:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013bc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013be:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4013c0:	400b      	ands	r3, r1
  4013c2:	4023      	ands	r3, r4
  4013c4:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4013c6:	6042      	str	r2, [r0, #4]
}
  4013c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013cc:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013ce:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013d0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4013d2:	400b      	ands	r3, r1
  4013d4:	ea23 0302 	bic.w	r3, r3, r2
  4013d8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013da:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013dc:	4313      	orrs	r3, r2
  4013de:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4013e0:	e7ca      	b.n	401378 <pio_set_peripheral+0x28>

004013e2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4013e2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4013e4:	f012 0f01 	tst.w	r2, #1
  4013e8:	d10d      	bne.n	401406 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4013ea:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4013ec:	f012 0f0a 	tst.w	r2, #10
  4013f0:	d00b      	beq.n	40140a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4013f2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4013f4:	f012 0f02 	tst.w	r2, #2
  4013f8:	d109      	bne.n	40140e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4013fa:	f012 0f08 	tst.w	r2, #8
  4013fe:	d008      	beq.n	401412 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401400:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401404:	e005      	b.n	401412 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401406:	6641      	str	r1, [r0, #100]	; 0x64
  401408:	e7f0      	b.n	4013ec <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40140a:	6241      	str	r1, [r0, #36]	; 0x24
  40140c:	e7f2      	b.n	4013f4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40140e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401412:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401414:	6001      	str	r1, [r0, #0]
  401416:	4770      	bx	lr

00401418 <pio_set_output>:
{
  401418:	b410      	push	{r4}
  40141a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40141c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40141e:	b94c      	cbnz	r4, 401434 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401420:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401422:	b14b      	cbz	r3, 401438 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401424:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401426:	b94a      	cbnz	r2, 40143c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401428:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40142a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40142c:	6001      	str	r1, [r0, #0]
}
  40142e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401432:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401434:	6641      	str	r1, [r0, #100]	; 0x64
  401436:	e7f4      	b.n	401422 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401438:	6541      	str	r1, [r0, #84]	; 0x54
  40143a:	e7f4      	b.n	401426 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40143c:	6301      	str	r1, [r0, #48]	; 0x30
  40143e:	e7f4      	b.n	40142a <pio_set_output+0x12>

00401440 <pio_configure>:
{
  401440:	b570      	push	{r4, r5, r6, lr}
  401442:	b082      	sub	sp, #8
  401444:	4605      	mov	r5, r0
  401446:	4616      	mov	r6, r2
  401448:	461c      	mov	r4, r3
	switch (ul_type) {
  40144a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40144e:	d014      	beq.n	40147a <pio_configure+0x3a>
  401450:	d90a      	bls.n	401468 <pio_configure+0x28>
  401452:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401456:	d024      	beq.n	4014a2 <pio_configure+0x62>
  401458:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40145c:	d021      	beq.n	4014a2 <pio_configure+0x62>
  40145e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401462:	d017      	beq.n	401494 <pio_configure+0x54>
		return 0;
  401464:	2000      	movs	r0, #0
  401466:	e01a      	b.n	40149e <pio_configure+0x5e>
	switch (ul_type) {
  401468:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40146c:	d005      	beq.n	40147a <pio_configure+0x3a>
  40146e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401472:	d002      	beq.n	40147a <pio_configure+0x3a>
  401474:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401478:	d1f4      	bne.n	401464 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40147a:	4632      	mov	r2, r6
  40147c:	4628      	mov	r0, r5
  40147e:	4b11      	ldr	r3, [pc, #68]	; (4014c4 <pio_configure+0x84>)
  401480:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401482:	f014 0f01 	tst.w	r4, #1
  401486:	d102      	bne.n	40148e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401488:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40148a:	2001      	movs	r0, #1
  40148c:	e007      	b.n	40149e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40148e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401490:	2001      	movs	r0, #1
  401492:	e004      	b.n	40149e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401494:	461a      	mov	r2, r3
  401496:	4631      	mov	r1, r6
  401498:	4b0b      	ldr	r3, [pc, #44]	; (4014c8 <pio_configure+0x88>)
  40149a:	4798      	blx	r3
	return 1;
  40149c:	2001      	movs	r0, #1
}
  40149e:	b002      	add	sp, #8
  4014a0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4014a2:	f004 0301 	and.w	r3, r4, #1
  4014a6:	9300      	str	r3, [sp, #0]
  4014a8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4014ac:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4014b0:	bf14      	ite	ne
  4014b2:	2200      	movne	r2, #0
  4014b4:	2201      	moveq	r2, #1
  4014b6:	4631      	mov	r1, r6
  4014b8:	4628      	mov	r0, r5
  4014ba:	4c04      	ldr	r4, [pc, #16]	; (4014cc <pio_configure+0x8c>)
  4014bc:	47a0      	blx	r4
	return 1;
  4014be:	2001      	movs	r0, #1
		break;
  4014c0:	e7ed      	b.n	40149e <pio_configure+0x5e>
  4014c2:	bf00      	nop
  4014c4:	00401351 	.word	0x00401351
  4014c8:	004013e3 	.word	0x004013e3
  4014cc:	00401419 	.word	0x00401419

004014d0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4014d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4014d2:	4770      	bx	lr

004014d4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4014d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4014d6:	4770      	bx	lr

004014d8 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014d8:	4b05      	ldr	r3, [pc, #20]	; (4014f0 <pio_set_pin_high+0x18>)
  4014da:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4014de:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4014e0:	f000 001f 	and.w	r0, r0, #31
  4014e4:	2201      	movs	r2, #1
  4014e6:	fa02 f000 	lsl.w	r0, r2, r0
  4014ea:	6318      	str	r0, [r3, #48]	; 0x30
  4014ec:	4770      	bx	lr
  4014ee:	bf00      	nop
  4014f0:	00200707 	.word	0x00200707

004014f4 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014f4:	4b05      	ldr	r3, [pc, #20]	; (40150c <pio_set_pin_low+0x18>)
  4014f6:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4014fa:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4014fc:	f000 001f 	and.w	r0, r0, #31
  401500:	2201      	movs	r2, #1
  401502:	fa02 f000 	lsl.w	r0, r2, r0
  401506:	6358      	str	r0, [r3, #52]	; 0x34
  401508:	4770      	bx	lr
  40150a:	bf00      	nop
  40150c:	00200707 	.word	0x00200707

00401510 <pio_configure_pin>:
{
  401510:	b570      	push	{r4, r5, r6, lr}
  401512:	b082      	sub	sp, #8
  401514:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401516:	4c46      	ldr	r4, [pc, #280]	; (401630 <pio_configure_pin+0x120>)
  401518:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  40151c:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40151e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401526:	d059      	beq.n	4015dc <pio_configure_pin+0xcc>
  401528:	d80a      	bhi.n	401540 <pio_configure_pin+0x30>
  40152a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40152e:	d02f      	beq.n	401590 <pio_configure_pin+0x80>
  401530:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401534:	d03f      	beq.n	4015b6 <pio_configure_pin+0xa6>
  401536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40153a:	d016      	beq.n	40156a <pio_configure_pin+0x5a>
		return 0;
  40153c:	2000      	movs	r0, #0
  40153e:	e012      	b.n	401566 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401540:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401544:	d05d      	beq.n	401602 <pio_configure_pin+0xf2>
  401546:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40154a:	d05a      	beq.n	401602 <pio_configure_pin+0xf2>
  40154c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401550:	d1f4      	bne.n	40153c <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401552:	f000 011f 	and.w	r1, r0, #31
  401556:	2601      	movs	r6, #1
  401558:	462a      	mov	r2, r5
  40155a:	fa06 f101 	lsl.w	r1, r6, r1
  40155e:	4620      	mov	r0, r4
  401560:	4b34      	ldr	r3, [pc, #208]	; (401634 <pio_configure_pin+0x124>)
  401562:	4798      	blx	r3
	return 1;
  401564:	4630      	mov	r0, r6
}
  401566:	b002      	add	sp, #8
  401568:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40156a:	f000 001f 	and.w	r0, r0, #31
  40156e:	2601      	movs	r6, #1
  401570:	4086      	lsls	r6, r0
  401572:	4632      	mov	r2, r6
  401574:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401578:	4620      	mov	r0, r4
  40157a:	4b2f      	ldr	r3, [pc, #188]	; (401638 <pio_configure_pin+0x128>)
  40157c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40157e:	f015 0f01 	tst.w	r5, #1
  401582:	d102      	bne.n	40158a <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401584:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401586:	2001      	movs	r0, #1
  401588:	e7ed      	b.n	401566 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40158a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40158c:	2001      	movs	r0, #1
  40158e:	e7ea      	b.n	401566 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401590:	f000 001f 	and.w	r0, r0, #31
  401594:	2601      	movs	r6, #1
  401596:	4086      	lsls	r6, r0
  401598:	4632      	mov	r2, r6
  40159a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40159e:	4620      	mov	r0, r4
  4015a0:	4b25      	ldr	r3, [pc, #148]	; (401638 <pio_configure_pin+0x128>)
  4015a2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015a4:	f015 0f01 	tst.w	r5, #1
  4015a8:	d102      	bne.n	4015b0 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4015aa:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015ac:	2001      	movs	r0, #1
  4015ae:	e7da      	b.n	401566 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015b0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015b2:	2001      	movs	r0, #1
  4015b4:	e7d7      	b.n	401566 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4015b6:	f000 001f 	and.w	r0, r0, #31
  4015ba:	2601      	movs	r6, #1
  4015bc:	4086      	lsls	r6, r0
  4015be:	4632      	mov	r2, r6
  4015c0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4015c4:	4620      	mov	r0, r4
  4015c6:	4b1c      	ldr	r3, [pc, #112]	; (401638 <pio_configure_pin+0x128>)
  4015c8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015ca:	f015 0f01 	tst.w	r5, #1
  4015ce:	d102      	bne.n	4015d6 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4015d0:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015d2:	2001      	movs	r0, #1
  4015d4:	e7c7      	b.n	401566 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015d6:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015d8:	2001      	movs	r0, #1
  4015da:	e7c4      	b.n	401566 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4015dc:	f000 001f 	and.w	r0, r0, #31
  4015e0:	2601      	movs	r6, #1
  4015e2:	4086      	lsls	r6, r0
  4015e4:	4632      	mov	r2, r6
  4015e6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4015ea:	4620      	mov	r0, r4
  4015ec:	4b12      	ldr	r3, [pc, #72]	; (401638 <pio_configure_pin+0x128>)
  4015ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015f0:	f015 0f01 	tst.w	r5, #1
  4015f4:	d102      	bne.n	4015fc <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4015f6:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015f8:	2001      	movs	r0, #1
  4015fa:	e7b4      	b.n	401566 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015fc:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015fe:	2001      	movs	r0, #1
  401600:	e7b1      	b.n	401566 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401602:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401606:	f000 011f 	and.w	r1, r0, #31
  40160a:	2601      	movs	r6, #1
  40160c:	ea05 0306 	and.w	r3, r5, r6
  401610:	9300      	str	r3, [sp, #0]
  401612:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401616:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40161a:	bf14      	ite	ne
  40161c:	2200      	movne	r2, #0
  40161e:	2201      	moveq	r2, #1
  401620:	fa06 f101 	lsl.w	r1, r6, r1
  401624:	4620      	mov	r0, r4
  401626:	4c05      	ldr	r4, [pc, #20]	; (40163c <pio_configure_pin+0x12c>)
  401628:	47a0      	blx	r4
	return 1;
  40162a:	4630      	mov	r0, r6
		break;
  40162c:	e79b      	b.n	401566 <pio_configure_pin+0x56>
  40162e:	bf00      	nop
  401630:	00200707 	.word	0x00200707
  401634:	004013e3 	.word	0x004013e3
  401638:	00401351 	.word	0x00401351
  40163c:	00401419 	.word	0x00401419

00401640 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401644:	4604      	mov	r4, r0
  401646:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401648:	4b0e      	ldr	r3, [pc, #56]	; (401684 <pio_handler_process+0x44>)
  40164a:	4798      	blx	r3
  40164c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40164e:	4620      	mov	r0, r4
  401650:	4b0d      	ldr	r3, [pc, #52]	; (401688 <pio_handler_process+0x48>)
  401652:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401654:	4005      	ands	r5, r0
  401656:	d013      	beq.n	401680 <pio_handler_process+0x40>
  401658:	4c0c      	ldr	r4, [pc, #48]	; (40168c <pio_handler_process+0x4c>)
  40165a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40165e:	e003      	b.n	401668 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401660:	42b4      	cmp	r4, r6
  401662:	d00d      	beq.n	401680 <pio_handler_process+0x40>
  401664:	3410      	adds	r4, #16
		while (status != 0) {
  401666:	b15d      	cbz	r5, 401680 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401668:	6820      	ldr	r0, [r4, #0]
  40166a:	4540      	cmp	r0, r8
  40166c:	d1f8      	bne.n	401660 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40166e:	6861      	ldr	r1, [r4, #4]
  401670:	4229      	tst	r1, r5
  401672:	d0f5      	beq.n	401660 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401674:	68e3      	ldr	r3, [r4, #12]
  401676:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401678:	6863      	ldr	r3, [r4, #4]
  40167a:	ea25 0503 	bic.w	r5, r5, r3
  40167e:	e7ef      	b.n	401660 <pio_handler_process+0x20>
  401680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401684:	004014d1 	.word	0x004014d1
  401688:	004014d5 	.word	0x004014d5
  40168c:	20400d9c 	.word	0x20400d9c

00401690 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401690:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401692:	210a      	movs	r1, #10
  401694:	4801      	ldr	r0, [pc, #4]	; (40169c <PIOA_Handler+0xc>)
  401696:	4b02      	ldr	r3, [pc, #8]	; (4016a0 <PIOA_Handler+0x10>)
  401698:	4798      	blx	r3
  40169a:	bd08      	pop	{r3, pc}
  40169c:	400e0e00 	.word	0x400e0e00
  4016a0:	00401641 	.word	0x00401641

004016a4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4016a4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4016a6:	210b      	movs	r1, #11
  4016a8:	4801      	ldr	r0, [pc, #4]	; (4016b0 <PIOB_Handler+0xc>)
  4016aa:	4b02      	ldr	r3, [pc, #8]	; (4016b4 <PIOB_Handler+0x10>)
  4016ac:	4798      	blx	r3
  4016ae:	bd08      	pop	{r3, pc}
  4016b0:	400e1000 	.word	0x400e1000
  4016b4:	00401641 	.word	0x00401641

004016b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4016b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4016ba:	210c      	movs	r1, #12
  4016bc:	4801      	ldr	r0, [pc, #4]	; (4016c4 <PIOC_Handler+0xc>)
  4016be:	4b02      	ldr	r3, [pc, #8]	; (4016c8 <PIOC_Handler+0x10>)
  4016c0:	4798      	blx	r3
  4016c2:	bd08      	pop	{r3, pc}
  4016c4:	400e1200 	.word	0x400e1200
  4016c8:	00401641 	.word	0x00401641

004016cc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4016cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4016ce:	2110      	movs	r1, #16
  4016d0:	4801      	ldr	r0, [pc, #4]	; (4016d8 <PIOD_Handler+0xc>)
  4016d2:	4b02      	ldr	r3, [pc, #8]	; (4016dc <PIOD_Handler+0x10>)
  4016d4:	4798      	blx	r3
  4016d6:	bd08      	pop	{r3, pc}
  4016d8:	400e1400 	.word	0x400e1400
  4016dc:	00401641 	.word	0x00401641

004016e0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4016e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4016e2:	2111      	movs	r1, #17
  4016e4:	4801      	ldr	r0, [pc, #4]	; (4016ec <PIOE_Handler+0xc>)
  4016e6:	4b02      	ldr	r3, [pc, #8]	; (4016f0 <PIOE_Handler+0x10>)
  4016e8:	4798      	blx	r3
  4016ea:	bd08      	pop	{r3, pc}
  4016ec:	400e1600 	.word	0x400e1600
  4016f0:	00401641 	.word	0x00401641

004016f4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4016f4:	2803      	cmp	r0, #3
  4016f6:	d011      	beq.n	40171c <pmc_mck_set_division+0x28>
  4016f8:	2804      	cmp	r0, #4
  4016fa:	d012      	beq.n	401722 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4016fc:	2802      	cmp	r0, #2
  4016fe:	bf0c      	ite	eq
  401700:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401704:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401706:	4a08      	ldr	r2, [pc, #32]	; (401728 <pmc_mck_set_division+0x34>)
  401708:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40170a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40170e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401710:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401712:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401714:	f013 0f08 	tst.w	r3, #8
  401718:	d0fb      	beq.n	401712 <pmc_mck_set_division+0x1e>
}
  40171a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40171c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401720:	e7f1      	b.n	401706 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401722:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401726:	e7ee      	b.n	401706 <pmc_mck_set_division+0x12>
  401728:	400e0600 	.word	0x400e0600

0040172c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40172c:	4a17      	ldr	r2, [pc, #92]	; (40178c <pmc_switch_mck_to_pllack+0x60>)
  40172e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401734:	4318      	orrs	r0, r3
  401736:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401738:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40173a:	f013 0f08 	tst.w	r3, #8
  40173e:	d10a      	bne.n	401756 <pmc_switch_mck_to_pllack+0x2a>
  401740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401744:	4911      	ldr	r1, [pc, #68]	; (40178c <pmc_switch_mck_to_pllack+0x60>)
  401746:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401748:	f012 0f08 	tst.w	r2, #8
  40174c:	d103      	bne.n	401756 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40174e:	3b01      	subs	r3, #1
  401750:	d1f9      	bne.n	401746 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401752:	2001      	movs	r0, #1
  401754:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401756:	4a0d      	ldr	r2, [pc, #52]	; (40178c <pmc_switch_mck_to_pllack+0x60>)
  401758:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40175a:	f023 0303 	bic.w	r3, r3, #3
  40175e:	f043 0302 	orr.w	r3, r3, #2
  401762:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401764:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401766:	f013 0f08 	tst.w	r3, #8
  40176a:	d10a      	bne.n	401782 <pmc_switch_mck_to_pllack+0x56>
  40176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401770:	4906      	ldr	r1, [pc, #24]	; (40178c <pmc_switch_mck_to_pllack+0x60>)
  401772:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401774:	f012 0f08 	tst.w	r2, #8
  401778:	d105      	bne.n	401786 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40177a:	3b01      	subs	r3, #1
  40177c:	d1f9      	bne.n	401772 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40177e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401780:	4770      	bx	lr
	return 0;
  401782:	2000      	movs	r0, #0
  401784:	4770      	bx	lr
  401786:	2000      	movs	r0, #0
  401788:	4770      	bx	lr
  40178a:	bf00      	nop
  40178c:	400e0600 	.word	0x400e0600

00401790 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401790:	b9a0      	cbnz	r0, 4017bc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401792:	480e      	ldr	r0, [pc, #56]	; (4017cc <pmc_switch_mainck_to_xtal+0x3c>)
  401794:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401796:	0209      	lsls	r1, r1, #8
  401798:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40179a:	4a0d      	ldr	r2, [pc, #52]	; (4017d0 <pmc_switch_mainck_to_xtal+0x40>)
  40179c:	401a      	ands	r2, r3
  40179e:	4b0d      	ldr	r3, [pc, #52]	; (4017d4 <pmc_switch_mainck_to_xtal+0x44>)
  4017a0:	4313      	orrs	r3, r2
  4017a2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4017a4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4017a6:	4602      	mov	r2, r0
  4017a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4017aa:	f013 0f01 	tst.w	r3, #1
  4017ae:	d0fb      	beq.n	4017a8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4017b0:	4a06      	ldr	r2, [pc, #24]	; (4017cc <pmc_switch_mainck_to_xtal+0x3c>)
  4017b2:	6a11      	ldr	r1, [r2, #32]
  4017b4:	4b08      	ldr	r3, [pc, #32]	; (4017d8 <pmc_switch_mainck_to_xtal+0x48>)
  4017b6:	430b      	orrs	r3, r1
  4017b8:	6213      	str	r3, [r2, #32]
  4017ba:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017bc:	4903      	ldr	r1, [pc, #12]	; (4017cc <pmc_switch_mainck_to_xtal+0x3c>)
  4017be:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4017c0:	4a06      	ldr	r2, [pc, #24]	; (4017dc <pmc_switch_mainck_to_xtal+0x4c>)
  4017c2:	401a      	ands	r2, r3
  4017c4:	4b06      	ldr	r3, [pc, #24]	; (4017e0 <pmc_switch_mainck_to_xtal+0x50>)
  4017c6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017c8:	620b      	str	r3, [r1, #32]
  4017ca:	4770      	bx	lr
  4017cc:	400e0600 	.word	0x400e0600
  4017d0:	ffc8fffc 	.word	0xffc8fffc
  4017d4:	00370001 	.word	0x00370001
  4017d8:	01370000 	.word	0x01370000
  4017dc:	fec8fffc 	.word	0xfec8fffc
  4017e0:	01370002 	.word	0x01370002

004017e4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4017e4:	4b02      	ldr	r3, [pc, #8]	; (4017f0 <pmc_osc_is_ready_mainck+0xc>)
  4017e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017e8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4017ec:	4770      	bx	lr
  4017ee:	bf00      	nop
  4017f0:	400e0600 	.word	0x400e0600

004017f4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4017f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4017f8:	4b01      	ldr	r3, [pc, #4]	; (401800 <pmc_disable_pllack+0xc>)
  4017fa:	629a      	str	r2, [r3, #40]	; 0x28
  4017fc:	4770      	bx	lr
  4017fe:	bf00      	nop
  401800:	400e0600 	.word	0x400e0600

00401804 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401804:	4b02      	ldr	r3, [pc, #8]	; (401810 <pmc_is_locked_pllack+0xc>)
  401806:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401808:	f000 0002 	and.w	r0, r0, #2
  40180c:	4770      	bx	lr
  40180e:	bf00      	nop
  401810:	400e0600 	.word	0x400e0600

00401814 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401814:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401818:	4b05      	ldr	r3, [pc, #20]	; (401830 <pmc_enable_periph_clk+0x1c>)
  40181a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40181e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401822:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  401826:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40182a:	2000      	movs	r0, #0
  40182c:	4770      	bx	lr
  40182e:	bf00      	nop
  401830:	400e0600 	.word	0x400e0600

00401834 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401834:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401836:	4b07      	ldr	r3, [pc, #28]	; (401854 <spi_enable_clock+0x20>)
  401838:	4298      	cmp	r0, r3
  40183a:	d003      	beq.n	401844 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40183c:	4b06      	ldr	r3, [pc, #24]	; (401858 <spi_enable_clock+0x24>)
  40183e:	4298      	cmp	r0, r3
  401840:	d004      	beq.n	40184c <spi_enable_clock+0x18>
  401842:	bd08      	pop	{r3, pc}
  401844:	2015      	movs	r0, #21
  401846:	4b05      	ldr	r3, [pc, #20]	; (40185c <spi_enable_clock+0x28>)
  401848:	4798      	blx	r3
  40184a:	bd08      	pop	{r3, pc}
  40184c:	202a      	movs	r0, #42	; 0x2a
  40184e:	4b03      	ldr	r3, [pc, #12]	; (40185c <spi_enable_clock+0x28>)
  401850:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401852:	e7f6      	b.n	401842 <spi_enable_clock+0xe>
  401854:	40008000 	.word	0x40008000
  401858:	40058000 	.word	0x40058000
  40185c:	00401815 	.word	0x00401815

00401860 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401860:	6843      	ldr	r3, [r0, #4]
  401862:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401866:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401868:	6843      	ldr	r3, [r0, #4]
  40186a:	0409      	lsls	r1, r1, #16
  40186c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401870:	4319      	orrs	r1, r3
  401872:	6041      	str	r1, [r0, #4]
  401874:	4770      	bx	lr

00401876 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401876:	6843      	ldr	r3, [r0, #4]
  401878:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40187c:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40187e:	6843      	ldr	r3, [r0, #4]
  401880:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401884:	6041      	str	r1, [r0, #4]
  401886:	4770      	bx	lr

00401888 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401888:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40188a:	f643 2499 	movw	r4, #15001	; 0x3a99
  40188e:	6905      	ldr	r5, [r0, #16]
  401890:	f015 0f02 	tst.w	r5, #2
  401894:	d103      	bne.n	40189e <spi_write+0x16>
		if (!timeout--) {
  401896:	3c01      	subs	r4, #1
  401898:	d1f9      	bne.n	40188e <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40189a:	2001      	movs	r0, #1
  40189c:	e00c      	b.n	4018b8 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40189e:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4018a0:	f014 0f02 	tst.w	r4, #2
  4018a4:	d006      	beq.n	4018b4 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4018a6:	0412      	lsls	r2, r2, #16
  4018a8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4018ac:	4311      	orrs	r1, r2
		if (uc_last) {
  4018ae:	b10b      	cbz	r3, 4018b4 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4018b0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4018b4:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4018b6:	2000      	movs	r0, #0
}
  4018b8:	bc30      	pop	{r4, r5}
  4018ba:	4770      	bx	lr

004018bc <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4018bc:	b932      	cbnz	r2, 4018cc <spi_set_clock_polarity+0x10>
  4018be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4018c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018c4:	f023 0301 	bic.w	r3, r3, #1
  4018c8:	6303      	str	r3, [r0, #48]	; 0x30
  4018ca:	4770      	bx	lr
  4018cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4018d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018d2:	f043 0301 	orr.w	r3, r3, #1
  4018d6:	6303      	str	r3, [r0, #48]	; 0x30
  4018d8:	4770      	bx	lr

004018da <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4018da:	b932      	cbnz	r2, 4018ea <spi_set_clock_phase+0x10>
  4018dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4018e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018e2:	f023 0302 	bic.w	r3, r3, #2
  4018e6:	6303      	str	r3, [r0, #48]	; 0x30
  4018e8:	4770      	bx	lr
  4018ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4018ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018f0:	f043 0302 	orr.w	r3, r3, #2
  4018f4:	6303      	str	r3, [r0, #48]	; 0x30
  4018f6:	4770      	bx	lr

004018f8 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4018f8:	2a04      	cmp	r2, #4
  4018fa:	d003      	beq.n	401904 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4018fc:	b16a      	cbz	r2, 40191a <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4018fe:	2a08      	cmp	r2, #8
  401900:	d016      	beq.n	401930 <spi_configure_cs_behavior+0x38>
  401902:	4770      	bx	lr
  401904:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401908:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40190a:	f023 0308 	bic.w	r3, r3, #8
  40190e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401910:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401912:	f043 0304 	orr.w	r3, r3, #4
  401916:	6303      	str	r3, [r0, #48]	; 0x30
  401918:	4770      	bx	lr
  40191a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40191e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401920:	f023 0308 	bic.w	r3, r3, #8
  401924:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401926:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401928:	f023 0304 	bic.w	r3, r3, #4
  40192c:	6303      	str	r3, [r0, #48]	; 0x30
  40192e:	4770      	bx	lr
  401930:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401934:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401936:	f043 0308 	orr.w	r3, r3, #8
  40193a:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40193c:	e7e1      	b.n	401902 <spi_configure_cs_behavior+0xa>

0040193e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40193e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401942:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401948:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40194a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40194c:	431a      	orrs	r2, r3
  40194e:	630a      	str	r2, [r1, #48]	; 0x30
  401950:	4770      	bx	lr

00401952 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401952:	1e43      	subs	r3, r0, #1
  401954:	4419      	add	r1, r3
  401956:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40195a:	1e43      	subs	r3, r0, #1
  40195c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40195e:	bf94      	ite	ls
  401960:	b200      	sxthls	r0, r0
		return -1;
  401962:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401966:	4770      	bx	lr

00401968 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401968:	b17a      	cbz	r2, 40198a <spi_set_baudrate_div+0x22>
{
  40196a:	b410      	push	{r4}
  40196c:	4614      	mov	r4, r2
  40196e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401972:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401978:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40197a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40197c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401980:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401982:	2000      	movs	r0, #0
}
  401984:	f85d 4b04 	ldr.w	r4, [sp], #4
  401988:	4770      	bx	lr
        return -1;
  40198a:	f04f 30ff 	mov.w	r0, #4294967295
  40198e:	4770      	bx	lr

00401990 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401990:	b410      	push	{r4}
  401992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401996:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401998:	b280      	uxth	r0, r0
  40199a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40199c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40199e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4019a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4019a6:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4019a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4019ac:	4770      	bx	lr
	...

004019b0 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4019b0:	4b28      	ldr	r3, [pc, #160]	; (401a54 <twihs_set_speed+0xa4>)
  4019b2:	4299      	cmp	r1, r3
  4019b4:	d84b      	bhi.n	401a4e <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4019b6:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4019ba:	4299      	cmp	r1, r3
  4019bc:	d92d      	bls.n	401a1a <twihs_set_speed+0x6a>
{
  4019be:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4019c0:	4c25      	ldr	r4, [pc, #148]	; (401a58 <twihs_set_speed+0xa8>)
  4019c2:	fba4 3402 	umull	r3, r4, r4, r2
  4019c6:	0ba4      	lsrs	r4, r4, #14
  4019c8:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4019ca:	4b24      	ldr	r3, [pc, #144]	; (401a5c <twihs_set_speed+0xac>)
  4019cc:	440b      	add	r3, r1
  4019ce:	009b      	lsls	r3, r3, #2
  4019d0:	fbb2 f2f3 	udiv	r2, r2, r3
  4019d4:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4019d6:	2cff      	cmp	r4, #255	; 0xff
  4019d8:	d91d      	bls.n	401a16 <twihs_set_speed+0x66>
  4019da:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4019dc:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4019de:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4019e0:	2cff      	cmp	r4, #255	; 0xff
  4019e2:	d901      	bls.n	4019e8 <twihs_set_speed+0x38>
  4019e4:	2906      	cmp	r1, #6
  4019e6:	d9f9      	bls.n	4019dc <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4019e8:	2aff      	cmp	r2, #255	; 0xff
  4019ea:	d907      	bls.n	4019fc <twihs_set_speed+0x4c>
  4019ec:	2906      	cmp	r1, #6
  4019ee:	d805      	bhi.n	4019fc <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4019f0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4019f2:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4019f4:	2aff      	cmp	r2, #255	; 0xff
  4019f6:	d901      	bls.n	4019fc <twihs_set_speed+0x4c>
  4019f8:	2906      	cmp	r1, #6
  4019fa:	d9f9      	bls.n	4019f0 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4019fc:	0213      	lsls	r3, r2, #8
  4019fe:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401a00:	0409      	lsls	r1, r1, #16
  401a02:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401a06:	430b      	orrs	r3, r1
  401a08:	b2e4      	uxtb	r4, r4
  401a0a:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401a0c:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401a0e:	2000      	movs	r0, #0
}
  401a10:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a14:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401a16:	2100      	movs	r1, #0
  401a18:	e7e6      	b.n	4019e8 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401a1a:	0049      	lsls	r1, r1, #1
  401a1c:	fbb2 f2f1 	udiv	r2, r2, r1
  401a20:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401a22:	2aff      	cmp	r2, #255	; 0xff
  401a24:	d911      	bls.n	401a4a <twihs_set_speed+0x9a>
  401a26:	2300      	movs	r3, #0
			ckdiv++;
  401a28:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401a2a:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401a2c:	2aff      	cmp	r2, #255	; 0xff
  401a2e:	d901      	bls.n	401a34 <twihs_set_speed+0x84>
  401a30:	2b06      	cmp	r3, #6
  401a32:	d9f9      	bls.n	401a28 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401a34:	0211      	lsls	r1, r2, #8
  401a36:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401a38:	041b      	lsls	r3, r3, #16
  401a3a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401a3e:	430b      	orrs	r3, r1
  401a40:	b2d2      	uxtb	r2, r2
  401a42:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401a44:	6102      	str	r2, [r0, #16]
	return PASS;
  401a46:	2000      	movs	r0, #0
  401a48:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401a4a:	2300      	movs	r3, #0
  401a4c:	e7f2      	b.n	401a34 <twihs_set_speed+0x84>
		return FAIL;
  401a4e:	2001      	movs	r0, #1
  401a50:	4770      	bx	lr
  401a52:	bf00      	nop
  401a54:	00061a80 	.word	0x00061a80
  401a58:	057619f1 	.word	0x057619f1
  401a5c:	3ffd1200 	.word	0x3ffd1200

00401a60 <twihs_master_init>:
{
  401a60:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401a62:	f04f 32ff 	mov.w	r2, #4294967295
  401a66:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401a68:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401a6a:	2280      	movs	r2, #128	; 0x80
  401a6c:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401a6e:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401a70:	2208      	movs	r2, #8
  401a72:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401a74:	2220      	movs	r2, #32
  401a76:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401a78:	2204      	movs	r2, #4
  401a7a:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401a7c:	680a      	ldr	r2, [r1, #0]
  401a7e:	6849      	ldr	r1, [r1, #4]
  401a80:	4b03      	ldr	r3, [pc, #12]	; (401a90 <twihs_master_init+0x30>)
  401a82:	4798      	blx	r3
}
  401a84:	2801      	cmp	r0, #1
  401a86:	bf14      	ite	ne
  401a88:	2000      	movne	r0, #0
  401a8a:	2001      	moveq	r0, #1
  401a8c:	bd08      	pop	{r3, pc}
  401a8e:	bf00      	nop
  401a90:	004019b1 	.word	0x004019b1

00401a94 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401a94:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401a96:	2a00      	cmp	r2, #0
  401a98:	d04c      	beq.n	401b34 <twihs_master_read+0xa0>
{
  401a9a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401a9c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401a9e:	2600      	movs	r6, #0
  401aa0:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401aa2:	684b      	ldr	r3, [r1, #4]
  401aa4:	021b      	lsls	r3, r3, #8
  401aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401aaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401aae:	7c0d      	ldrb	r5, [r1, #16]
  401ab0:	042d      	lsls	r5, r5, #16
  401ab2:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401ab6:	432b      	orrs	r3, r5
  401ab8:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401aba:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401abc:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401abe:	b15d      	cbz	r5, 401ad8 <twihs_master_read+0x44>
	val = addr[0];
  401ac0:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401ac2:	2d01      	cmp	r5, #1
  401ac4:	dd02      	ble.n	401acc <twihs_master_read+0x38>
		val |= addr[1];
  401ac6:	784e      	ldrb	r6, [r1, #1]
  401ac8:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401acc:	2d02      	cmp	r5, #2
  401ace:	dd04      	ble.n	401ada <twihs_master_read+0x46>
		val |= addr[2];
  401ad0:	7889      	ldrb	r1, [r1, #2]
  401ad2:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401ad6:	e000      	b.n	401ada <twihs_master_read+0x46>
		return 0;
  401ad8:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401ada:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401adc:	2301      	movs	r3, #1
  401ade:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401ae0:	2502      	movs	r5, #2
  401ae2:	e012      	b.n	401b0a <twihs_master_read+0x76>
  401ae4:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401ae6:	f013 0f02 	tst.w	r3, #2
  401aea:	d01b      	beq.n	401b24 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401aec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401aee:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401af0:	6a03      	ldr	r3, [r0, #32]
  401af2:	f013 0f01 	tst.w	r3, #1
  401af6:	d0fb      	beq.n	401af0 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401af8:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401afa:	2000      	movs	r0, #0
}
  401afc:	bc70      	pop	{r4, r5, r6}
  401afe:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401b00:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b02:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401b06:	3a01      	subs	r2, #1
  401b08:	d0f2      	beq.n	401af0 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401b0a:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401b0c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b10:	d114      	bne.n	401b3c <twihs_master_read+0xa8>
  401b12:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401b16:	2a01      	cmp	r2, #1
  401b18:	d0e4      	beq.n	401ae4 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401b1a:	f013 0f02 	tst.w	r3, #2
  401b1e:	d1ef      	bne.n	401b00 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401b20:	2a00      	cmp	r2, #0
  401b22:	d0e5      	beq.n	401af0 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401b24:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401b26:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b2a:	d105      	bne.n	401b38 <twihs_master_read+0xa4>
		if (!timeout--) {
  401b2c:	3901      	subs	r1, #1
  401b2e:	d1f2      	bne.n	401b16 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401b30:	2009      	movs	r0, #9
  401b32:	e7e3      	b.n	401afc <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401b34:	2001      	movs	r0, #1
  401b36:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401b38:	2005      	movs	r0, #5
  401b3a:	e7df      	b.n	401afc <twihs_master_read+0x68>
  401b3c:	2005      	movs	r0, #5
  401b3e:	e7dd      	b.n	401afc <twihs_master_read+0x68>

00401b40 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401b40:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401b42:	2b00      	cmp	r3, #0
  401b44:	d043      	beq.n	401bce <twihs_master_write+0x8e>
{
  401b46:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401b48:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401b4a:	2600      	movs	r6, #0
  401b4c:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401b4e:	7c0a      	ldrb	r2, [r1, #16]
  401b50:	0412      	lsls	r2, r2, #16
  401b52:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401b56:	684d      	ldr	r5, [r1, #4]
  401b58:	022d      	lsls	r5, r5, #8
  401b5a:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401b5e:	432a      	orrs	r2, r5
  401b60:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401b62:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401b64:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401b66:	b15d      	cbz	r5, 401b80 <twihs_master_write+0x40>
	val = addr[0];
  401b68:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401b6a:	2d01      	cmp	r5, #1
  401b6c:	dd02      	ble.n	401b74 <twihs_master_write+0x34>
		val |= addr[1];
  401b6e:	784e      	ldrb	r6, [r1, #1]
  401b70:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401b74:	2d02      	cmp	r5, #2
  401b76:	dd04      	ble.n	401b82 <twihs_master_write+0x42>
		val |= addr[2];
  401b78:	7889      	ldrb	r1, [r1, #2]
  401b7a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401b7e:	e000      	b.n	401b82 <twihs_master_write+0x42>
		return 0;
  401b80:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401b82:	60c2      	str	r2, [r0, #12]
  401b84:	e004      	b.n	401b90 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401b86:	f814 2b01 	ldrb.w	r2, [r4], #1
  401b8a:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401b8c:	3b01      	subs	r3, #1
  401b8e:	d00f      	beq.n	401bb0 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401b90:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401b92:	f412 7f80 	tst.w	r2, #256	; 0x100
  401b96:	d11e      	bne.n	401bd6 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401b98:	f012 0f04 	tst.w	r2, #4
  401b9c:	d1f3      	bne.n	401b86 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401b9e:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401ba0:	f412 7f80 	tst.w	r2, #256	; 0x100
  401ba4:	d115      	bne.n	401bd2 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401ba6:	f012 0f04 	tst.w	r2, #4
  401baa:	d1ec      	bne.n	401b86 <twihs_master_write+0x46>
	while (cnt > 0) {
  401bac:	2b00      	cmp	r3, #0
  401bae:	d1f6      	bne.n	401b9e <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401bb0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401bb2:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bb6:	d111      	bne.n	401bdc <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401bb8:	f013 0f04 	tst.w	r3, #4
  401bbc:	d0f8      	beq.n	401bb0 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401bbe:	2302      	movs	r3, #2
  401bc0:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401bc2:	6a03      	ldr	r3, [r0, #32]
  401bc4:	f013 0f01 	tst.w	r3, #1
  401bc8:	d0fb      	beq.n	401bc2 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401bca:	2000      	movs	r0, #0
  401bcc:	e004      	b.n	401bd8 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401bce:	2001      	movs	r0, #1
  401bd0:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401bd2:	2005      	movs	r0, #5
  401bd4:	e000      	b.n	401bd8 <twihs_master_write+0x98>
  401bd6:	2005      	movs	r0, #5
}
  401bd8:	bc70      	pop	{r4, r5, r6}
  401bda:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401bdc:	2005      	movs	r0, #5
  401bde:	e7fb      	b.n	401bd8 <twihs_master_write+0x98>

00401be0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401be0:	6943      	ldr	r3, [r0, #20]
  401be2:	f013 0f02 	tst.w	r3, #2
  401be6:	d002      	beq.n	401bee <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401be8:	61c1      	str	r1, [r0, #28]
	return 0;
  401bea:	2000      	movs	r0, #0
  401bec:	4770      	bx	lr
		return 1;
  401bee:	2001      	movs	r0, #1
}
  401bf0:	4770      	bx	lr

00401bf2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401bf2:	6943      	ldr	r3, [r0, #20]
  401bf4:	f013 0f01 	tst.w	r3, #1
  401bf8:	d003      	beq.n	401c02 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401bfa:	6983      	ldr	r3, [r0, #24]
  401bfc:	700b      	strb	r3, [r1, #0]
	return 0;
  401bfe:	2000      	movs	r0, #0
  401c00:	4770      	bx	lr
		return 1;
  401c02:	2001      	movs	r0, #1
}
  401c04:	4770      	bx	lr

00401c06 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401c06:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401c08:	010b      	lsls	r3, r1, #4
  401c0a:	4293      	cmp	r3, r2
  401c0c:	d914      	bls.n	401c38 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401c0e:	00c9      	lsls	r1, r1, #3
  401c10:	084b      	lsrs	r3, r1, #1
  401c12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401c16:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401c1a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401c1c:	1e5c      	subs	r4, r3, #1
  401c1e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401c22:	428c      	cmp	r4, r1
  401c24:	d901      	bls.n	401c2a <usart_set_async_baudrate+0x24>
		return 1;
  401c26:	2001      	movs	r0, #1
  401c28:	e017      	b.n	401c5a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401c2a:	6841      	ldr	r1, [r0, #4]
  401c2c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401c30:	6041      	str	r1, [r0, #4]
  401c32:	e00c      	b.n	401c4e <usart_set_async_baudrate+0x48>
		return 1;
  401c34:	2001      	movs	r0, #1
  401c36:	e010      	b.n	401c5a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401c38:	0859      	lsrs	r1, r3, #1
  401c3a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401c3e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401c42:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401c44:	1e5c      	subs	r4, r3, #1
  401c46:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401c4a:	428c      	cmp	r4, r1
  401c4c:	d8f2      	bhi.n	401c34 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401c4e:	0412      	lsls	r2, r2, #16
  401c50:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401c54:	431a      	orrs	r2, r3
  401c56:	6202      	str	r2, [r0, #32]

	return 0;
  401c58:	2000      	movs	r0, #0
}
  401c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c5e:	4770      	bx	lr

00401c60 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401c60:	4b08      	ldr	r3, [pc, #32]	; (401c84 <usart_reset+0x24>)
  401c62:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401c66:	2300      	movs	r3, #0
  401c68:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401c6a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401c6c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401c6e:	2388      	movs	r3, #136	; 0x88
  401c70:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401c72:	2324      	movs	r3, #36	; 0x24
  401c74:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401c76:	f44f 7380 	mov.w	r3, #256	; 0x100
  401c7a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401c7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401c80:	6003      	str	r3, [r0, #0]
  401c82:	4770      	bx	lr
  401c84:	55534100 	.word	0x55534100

00401c88 <usart_init_rs232>:
{
  401c88:	b570      	push	{r4, r5, r6, lr}
  401c8a:	4605      	mov	r5, r0
  401c8c:	460c      	mov	r4, r1
  401c8e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401c90:	4b0f      	ldr	r3, [pc, #60]	; (401cd0 <usart_init_rs232+0x48>)
  401c92:	4798      	blx	r3
	ul_reg_val = 0;
  401c94:	2200      	movs	r2, #0
  401c96:	4b0f      	ldr	r3, [pc, #60]	; (401cd4 <usart_init_rs232+0x4c>)
  401c98:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401c9a:	b1a4      	cbz	r4, 401cc6 <usart_init_rs232+0x3e>
  401c9c:	4632      	mov	r2, r6
  401c9e:	6821      	ldr	r1, [r4, #0]
  401ca0:	4628      	mov	r0, r5
  401ca2:	4b0d      	ldr	r3, [pc, #52]	; (401cd8 <usart_init_rs232+0x50>)
  401ca4:	4798      	blx	r3
  401ca6:	4602      	mov	r2, r0
  401ca8:	b978      	cbnz	r0, 401cca <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401caa:	6863      	ldr	r3, [r4, #4]
  401cac:	68a1      	ldr	r1, [r4, #8]
  401cae:	430b      	orrs	r3, r1
  401cb0:	6921      	ldr	r1, [r4, #16]
  401cb2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401cb4:	68e1      	ldr	r1, [r4, #12]
  401cb6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401cb8:	4906      	ldr	r1, [pc, #24]	; (401cd4 <usart_init_rs232+0x4c>)
  401cba:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401cbc:	6869      	ldr	r1, [r5, #4]
  401cbe:	430b      	orrs	r3, r1
  401cc0:	606b      	str	r3, [r5, #4]
}
  401cc2:	4610      	mov	r0, r2
  401cc4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401cc6:	2201      	movs	r2, #1
  401cc8:	e7fb      	b.n	401cc2 <usart_init_rs232+0x3a>
  401cca:	2201      	movs	r2, #1
  401ccc:	e7f9      	b.n	401cc2 <usart_init_rs232+0x3a>
  401cce:	bf00      	nop
  401cd0:	00401c61 	.word	0x00401c61
  401cd4:	20400e0c 	.word	0x20400e0c
  401cd8:	00401c07 	.word	0x00401c07

00401cdc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401cdc:	2340      	movs	r3, #64	; 0x40
  401cde:	6003      	str	r3, [r0, #0]
  401ce0:	4770      	bx	lr

00401ce2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401ce2:	2310      	movs	r3, #16
  401ce4:	6003      	str	r3, [r0, #0]
  401ce6:	4770      	bx	lr

00401ce8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401ce8:	6943      	ldr	r3, [r0, #20]
  401cea:	f013 0f02 	tst.w	r3, #2
  401cee:	d004      	beq.n	401cfa <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401cf0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401cf4:	61c1      	str	r1, [r0, #28]
	return 0;
  401cf6:	2000      	movs	r0, #0
  401cf8:	4770      	bx	lr
		return 1;
  401cfa:	2001      	movs	r0, #1
}
  401cfc:	4770      	bx	lr

00401cfe <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401cfe:	6943      	ldr	r3, [r0, #20]
  401d00:	f013 0f01 	tst.w	r3, #1
  401d04:	d005      	beq.n	401d12 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401d06:	6983      	ldr	r3, [r0, #24]
  401d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401d0c:	600b      	str	r3, [r1, #0]
	return 0;
  401d0e:	2000      	movs	r0, #0
  401d10:	4770      	bx	lr
		return 1;
  401d12:	2001      	movs	r0, #1
}
  401d14:	4770      	bx	lr

00401d16 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401d16:	e7fe      	b.n	401d16 <Dummy_Handler>

00401d18 <Reset_Handler>:
{
  401d18:	b500      	push	{lr}
  401d1a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401d1c:	4b25      	ldr	r3, [pc, #148]	; (401db4 <Reset_Handler+0x9c>)
  401d1e:	4a26      	ldr	r2, [pc, #152]	; (401db8 <Reset_Handler+0xa0>)
  401d20:	429a      	cmp	r2, r3
  401d22:	d010      	beq.n	401d46 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401d24:	4b25      	ldr	r3, [pc, #148]	; (401dbc <Reset_Handler+0xa4>)
  401d26:	4a23      	ldr	r2, [pc, #140]	; (401db4 <Reset_Handler+0x9c>)
  401d28:	429a      	cmp	r2, r3
  401d2a:	d20c      	bcs.n	401d46 <Reset_Handler+0x2e>
  401d2c:	3b01      	subs	r3, #1
  401d2e:	1a9b      	subs	r3, r3, r2
  401d30:	f023 0303 	bic.w	r3, r3, #3
  401d34:	3304      	adds	r3, #4
  401d36:	4413      	add	r3, r2
  401d38:	491f      	ldr	r1, [pc, #124]	; (401db8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401d3a:	f851 0b04 	ldr.w	r0, [r1], #4
  401d3e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401d42:	429a      	cmp	r2, r3
  401d44:	d1f9      	bne.n	401d3a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401d46:	4b1e      	ldr	r3, [pc, #120]	; (401dc0 <Reset_Handler+0xa8>)
  401d48:	4a1e      	ldr	r2, [pc, #120]	; (401dc4 <Reset_Handler+0xac>)
  401d4a:	429a      	cmp	r2, r3
  401d4c:	d20a      	bcs.n	401d64 <Reset_Handler+0x4c>
  401d4e:	3b01      	subs	r3, #1
  401d50:	1a9b      	subs	r3, r3, r2
  401d52:	f023 0303 	bic.w	r3, r3, #3
  401d56:	3304      	adds	r3, #4
  401d58:	4413      	add	r3, r2
                *pDest++ = 0;
  401d5a:	2100      	movs	r1, #0
  401d5c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401d60:	4293      	cmp	r3, r2
  401d62:	d1fb      	bne.n	401d5c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401d64:	4a18      	ldr	r2, [pc, #96]	; (401dc8 <Reset_Handler+0xb0>)
  401d66:	4b19      	ldr	r3, [pc, #100]	; (401dcc <Reset_Handler+0xb4>)
  401d68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401d6c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401d6e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401d72:	fab3 f383 	clz	r3, r3
  401d76:	095b      	lsrs	r3, r3, #5
  401d78:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401d7a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401d7c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401d80:	2200      	movs	r2, #0
  401d82:	4b13      	ldr	r3, [pc, #76]	; (401dd0 <Reset_Handler+0xb8>)
  401d84:	701a      	strb	r2, [r3, #0]
	return flags;
  401d86:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401d88:	4a12      	ldr	r2, [pc, #72]	; (401dd4 <Reset_Handler+0xbc>)
  401d8a:	6813      	ldr	r3, [r2, #0]
  401d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401d90:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401d92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401d96:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401d9a:	b129      	cbz	r1, 401da8 <Reset_Handler+0x90>
		cpu_irq_enable();
  401d9c:	2201      	movs	r2, #1
  401d9e:	4b0c      	ldr	r3, [pc, #48]	; (401dd0 <Reset_Handler+0xb8>)
  401da0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401da2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401da6:	b662      	cpsie	i
        __libc_init_array();
  401da8:	4b0b      	ldr	r3, [pc, #44]	; (401dd8 <Reset_Handler+0xc0>)
  401daa:	4798      	blx	r3
        main();
  401dac:	4b0b      	ldr	r3, [pc, #44]	; (401ddc <Reset_Handler+0xc4>)
  401dae:	4798      	blx	r3
  401db0:	e7fe      	b.n	401db0 <Reset_Handler+0x98>
  401db2:	bf00      	nop
  401db4:	20400000 	.word	0x20400000
  401db8:	00408d8c 	.word	0x00408d8c
  401dbc:	204009c0 	.word	0x204009c0
  401dc0:	2040c89c 	.word	0x2040c89c
  401dc4:	204009c0 	.word	0x204009c0
  401dc8:	e000ed00 	.word	0xe000ed00
  401dcc:	00400000 	.word	0x00400000
  401dd0:	2040000a 	.word	0x2040000a
  401dd4:	e000ed88 	.word	0xe000ed88
  401dd8:	00404c79 	.word	0x00404c79
  401ddc:	004042cd 	.word	0x004042cd

00401de0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401de0:	4b3b      	ldr	r3, [pc, #236]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401de4:	f003 0303 	and.w	r3, r3, #3
  401de8:	2b01      	cmp	r3, #1
  401dea:	d01d      	beq.n	401e28 <SystemCoreClockUpdate+0x48>
  401dec:	b183      	cbz	r3, 401e10 <SystemCoreClockUpdate+0x30>
  401dee:	2b02      	cmp	r3, #2
  401df0:	d036      	beq.n	401e60 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401df2:	4b37      	ldr	r3, [pc, #220]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401dfa:	2b70      	cmp	r3, #112	; 0x70
  401dfc:	d05f      	beq.n	401ebe <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401dfe:	4b34      	ldr	r3, [pc, #208]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e02:	4934      	ldr	r1, [pc, #208]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401e04:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401e08:	680b      	ldr	r3, [r1, #0]
  401e0a:	40d3      	lsrs	r3, r2
  401e0c:	600b      	str	r3, [r1, #0]
  401e0e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401e10:	4b31      	ldr	r3, [pc, #196]	; (401ed8 <SystemCoreClockUpdate+0xf8>)
  401e12:	695b      	ldr	r3, [r3, #20]
  401e14:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401e18:	bf14      	ite	ne
  401e1a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401e1e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401e22:	4b2c      	ldr	r3, [pc, #176]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401e24:	601a      	str	r2, [r3, #0]
  401e26:	e7e4      	b.n	401df2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401e28:	4b29      	ldr	r3, [pc, #164]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401e2a:	6a1b      	ldr	r3, [r3, #32]
  401e2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401e30:	d003      	beq.n	401e3a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401e32:	4a2a      	ldr	r2, [pc, #168]	; (401edc <SystemCoreClockUpdate+0xfc>)
  401e34:	4b27      	ldr	r3, [pc, #156]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401e36:	601a      	str	r2, [r3, #0]
  401e38:	e7db      	b.n	401df2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401e3a:	4a29      	ldr	r2, [pc, #164]	; (401ee0 <SystemCoreClockUpdate+0x100>)
  401e3c:	4b25      	ldr	r3, [pc, #148]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401e3e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401e40:	4b23      	ldr	r3, [pc, #140]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401e42:	6a1b      	ldr	r3, [r3, #32]
  401e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e48:	2b10      	cmp	r3, #16
  401e4a:	d005      	beq.n	401e58 <SystemCoreClockUpdate+0x78>
  401e4c:	2b20      	cmp	r3, #32
  401e4e:	d1d0      	bne.n	401df2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401e50:	4a22      	ldr	r2, [pc, #136]	; (401edc <SystemCoreClockUpdate+0xfc>)
  401e52:	4b20      	ldr	r3, [pc, #128]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401e54:	601a      	str	r2, [r3, #0]
          break;
  401e56:	e7cc      	b.n	401df2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401e58:	4a22      	ldr	r2, [pc, #136]	; (401ee4 <SystemCoreClockUpdate+0x104>)
  401e5a:	4b1e      	ldr	r3, [pc, #120]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401e5c:	601a      	str	r2, [r3, #0]
          break;
  401e5e:	e7c8      	b.n	401df2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401e60:	4b1b      	ldr	r3, [pc, #108]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401e62:	6a1b      	ldr	r3, [r3, #32]
  401e64:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401e68:	d016      	beq.n	401e98 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401e6a:	4a1c      	ldr	r2, [pc, #112]	; (401edc <SystemCoreClockUpdate+0xfc>)
  401e6c:	4b19      	ldr	r3, [pc, #100]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401e6e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401e70:	4b17      	ldr	r3, [pc, #92]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e74:	f003 0303 	and.w	r3, r3, #3
  401e78:	2b02      	cmp	r3, #2
  401e7a:	d1ba      	bne.n	401df2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401e7c:	4a14      	ldr	r2, [pc, #80]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401e7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401e80:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401e82:	4814      	ldr	r0, [pc, #80]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401e84:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401e88:	6803      	ldr	r3, [r0, #0]
  401e8a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401e8e:	b2d2      	uxtb	r2, r2
  401e90:	fbb3 f3f2 	udiv	r3, r3, r2
  401e94:	6003      	str	r3, [r0, #0]
  401e96:	e7ac      	b.n	401df2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401e98:	4a11      	ldr	r2, [pc, #68]	; (401ee0 <SystemCoreClockUpdate+0x100>)
  401e9a:	4b0e      	ldr	r3, [pc, #56]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401e9c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401e9e:	4b0c      	ldr	r3, [pc, #48]	; (401ed0 <SystemCoreClockUpdate+0xf0>)
  401ea0:	6a1b      	ldr	r3, [r3, #32]
  401ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ea6:	2b10      	cmp	r3, #16
  401ea8:	d005      	beq.n	401eb6 <SystemCoreClockUpdate+0xd6>
  401eaa:	2b20      	cmp	r3, #32
  401eac:	d1e0      	bne.n	401e70 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401eae:	4a0b      	ldr	r2, [pc, #44]	; (401edc <SystemCoreClockUpdate+0xfc>)
  401eb0:	4b08      	ldr	r3, [pc, #32]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401eb2:	601a      	str	r2, [r3, #0]
          break;
  401eb4:	e7dc      	b.n	401e70 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401eb6:	4a0b      	ldr	r2, [pc, #44]	; (401ee4 <SystemCoreClockUpdate+0x104>)
  401eb8:	4b06      	ldr	r3, [pc, #24]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401eba:	601a      	str	r2, [r3, #0]
          break;
  401ebc:	e7d8      	b.n	401e70 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401ebe:	4a05      	ldr	r2, [pc, #20]	; (401ed4 <SystemCoreClockUpdate+0xf4>)
  401ec0:	6813      	ldr	r3, [r2, #0]
  401ec2:	4909      	ldr	r1, [pc, #36]	; (401ee8 <SystemCoreClockUpdate+0x108>)
  401ec4:	fba1 1303 	umull	r1, r3, r1, r3
  401ec8:	085b      	lsrs	r3, r3, #1
  401eca:	6013      	str	r3, [r2, #0]
  401ecc:	4770      	bx	lr
  401ece:	bf00      	nop
  401ed0:	400e0600 	.word	0x400e0600
  401ed4:	2040000c 	.word	0x2040000c
  401ed8:	400e1810 	.word	0x400e1810
  401edc:	00b71b00 	.word	0x00b71b00
  401ee0:	003d0900 	.word	0x003d0900
  401ee4:	007a1200 	.word	0x007a1200
  401ee8:	aaaaaaab 	.word	0xaaaaaaab

00401eec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401eec:	4b16      	ldr	r3, [pc, #88]	; (401f48 <system_init_flash+0x5c>)
  401eee:	4298      	cmp	r0, r3
  401ef0:	d913      	bls.n	401f1a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401ef2:	4b16      	ldr	r3, [pc, #88]	; (401f4c <system_init_flash+0x60>)
  401ef4:	4298      	cmp	r0, r3
  401ef6:	d915      	bls.n	401f24 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401ef8:	4b15      	ldr	r3, [pc, #84]	; (401f50 <system_init_flash+0x64>)
  401efa:	4298      	cmp	r0, r3
  401efc:	d916      	bls.n	401f2c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401efe:	4b15      	ldr	r3, [pc, #84]	; (401f54 <system_init_flash+0x68>)
  401f00:	4298      	cmp	r0, r3
  401f02:	d917      	bls.n	401f34 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401f04:	4b14      	ldr	r3, [pc, #80]	; (401f58 <system_init_flash+0x6c>)
  401f06:	4298      	cmp	r0, r3
  401f08:	d918      	bls.n	401f3c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401f0a:	4b14      	ldr	r3, [pc, #80]	; (401f5c <system_init_flash+0x70>)
  401f0c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401f0e:	bf94      	ite	ls
  401f10:	4a13      	ldrls	r2, [pc, #76]	; (401f60 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401f12:	4a14      	ldrhi	r2, [pc, #80]	; (401f64 <system_init_flash+0x78>)
  401f14:	4b14      	ldr	r3, [pc, #80]	; (401f68 <system_init_flash+0x7c>)
  401f16:	601a      	str	r2, [r3, #0]
  401f18:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401f1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f1e:	4b12      	ldr	r3, [pc, #72]	; (401f68 <system_init_flash+0x7c>)
  401f20:	601a      	str	r2, [r3, #0]
  401f22:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401f24:	4a11      	ldr	r2, [pc, #68]	; (401f6c <system_init_flash+0x80>)
  401f26:	4b10      	ldr	r3, [pc, #64]	; (401f68 <system_init_flash+0x7c>)
  401f28:	601a      	str	r2, [r3, #0]
  401f2a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401f2c:	4a10      	ldr	r2, [pc, #64]	; (401f70 <system_init_flash+0x84>)
  401f2e:	4b0e      	ldr	r3, [pc, #56]	; (401f68 <system_init_flash+0x7c>)
  401f30:	601a      	str	r2, [r3, #0]
  401f32:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401f34:	4a0f      	ldr	r2, [pc, #60]	; (401f74 <system_init_flash+0x88>)
  401f36:	4b0c      	ldr	r3, [pc, #48]	; (401f68 <system_init_flash+0x7c>)
  401f38:	601a      	str	r2, [r3, #0]
  401f3a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401f3c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401f40:	4b09      	ldr	r3, [pc, #36]	; (401f68 <system_init_flash+0x7c>)
  401f42:	601a      	str	r2, [r3, #0]
  401f44:	4770      	bx	lr
  401f46:	bf00      	nop
  401f48:	015ef3bf 	.word	0x015ef3bf
  401f4c:	02bde77f 	.word	0x02bde77f
  401f50:	041cdb3f 	.word	0x041cdb3f
  401f54:	057bceff 	.word	0x057bceff
  401f58:	06dac2bf 	.word	0x06dac2bf
  401f5c:	0839b67f 	.word	0x0839b67f
  401f60:	04000500 	.word	0x04000500
  401f64:	04000600 	.word	0x04000600
  401f68:	400e0c00 	.word	0x400e0c00
  401f6c:	04000100 	.word	0x04000100
  401f70:	04000200 	.word	0x04000200
  401f74:	04000300 	.word	0x04000300

00401f78 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401f78:	4b0a      	ldr	r3, [pc, #40]	; (401fa4 <_sbrk+0x2c>)
  401f7a:	681b      	ldr	r3, [r3, #0]
  401f7c:	b153      	cbz	r3, 401f94 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401f7e:	4b09      	ldr	r3, [pc, #36]	; (401fa4 <_sbrk+0x2c>)
  401f80:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401f82:	181a      	adds	r2, r3, r0
  401f84:	4908      	ldr	r1, [pc, #32]	; (401fa8 <_sbrk+0x30>)
  401f86:	4291      	cmp	r1, r2
  401f88:	db08      	blt.n	401f9c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401f8a:	4610      	mov	r0, r2
  401f8c:	4a05      	ldr	r2, [pc, #20]	; (401fa4 <_sbrk+0x2c>)
  401f8e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401f90:	4618      	mov	r0, r3
  401f92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401f94:	4a05      	ldr	r2, [pc, #20]	; (401fac <_sbrk+0x34>)
  401f96:	4b03      	ldr	r3, [pc, #12]	; (401fa4 <_sbrk+0x2c>)
  401f98:	601a      	str	r2, [r3, #0]
  401f9a:	e7f0      	b.n	401f7e <_sbrk+0x6>
		return (caddr_t) -1;	
  401f9c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401fa0:	4770      	bx	lr
  401fa2:	bf00      	nop
  401fa4:	20400e10 	.word	0x20400e10
  401fa8:	2045fffc 	.word	0x2045fffc
  401fac:	2040eaa0 	.word	0x2040eaa0

00401fb0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401fb0:	f04f 30ff 	mov.w	r0, #4294967295
  401fb4:	4770      	bx	lr

00401fb6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401fba:	604b      	str	r3, [r1, #4]

	return 0;
}
  401fbc:	2000      	movs	r0, #0
  401fbe:	4770      	bx	lr

00401fc0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401fc0:	2001      	movs	r0, #1
  401fc2:	4770      	bx	lr

00401fc4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401fc4:	2000      	movs	r0, #0
  401fc6:	4770      	bx	lr

00401fc8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401fc8:	f100 0308 	add.w	r3, r0, #8
  401fcc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401fce:	f04f 32ff 	mov.w	r2, #4294967295
  401fd2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401fd4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401fd6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401fd8:	2300      	movs	r3, #0
  401fda:	6003      	str	r3, [r0, #0]
  401fdc:	4770      	bx	lr

00401fde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401fde:	2300      	movs	r3, #0
  401fe0:	6103      	str	r3, [r0, #16]
  401fe2:	4770      	bx	lr

00401fe4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401fe4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401fe6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401fe8:	689a      	ldr	r2, [r3, #8]
  401fea:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401fec:	689a      	ldr	r2, [r3, #8]
  401fee:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401ff0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401ff2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401ff4:	6803      	ldr	r3, [r0, #0]
  401ff6:	3301      	adds	r3, #1
  401ff8:	6003      	str	r3, [r0, #0]
  401ffa:	4770      	bx	lr

00401ffc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401ffc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401ffe:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  402000:	f1b5 3fff 	cmp.w	r5, #4294967295
  402004:	d002      	beq.n	40200c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402006:	f100 0208 	add.w	r2, r0, #8
  40200a:	e002      	b.n	402012 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40200c:	6902      	ldr	r2, [r0, #16]
  40200e:	e004      	b.n	40201a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402010:	461a      	mov	r2, r3
  402012:	6853      	ldr	r3, [r2, #4]
  402014:	681c      	ldr	r4, [r3, #0]
  402016:	42a5      	cmp	r5, r4
  402018:	d2fa      	bcs.n	402010 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40201a:	6853      	ldr	r3, [r2, #4]
  40201c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40201e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  402020:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  402022:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  402024:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  402026:	6803      	ldr	r3, [r0, #0]
  402028:	3301      	adds	r3, #1
  40202a:	6003      	str	r3, [r0, #0]
}
  40202c:	bc30      	pop	{r4, r5}
  40202e:	4770      	bx	lr

00402030 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  402030:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  402032:	6842      	ldr	r2, [r0, #4]
  402034:	6881      	ldr	r1, [r0, #8]
  402036:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  402038:	6882      	ldr	r2, [r0, #8]
  40203a:	6841      	ldr	r1, [r0, #4]
  40203c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40203e:	685a      	ldr	r2, [r3, #4]
  402040:	4290      	cmp	r0, r2
  402042:	d005      	beq.n	402050 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  402044:	2200      	movs	r2, #0
  402046:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  402048:	6818      	ldr	r0, [r3, #0]
  40204a:	3801      	subs	r0, #1
  40204c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40204e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  402050:	6882      	ldr	r2, [r0, #8]
  402052:	605a      	str	r2, [r3, #4]
  402054:	e7f6      	b.n	402044 <uxListRemove+0x14>
	...

00402058 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  402058:	4b0d      	ldr	r3, [pc, #52]	; (402090 <prvTaskExitError+0x38>)
  40205a:	681b      	ldr	r3, [r3, #0]
  40205c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402060:	d00a      	beq.n	402078 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  402062:	f04f 0380 	mov.w	r3, #128	; 0x80
  402066:	b672      	cpsid	i
  402068:	f383 8811 	msr	BASEPRI, r3
  40206c:	f3bf 8f6f 	isb	sy
  402070:	f3bf 8f4f 	dsb	sy
  402074:	b662      	cpsie	i
  402076:	e7fe      	b.n	402076 <prvTaskExitError+0x1e>
  402078:	f04f 0380 	mov.w	r3, #128	; 0x80
  40207c:	b672      	cpsid	i
  40207e:	f383 8811 	msr	BASEPRI, r3
  402082:	f3bf 8f6f 	isb	sy
  402086:	f3bf 8f4f 	dsb	sy
  40208a:	b662      	cpsie	i
  40208c:	e7fe      	b.n	40208c <prvTaskExitError+0x34>
  40208e:	bf00      	nop
  402090:	20400010 	.word	0x20400010

00402094 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  402094:	4806      	ldr	r0, [pc, #24]	; (4020b0 <prvPortStartFirstTask+0x1c>)
  402096:	6800      	ldr	r0, [r0, #0]
  402098:	6800      	ldr	r0, [r0, #0]
  40209a:	f380 8808 	msr	MSP, r0
  40209e:	b662      	cpsie	i
  4020a0:	b661      	cpsie	f
  4020a2:	f3bf 8f4f 	dsb	sy
  4020a6:	f3bf 8f6f 	isb	sy
  4020aa:	df00      	svc	0
  4020ac:	bf00      	nop
  4020ae:	0000      	.short	0x0000
  4020b0:	e000ed08 	.word	0xe000ed08

004020b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4020b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4020c4 <vPortEnableVFP+0x10>
  4020b8:	6801      	ldr	r1, [r0, #0]
  4020ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4020be:	6001      	str	r1, [r0, #0]
  4020c0:	4770      	bx	lr
  4020c2:	0000      	.short	0x0000
  4020c4:	e000ed88 	.word	0xe000ed88

004020c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4020c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4020cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4020d0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4020d4:	4b05      	ldr	r3, [pc, #20]	; (4020ec <pxPortInitialiseStack+0x24>)
  4020d6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4020da:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4020de:	f06f 0302 	mvn.w	r3, #2
  4020e2:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4020e6:	3844      	subs	r0, #68	; 0x44
  4020e8:	4770      	bx	lr
  4020ea:	bf00      	nop
  4020ec:	00402059 	.word	0x00402059

004020f0 <SVC_Handler>:
	__asm volatile (
  4020f0:	4b06      	ldr	r3, [pc, #24]	; (40210c <pxCurrentTCBConst2>)
  4020f2:	6819      	ldr	r1, [r3, #0]
  4020f4:	6808      	ldr	r0, [r1, #0]
  4020f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020fa:	f380 8809 	msr	PSP, r0
  4020fe:	f3bf 8f6f 	isb	sy
  402102:	f04f 0000 	mov.w	r0, #0
  402106:	f380 8811 	msr	BASEPRI, r0
  40210a:	4770      	bx	lr

0040210c <pxCurrentTCBConst2>:
  40210c:	2040c624 	.word	0x2040c624
  402110:	4770      	bx	lr
  402112:	bf00      	nop

00402114 <vPortEnterCritical>:
  402114:	f04f 0380 	mov.w	r3, #128	; 0x80
  402118:	b672      	cpsid	i
  40211a:	f383 8811 	msr	BASEPRI, r3
  40211e:	f3bf 8f6f 	isb	sy
  402122:	f3bf 8f4f 	dsb	sy
  402126:	b662      	cpsie	i
	uxCriticalNesting++;
  402128:	4a0b      	ldr	r2, [pc, #44]	; (402158 <vPortEnterCritical+0x44>)
  40212a:	6813      	ldr	r3, [r2, #0]
  40212c:	3301      	adds	r3, #1
  40212e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  402130:	2b01      	cmp	r3, #1
  402132:	d10f      	bne.n	402154 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  402134:	4b09      	ldr	r3, [pc, #36]	; (40215c <vPortEnterCritical+0x48>)
  402136:	681b      	ldr	r3, [r3, #0]
  402138:	f013 0fff 	tst.w	r3, #255	; 0xff
  40213c:	d00a      	beq.n	402154 <vPortEnterCritical+0x40>
  40213e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402142:	b672      	cpsid	i
  402144:	f383 8811 	msr	BASEPRI, r3
  402148:	f3bf 8f6f 	isb	sy
  40214c:	f3bf 8f4f 	dsb	sy
  402150:	b662      	cpsie	i
  402152:	e7fe      	b.n	402152 <vPortEnterCritical+0x3e>
  402154:	4770      	bx	lr
  402156:	bf00      	nop
  402158:	20400010 	.word	0x20400010
  40215c:	e000ed04 	.word	0xe000ed04

00402160 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  402160:	4b0a      	ldr	r3, [pc, #40]	; (40218c <vPortExitCritical+0x2c>)
  402162:	681b      	ldr	r3, [r3, #0]
  402164:	b953      	cbnz	r3, 40217c <vPortExitCritical+0x1c>
  402166:	f04f 0380 	mov.w	r3, #128	; 0x80
  40216a:	b672      	cpsid	i
  40216c:	f383 8811 	msr	BASEPRI, r3
  402170:	f3bf 8f6f 	isb	sy
  402174:	f3bf 8f4f 	dsb	sy
  402178:	b662      	cpsie	i
  40217a:	e7fe      	b.n	40217a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40217c:	3b01      	subs	r3, #1
  40217e:	4a03      	ldr	r2, [pc, #12]	; (40218c <vPortExitCritical+0x2c>)
  402180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  402182:	b90b      	cbnz	r3, 402188 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  402184:	f383 8811 	msr	BASEPRI, r3
  402188:	4770      	bx	lr
  40218a:	bf00      	nop
  40218c:	20400010 	.word	0x20400010

00402190 <PendSV_Handler>:
	__asm volatile
  402190:	f3ef 8009 	mrs	r0, PSP
  402194:	f3bf 8f6f 	isb	sy
  402198:	4b15      	ldr	r3, [pc, #84]	; (4021f0 <pxCurrentTCBConst>)
  40219a:	681a      	ldr	r2, [r3, #0]
  40219c:	f01e 0f10 	tst.w	lr, #16
  4021a0:	bf08      	it	eq
  4021a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4021a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021aa:	6010      	str	r0, [r2, #0]
  4021ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4021b0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4021b4:	b672      	cpsid	i
  4021b6:	f380 8811 	msr	BASEPRI, r0
  4021ba:	f3bf 8f4f 	dsb	sy
  4021be:	f3bf 8f6f 	isb	sy
  4021c2:	b662      	cpsie	i
  4021c4:	f001 f8aa 	bl	40331c <vTaskSwitchContext>
  4021c8:	f04f 0000 	mov.w	r0, #0
  4021cc:	f380 8811 	msr	BASEPRI, r0
  4021d0:	bc08      	pop	{r3}
  4021d2:	6819      	ldr	r1, [r3, #0]
  4021d4:	6808      	ldr	r0, [r1, #0]
  4021d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021da:	f01e 0f10 	tst.w	lr, #16
  4021de:	bf08      	it	eq
  4021e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4021e4:	f380 8809 	msr	PSP, r0
  4021e8:	f3bf 8f6f 	isb	sy
  4021ec:	4770      	bx	lr
  4021ee:	bf00      	nop

004021f0 <pxCurrentTCBConst>:
  4021f0:	2040c624 	.word	0x2040c624
  4021f4:	4770      	bx	lr
  4021f6:	bf00      	nop

004021f8 <SysTick_Handler>:
{
  4021f8:	b508      	push	{r3, lr}
	__asm volatile
  4021fa:	f3ef 8311 	mrs	r3, BASEPRI
  4021fe:	f04f 0280 	mov.w	r2, #128	; 0x80
  402202:	b672      	cpsid	i
  402204:	f382 8811 	msr	BASEPRI, r2
  402208:	f3bf 8f6f 	isb	sy
  40220c:	f3bf 8f4f 	dsb	sy
  402210:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  402212:	4b05      	ldr	r3, [pc, #20]	; (402228 <SysTick_Handler+0x30>)
  402214:	4798      	blx	r3
  402216:	b118      	cbz	r0, 402220 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  402218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40221c:	4b03      	ldr	r3, [pc, #12]	; (40222c <SysTick_Handler+0x34>)
  40221e:	601a      	str	r2, [r3, #0]
	__asm volatile
  402220:	2300      	movs	r3, #0
  402222:	f383 8811 	msr	BASEPRI, r3
  402226:	bd08      	pop	{r3, pc}
  402228:	00402f89 	.word	0x00402f89
  40222c:	e000ed04 	.word	0xe000ed04

00402230 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  402230:	4a03      	ldr	r2, [pc, #12]	; (402240 <vPortSetupTimerInterrupt+0x10>)
  402232:	4b04      	ldr	r3, [pc, #16]	; (402244 <vPortSetupTimerInterrupt+0x14>)
  402234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  402236:	2207      	movs	r2, #7
  402238:	3b04      	subs	r3, #4
  40223a:	601a      	str	r2, [r3, #0]
  40223c:	4770      	bx	lr
  40223e:	bf00      	nop
  402240:	0003a97f 	.word	0x0003a97f
  402244:	e000e014 	.word	0xe000e014

00402248 <xPortStartScheduler>:
{
  402248:	b500      	push	{lr}
  40224a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  40224c:	4b25      	ldr	r3, [pc, #148]	; (4022e4 <xPortStartScheduler+0x9c>)
  40224e:	781a      	ldrb	r2, [r3, #0]
  402250:	b2d2      	uxtb	r2, r2
  402252:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402254:	22ff      	movs	r2, #255	; 0xff
  402256:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  402258:	781b      	ldrb	r3, [r3, #0]
  40225a:	b2db      	uxtb	r3, r3
  40225c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402260:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402264:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402268:	4a1f      	ldr	r2, [pc, #124]	; (4022e8 <xPortStartScheduler+0xa0>)
  40226a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40226c:	2207      	movs	r2, #7
  40226e:	4b1f      	ldr	r3, [pc, #124]	; (4022ec <xPortStartScheduler+0xa4>)
  402270:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402272:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402276:	f013 0f80 	tst.w	r3, #128	; 0x80
  40227a:	d010      	beq.n	40229e <xPortStartScheduler+0x56>
  40227c:	2206      	movs	r2, #6
  40227e:	e000      	b.n	402282 <xPortStartScheduler+0x3a>
  402280:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  402282:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402286:	005b      	lsls	r3, r3, #1
  402288:	b2db      	uxtb	r3, r3
  40228a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40228e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402292:	1e51      	subs	r1, r2, #1
  402294:	f013 0f80 	tst.w	r3, #128	; 0x80
  402298:	d1f2      	bne.n	402280 <xPortStartScheduler+0x38>
  40229a:	4b14      	ldr	r3, [pc, #80]	; (4022ec <xPortStartScheduler+0xa4>)
  40229c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40229e:	4a13      	ldr	r2, [pc, #76]	; (4022ec <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4022a0:	6813      	ldr	r3, [r2, #0]
  4022a2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4022a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4022a8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4022aa:	9b01      	ldr	r3, [sp, #4]
  4022ac:	b2db      	uxtb	r3, r3
  4022ae:	4a0d      	ldr	r2, [pc, #52]	; (4022e4 <xPortStartScheduler+0x9c>)
  4022b0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4022b2:	4b0f      	ldr	r3, [pc, #60]	; (4022f0 <xPortStartScheduler+0xa8>)
  4022b4:	681a      	ldr	r2, [r3, #0]
  4022b6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4022ba:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4022bc:	681a      	ldr	r2, [r3, #0]
  4022be:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4022c2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4022c4:	4b0b      	ldr	r3, [pc, #44]	; (4022f4 <xPortStartScheduler+0xac>)
  4022c6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4022c8:	2200      	movs	r2, #0
  4022ca:	4b0b      	ldr	r3, [pc, #44]	; (4022f8 <xPortStartScheduler+0xb0>)
  4022cc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4022ce:	4b0b      	ldr	r3, [pc, #44]	; (4022fc <xPortStartScheduler+0xb4>)
  4022d0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4022d2:	4a0b      	ldr	r2, [pc, #44]	; (402300 <xPortStartScheduler+0xb8>)
  4022d4:	6813      	ldr	r3, [r2, #0]
  4022d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4022da:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4022dc:	4b09      	ldr	r3, [pc, #36]	; (402304 <xPortStartScheduler+0xbc>)
  4022de:	4798      	blx	r3
	prvTaskExitError();
  4022e0:	4b09      	ldr	r3, [pc, #36]	; (402308 <xPortStartScheduler+0xc0>)
  4022e2:	4798      	blx	r3
  4022e4:	e000e400 	.word	0xe000e400
  4022e8:	20400e14 	.word	0x20400e14
  4022ec:	20400e18 	.word	0x20400e18
  4022f0:	e000ed20 	.word	0xe000ed20
  4022f4:	00402231 	.word	0x00402231
  4022f8:	20400010 	.word	0x20400010
  4022fc:	004020b5 	.word	0x004020b5
  402300:	e000ef34 	.word	0xe000ef34
  402304:	00402095 	.word	0x00402095
  402308:	00402059 	.word	0x00402059

0040230c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40230c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  402310:	2b0f      	cmp	r3, #15
  402312:	d911      	bls.n	402338 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  402314:	4a12      	ldr	r2, [pc, #72]	; (402360 <vPortValidateInterruptPriority+0x54>)
  402316:	5c9b      	ldrb	r3, [r3, r2]
  402318:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40231a:	4a12      	ldr	r2, [pc, #72]	; (402364 <vPortValidateInterruptPriority+0x58>)
  40231c:	7812      	ldrb	r2, [r2, #0]
  40231e:	429a      	cmp	r2, r3
  402320:	d90a      	bls.n	402338 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  402322:	f04f 0380 	mov.w	r3, #128	; 0x80
  402326:	b672      	cpsid	i
  402328:	f383 8811 	msr	BASEPRI, r3
  40232c:	f3bf 8f6f 	isb	sy
  402330:	f3bf 8f4f 	dsb	sy
  402334:	b662      	cpsie	i
  402336:	e7fe      	b.n	402336 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  402338:	4b0b      	ldr	r3, [pc, #44]	; (402368 <vPortValidateInterruptPriority+0x5c>)
  40233a:	681b      	ldr	r3, [r3, #0]
  40233c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402340:	4a0a      	ldr	r2, [pc, #40]	; (40236c <vPortValidateInterruptPriority+0x60>)
  402342:	6812      	ldr	r2, [r2, #0]
  402344:	4293      	cmp	r3, r2
  402346:	d90a      	bls.n	40235e <vPortValidateInterruptPriority+0x52>
  402348:	f04f 0380 	mov.w	r3, #128	; 0x80
  40234c:	b672      	cpsid	i
  40234e:	f383 8811 	msr	BASEPRI, r3
  402352:	f3bf 8f6f 	isb	sy
  402356:	f3bf 8f4f 	dsb	sy
  40235a:	b662      	cpsie	i
  40235c:	e7fe      	b.n	40235c <vPortValidateInterruptPriority+0x50>
  40235e:	4770      	bx	lr
  402360:	e000e3f0 	.word	0xe000e3f0
  402364:	20400e14 	.word	0x20400e14
  402368:	e000ed0c 	.word	0xe000ed0c
  40236c:	20400e18 	.word	0x20400e18

00402370 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402370:	b538      	push	{r3, r4, r5, lr}
  402372:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  402374:	f010 0f07 	tst.w	r0, #7
  402378:	d002      	beq.n	402380 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40237a:	f020 0407 	bic.w	r4, r0, #7
  40237e:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  402380:	4b11      	ldr	r3, [pc, #68]	; (4023c8 <pvPortMalloc+0x58>)
  402382:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  402384:	4b11      	ldr	r3, [pc, #68]	; (4023cc <pvPortMalloc+0x5c>)
  402386:	681b      	ldr	r3, [r3, #0]
  402388:	b193      	cbz	r3, 4023b0 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40238a:	4b11      	ldr	r3, [pc, #68]	; (4023d0 <pvPortMalloc+0x60>)
  40238c:	681b      	ldr	r3, [r3, #0]
  40238e:	441c      	add	r4, r3
  402390:	42a3      	cmp	r3, r4
  402392:	d213      	bcs.n	4023bc <pvPortMalloc+0x4c>
  402394:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  402398:	4294      	cmp	r4, r2
  40239a:	d80f      	bhi.n	4023bc <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40239c:	4a0b      	ldr	r2, [pc, #44]	; (4023cc <pvPortMalloc+0x5c>)
  40239e:	6815      	ldr	r5, [r2, #0]
  4023a0:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4023a2:	4b0b      	ldr	r3, [pc, #44]	; (4023d0 <pvPortMalloc+0x60>)
  4023a4:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4023a6:	4b0b      	ldr	r3, [pc, #44]	; (4023d4 <pvPortMalloc+0x64>)
  4023a8:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4023aa:	b14d      	cbz	r5, 4023c0 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4023ac:	4628      	mov	r0, r5
  4023ae:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4023b0:	4b09      	ldr	r3, [pc, #36]	; (4023d8 <pvPortMalloc+0x68>)
  4023b2:	f023 0307 	bic.w	r3, r3, #7
  4023b6:	4a05      	ldr	r2, [pc, #20]	; (4023cc <pvPortMalloc+0x5c>)
  4023b8:	6013      	str	r3, [r2, #0]
  4023ba:	e7e6      	b.n	40238a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4023bc:	4b05      	ldr	r3, [pc, #20]	; (4023d4 <pvPortMalloc+0x64>)
  4023be:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4023c0:	4b06      	ldr	r3, [pc, #24]	; (4023dc <pvPortMalloc+0x6c>)
  4023c2:	4798      	blx	r3
  4023c4:	2500      	movs	r5, #0
	return pvReturn;
  4023c6:	e7f1      	b.n	4023ac <pvPortMalloc+0x3c>
  4023c8:	00402f6d 	.word	0x00402f6d
  4023cc:	20400e1c 	.word	0x20400e1c
  4023d0:	2040c620 	.word	0x2040c620
  4023d4:	004030d5 	.word	0x004030d5
  4023d8:	20400e28 	.word	0x20400e28
  4023dc:	00403e1f 	.word	0x00403e1f

004023e0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4023e0:	b150      	cbz	r0, 4023f8 <vPortFree+0x18>
  4023e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023e6:	b672      	cpsid	i
  4023e8:	f383 8811 	msr	BASEPRI, r3
  4023ec:	f3bf 8f6f 	isb	sy
  4023f0:	f3bf 8f4f 	dsb	sy
  4023f4:	b662      	cpsie	i
  4023f6:	e7fe      	b.n	4023f6 <vPortFree+0x16>
  4023f8:	4770      	bx	lr
	...

004023fc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4023fc:	b538      	push	{r3, r4, r5, lr}
  4023fe:	4604      	mov	r4, r0
  402400:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  402402:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402404:	b95a      	cbnz	r2, 40241e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402406:	6803      	ldr	r3, [r0, #0]
  402408:	2b00      	cmp	r3, #0
  40240a:	d12e      	bne.n	40246a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40240c:	6840      	ldr	r0, [r0, #4]
  40240e:	4b1b      	ldr	r3, [pc, #108]	; (40247c <prvCopyDataToQueue+0x80>)
  402410:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  402412:	2300      	movs	r3, #0
  402414:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  402416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402418:	3301      	adds	r3, #1
  40241a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40241c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40241e:	b96d      	cbnz	r5, 40243c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  402420:	6880      	ldr	r0, [r0, #8]
  402422:	4b17      	ldr	r3, [pc, #92]	; (402480 <prvCopyDataToQueue+0x84>)
  402424:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  402426:	68a3      	ldr	r3, [r4, #8]
  402428:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40242a:	4413      	add	r3, r2
  40242c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40242e:	6862      	ldr	r2, [r4, #4]
  402430:	4293      	cmp	r3, r2
  402432:	d31c      	bcc.n	40246e <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  402434:	6823      	ldr	r3, [r4, #0]
  402436:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  402438:	2000      	movs	r0, #0
  40243a:	e7ec      	b.n	402416 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40243c:	68c0      	ldr	r0, [r0, #12]
  40243e:	4b10      	ldr	r3, [pc, #64]	; (402480 <prvCopyDataToQueue+0x84>)
  402440:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  402442:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402444:	425b      	negs	r3, r3
  402446:	68e2      	ldr	r2, [r4, #12]
  402448:	441a      	add	r2, r3
  40244a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40244c:	6821      	ldr	r1, [r4, #0]
  40244e:	428a      	cmp	r2, r1
  402450:	d202      	bcs.n	402458 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  402452:	6862      	ldr	r2, [r4, #4]
  402454:	4413      	add	r3, r2
  402456:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  402458:	2d02      	cmp	r5, #2
  40245a:	d10a      	bne.n	402472 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40245c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40245e:	b153      	cbz	r3, 402476 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  402460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402462:	3b01      	subs	r3, #1
  402464:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  402466:	2000      	movs	r0, #0
  402468:	e7d5      	b.n	402416 <prvCopyDataToQueue+0x1a>
  40246a:	2000      	movs	r0, #0
  40246c:	e7d3      	b.n	402416 <prvCopyDataToQueue+0x1a>
  40246e:	2000      	movs	r0, #0
  402470:	e7d1      	b.n	402416 <prvCopyDataToQueue+0x1a>
  402472:	2000      	movs	r0, #0
  402474:	e7cf      	b.n	402416 <prvCopyDataToQueue+0x1a>
  402476:	2000      	movs	r0, #0
  402478:	e7cd      	b.n	402416 <prvCopyDataToQueue+0x1a>
  40247a:	bf00      	nop
  40247c:	0040371d 	.word	0x0040371d
  402480:	00405261 	.word	0x00405261

00402484 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  402484:	b530      	push	{r4, r5, lr}
  402486:	b083      	sub	sp, #12
  402488:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40248a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  40248c:	b174      	cbz	r4, 4024ac <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40248e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402492:	429a      	cmp	r2, r3
  402494:	d315      	bcc.n	4024c2 <prvNotifyQueueSetContainer+0x3e>
  402496:	f04f 0380 	mov.w	r3, #128	; 0x80
  40249a:	b672      	cpsid	i
  40249c:	f383 8811 	msr	BASEPRI, r3
  4024a0:	f3bf 8f6f 	isb	sy
  4024a4:	f3bf 8f4f 	dsb	sy
  4024a8:	b662      	cpsie	i
  4024aa:	e7fe      	b.n	4024aa <prvNotifyQueueSetContainer+0x26>
  4024ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024b0:	b672      	cpsid	i
  4024b2:	f383 8811 	msr	BASEPRI, r3
  4024b6:	f3bf 8f6f 	isb	sy
  4024ba:	f3bf 8f4f 	dsb	sy
  4024be:	b662      	cpsie	i
  4024c0:	e7fe      	b.n	4024c0 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4024c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4024c4:	4293      	cmp	r3, r2
  4024c6:	d803      	bhi.n	4024d0 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4024c8:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4024ca:	4628      	mov	r0, r5
  4024cc:	b003      	add	sp, #12
  4024ce:	bd30      	pop	{r4, r5, pc}
  4024d0:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4024d2:	a901      	add	r1, sp, #4
  4024d4:	4620      	mov	r0, r4
  4024d6:	4b0b      	ldr	r3, [pc, #44]	; (402504 <prvNotifyQueueSetContainer+0x80>)
  4024d8:	4798      	blx	r3
  4024da:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4024dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024e2:	d10a      	bne.n	4024fa <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4024e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024e6:	2b00      	cmp	r3, #0
  4024e8:	d0ef      	beq.n	4024ca <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4024ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4024ee:	4b06      	ldr	r3, [pc, #24]	; (402508 <prvNotifyQueueSetContainer+0x84>)
  4024f0:	4798      	blx	r3
  4024f2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4024f4:	bf18      	it	ne
  4024f6:	2501      	movne	r5, #1
  4024f8:	e7e7      	b.n	4024ca <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4024fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024fc:	3301      	adds	r3, #1
  4024fe:	64a3      	str	r3, [r4, #72]	; 0x48
  402500:	e7e3      	b.n	4024ca <prvNotifyQueueSetContainer+0x46>
  402502:	bf00      	nop
  402504:	004023fd 	.word	0x004023fd
  402508:	004034f1 	.word	0x004034f1

0040250c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40250c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40250e:	b172      	cbz	r2, 40252e <prvCopyDataFromQueue+0x22>
{
  402510:	b510      	push	{r4, lr}
  402512:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  402514:	68c4      	ldr	r4, [r0, #12]
  402516:	4414      	add	r4, r2
  402518:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40251a:	6840      	ldr	r0, [r0, #4]
  40251c:	4284      	cmp	r4, r0
  40251e:	d301      	bcc.n	402524 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  402520:	6818      	ldr	r0, [r3, #0]
  402522:	60d8      	str	r0, [r3, #12]
  402524:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  402526:	68d9      	ldr	r1, [r3, #12]
  402528:	4b01      	ldr	r3, [pc, #4]	; (402530 <prvCopyDataFromQueue+0x24>)
  40252a:	4798      	blx	r3
  40252c:	bd10      	pop	{r4, pc}
  40252e:	4770      	bx	lr
  402530:	00405261 	.word	0x00405261

00402534 <prvUnlockQueue>:
{
  402534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402536:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  402538:	4b22      	ldr	r3, [pc, #136]	; (4025c4 <prvUnlockQueue+0x90>)
  40253a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40253c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40253e:	2b00      	cmp	r3, #0
  402540:	dd1b      	ble.n	40257a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402542:	4d21      	ldr	r5, [pc, #132]	; (4025c8 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  402544:	4f21      	ldr	r7, [pc, #132]	; (4025cc <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402546:	4e22      	ldr	r6, [pc, #136]	; (4025d0 <prvUnlockQueue+0x9c>)
  402548:	e00b      	b.n	402562 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40254a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40254c:	b1ab      	cbz	r3, 40257a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40254e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402552:	47b0      	blx	r6
  402554:	b978      	cbnz	r0, 402576 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  402556:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402558:	3b01      	subs	r3, #1
  40255a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40255c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40255e:	2b00      	cmp	r3, #0
  402560:	dd0b      	ble.n	40257a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  402562:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402564:	2b00      	cmp	r3, #0
  402566:	d0f0      	beq.n	40254a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402568:	2100      	movs	r1, #0
  40256a:	4620      	mov	r0, r4
  40256c:	47a8      	blx	r5
  40256e:	2801      	cmp	r0, #1
  402570:	d1f1      	bne.n	402556 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  402572:	47b8      	blx	r7
  402574:	e7ef      	b.n	402556 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  402576:	47b8      	blx	r7
  402578:	e7ed      	b.n	402556 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40257a:	f04f 33ff 	mov.w	r3, #4294967295
  40257e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  402580:	4b14      	ldr	r3, [pc, #80]	; (4025d4 <prvUnlockQueue+0xa0>)
  402582:	4798      	blx	r3
	taskENTER_CRITICAL();
  402584:	4b0f      	ldr	r3, [pc, #60]	; (4025c4 <prvUnlockQueue+0x90>)
  402586:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402588:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40258a:	2b00      	cmp	r3, #0
  40258c:	dd14      	ble.n	4025b8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40258e:	6923      	ldr	r3, [r4, #16]
  402590:	b193      	cbz	r3, 4025b8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402592:	f104 0610 	add.w	r6, r4, #16
  402596:	4d0e      	ldr	r5, [pc, #56]	; (4025d0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  402598:	4f0c      	ldr	r7, [pc, #48]	; (4025cc <prvUnlockQueue+0x98>)
  40259a:	e007      	b.n	4025ac <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  40259c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40259e:	3b01      	subs	r3, #1
  4025a0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4025a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4025a4:	2b00      	cmp	r3, #0
  4025a6:	dd07      	ble.n	4025b8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4025a8:	6923      	ldr	r3, [r4, #16]
  4025aa:	b12b      	cbz	r3, 4025b8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4025ac:	4630      	mov	r0, r6
  4025ae:	47a8      	blx	r5
  4025b0:	2800      	cmp	r0, #0
  4025b2:	d0f3      	beq.n	40259c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4025b4:	47b8      	blx	r7
  4025b6:	e7f1      	b.n	40259c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4025b8:	f04f 33ff 	mov.w	r3, #4294967295
  4025bc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4025be:	4b05      	ldr	r3, [pc, #20]	; (4025d4 <prvUnlockQueue+0xa0>)
  4025c0:	4798      	blx	r3
  4025c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025c4:	00402115 	.word	0x00402115
  4025c8:	00402485 	.word	0x00402485
  4025cc:	0040364d 	.word	0x0040364d
  4025d0:	004034f1 	.word	0x004034f1
  4025d4:	00402161 	.word	0x00402161

004025d8 <xQueueGenericReset>:
{
  4025d8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4025da:	b308      	cbz	r0, 402620 <xQueueGenericReset+0x48>
  4025dc:	4604      	mov	r4, r0
  4025de:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4025e0:	4b1d      	ldr	r3, [pc, #116]	; (402658 <xQueueGenericReset+0x80>)
  4025e2:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4025e4:	6822      	ldr	r2, [r4, #0]
  4025e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4025e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4025ea:	fb03 f301 	mul.w	r3, r3, r1
  4025ee:	18d0      	adds	r0, r2, r3
  4025f0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4025f2:	2000      	movs	r0, #0
  4025f4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4025f6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4025f8:	1a5b      	subs	r3, r3, r1
  4025fa:	4413      	add	r3, r2
  4025fc:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4025fe:	f04f 33ff 	mov.w	r3, #4294967295
  402602:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  402604:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  402606:	b9fd      	cbnz	r5, 402648 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402608:	6923      	ldr	r3, [r4, #16]
  40260a:	b12b      	cbz	r3, 402618 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40260c:	f104 0010 	add.w	r0, r4, #16
  402610:	4b12      	ldr	r3, [pc, #72]	; (40265c <xQueueGenericReset+0x84>)
  402612:	4798      	blx	r3
  402614:	2801      	cmp	r0, #1
  402616:	d00e      	beq.n	402636 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  402618:	4b11      	ldr	r3, [pc, #68]	; (402660 <xQueueGenericReset+0x88>)
  40261a:	4798      	blx	r3
}
  40261c:	2001      	movs	r0, #1
  40261e:	bd38      	pop	{r3, r4, r5, pc}
  402620:	f04f 0380 	mov.w	r3, #128	; 0x80
  402624:	b672      	cpsid	i
  402626:	f383 8811 	msr	BASEPRI, r3
  40262a:	f3bf 8f6f 	isb	sy
  40262e:	f3bf 8f4f 	dsb	sy
  402632:	b662      	cpsie	i
  402634:	e7fe      	b.n	402634 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  402636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40263a:	4b0a      	ldr	r3, [pc, #40]	; (402664 <xQueueGenericReset+0x8c>)
  40263c:	601a      	str	r2, [r3, #0]
  40263e:	f3bf 8f4f 	dsb	sy
  402642:	f3bf 8f6f 	isb	sy
  402646:	e7e7      	b.n	402618 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  402648:	f104 0010 	add.w	r0, r4, #16
  40264c:	4d06      	ldr	r5, [pc, #24]	; (402668 <xQueueGenericReset+0x90>)
  40264e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  402650:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402654:	47a8      	blx	r5
  402656:	e7df      	b.n	402618 <xQueueGenericReset+0x40>
  402658:	00402115 	.word	0x00402115
  40265c:	004034f1 	.word	0x004034f1
  402660:	00402161 	.word	0x00402161
  402664:	e000ed04 	.word	0xe000ed04
  402668:	00401fc9 	.word	0x00401fc9

0040266c <xQueueGenericCreate>:
{
  40266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40266e:	b950      	cbnz	r0, 402686 <xQueueGenericCreate+0x1a>
  402670:	f04f 0380 	mov.w	r3, #128	; 0x80
  402674:	b672      	cpsid	i
  402676:	f383 8811 	msr	BASEPRI, r3
  40267a:	f3bf 8f6f 	isb	sy
  40267e:	f3bf 8f4f 	dsb	sy
  402682:	b662      	cpsie	i
  402684:	e7fe      	b.n	402684 <xQueueGenericCreate+0x18>
  402686:	4606      	mov	r6, r0
  402688:	4617      	mov	r7, r2
  40268a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  40268c:	b189      	cbz	r1, 4026b2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40268e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402692:	3059      	adds	r0, #89	; 0x59
  402694:	4b12      	ldr	r3, [pc, #72]	; (4026e0 <xQueueGenericCreate+0x74>)
  402696:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402698:	4604      	mov	r4, r0
  40269a:	b9e8      	cbnz	r0, 4026d8 <xQueueGenericCreate+0x6c>
  40269c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026a0:	b672      	cpsid	i
  4026a2:	f383 8811 	msr	BASEPRI, r3
  4026a6:	f3bf 8f6f 	isb	sy
  4026aa:	f3bf 8f4f 	dsb	sy
  4026ae:	b662      	cpsie	i
  4026b0:	e7fe      	b.n	4026b0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4026b2:	2058      	movs	r0, #88	; 0x58
  4026b4:	4b0a      	ldr	r3, [pc, #40]	; (4026e0 <xQueueGenericCreate+0x74>)
  4026b6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4026b8:	4604      	mov	r4, r0
  4026ba:	2800      	cmp	r0, #0
  4026bc:	d0ee      	beq.n	40269c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4026be:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4026c0:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4026c2:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4026c4:	2101      	movs	r1, #1
  4026c6:	4620      	mov	r0, r4
  4026c8:	4b06      	ldr	r3, [pc, #24]	; (4026e4 <xQueueGenericCreate+0x78>)
  4026ca:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4026cc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4026d0:	2300      	movs	r3, #0
  4026d2:	6563      	str	r3, [r4, #84]	; 0x54
}
  4026d4:	4620      	mov	r0, r4
  4026d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4026d8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4026dc:	6003      	str	r3, [r0, #0]
  4026de:	e7ef      	b.n	4026c0 <xQueueGenericCreate+0x54>
  4026e0:	00402371 	.word	0x00402371
  4026e4:	004025d9 	.word	0x004025d9

004026e8 <xQueueGenericSend>:
{
  4026e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026ec:	b085      	sub	sp, #20
  4026ee:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4026f0:	b1b8      	cbz	r0, 402722 <xQueueGenericSend+0x3a>
  4026f2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4026f4:	b301      	cbz	r1, 402738 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4026f6:	2b02      	cmp	r3, #2
  4026f8:	d02c      	beq.n	402754 <xQueueGenericSend+0x6c>
  4026fa:	461d      	mov	r5, r3
  4026fc:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4026fe:	4b66      	ldr	r3, [pc, #408]	; (402898 <xQueueGenericSend+0x1b0>)
  402700:	4798      	blx	r3
  402702:	2800      	cmp	r0, #0
  402704:	d134      	bne.n	402770 <xQueueGenericSend+0x88>
  402706:	9b01      	ldr	r3, [sp, #4]
  402708:	2b00      	cmp	r3, #0
  40270a:	d038      	beq.n	40277e <xQueueGenericSend+0x96>
  40270c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402710:	b672      	cpsid	i
  402712:	f383 8811 	msr	BASEPRI, r3
  402716:	f3bf 8f6f 	isb	sy
  40271a:	f3bf 8f4f 	dsb	sy
  40271e:	b662      	cpsie	i
  402720:	e7fe      	b.n	402720 <xQueueGenericSend+0x38>
  402722:	f04f 0380 	mov.w	r3, #128	; 0x80
  402726:	b672      	cpsid	i
  402728:	f383 8811 	msr	BASEPRI, r3
  40272c:	f3bf 8f6f 	isb	sy
  402730:	f3bf 8f4f 	dsb	sy
  402734:	b662      	cpsie	i
  402736:	e7fe      	b.n	402736 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402738:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40273a:	2a00      	cmp	r2, #0
  40273c:	d0db      	beq.n	4026f6 <xQueueGenericSend+0xe>
  40273e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402742:	b672      	cpsid	i
  402744:	f383 8811 	msr	BASEPRI, r3
  402748:	f3bf 8f6f 	isb	sy
  40274c:	f3bf 8f4f 	dsb	sy
  402750:	b662      	cpsie	i
  402752:	e7fe      	b.n	402752 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402754:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  402756:	2a01      	cmp	r2, #1
  402758:	d0cf      	beq.n	4026fa <xQueueGenericSend+0x12>
  40275a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40275e:	b672      	cpsid	i
  402760:	f383 8811 	msr	BASEPRI, r3
  402764:	f3bf 8f6f 	isb	sy
  402768:	f3bf 8f4f 	dsb	sy
  40276c:	b662      	cpsie	i
  40276e:	e7fe      	b.n	40276e <xQueueGenericSend+0x86>
  402770:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  402772:	4e4a      	ldr	r6, [pc, #296]	; (40289c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  402774:	f8df a150 	ldr.w	sl, [pc, #336]	; 4028c8 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  402778:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4028a8 <xQueueGenericSend+0x1c0>
  40277c:	e042      	b.n	402804 <xQueueGenericSend+0x11c>
  40277e:	2700      	movs	r7, #0
  402780:	e7f7      	b.n	402772 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402782:	462a      	mov	r2, r5
  402784:	4641      	mov	r1, r8
  402786:	4620      	mov	r0, r4
  402788:	4b45      	ldr	r3, [pc, #276]	; (4028a0 <xQueueGenericSend+0x1b8>)
  40278a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  40278c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40278e:	b19b      	cbz	r3, 4027b8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402790:	4629      	mov	r1, r5
  402792:	4620      	mov	r0, r4
  402794:	4b43      	ldr	r3, [pc, #268]	; (4028a4 <xQueueGenericSend+0x1bc>)
  402796:	4798      	blx	r3
  402798:	2801      	cmp	r0, #1
  40279a:	d107      	bne.n	4027ac <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40279c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027a0:	4b41      	ldr	r3, [pc, #260]	; (4028a8 <xQueueGenericSend+0x1c0>)
  4027a2:	601a      	str	r2, [r3, #0]
  4027a4:	f3bf 8f4f 	dsb	sy
  4027a8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4027ac:	4b3f      	ldr	r3, [pc, #252]	; (4028ac <xQueueGenericSend+0x1c4>)
  4027ae:	4798      	blx	r3
				return pdPASS;
  4027b0:	2001      	movs	r0, #1
}
  4027b2:	b005      	add	sp, #20
  4027b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4027b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4027ba:	b173      	cbz	r3, 4027da <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4027bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4027c0:	4b3b      	ldr	r3, [pc, #236]	; (4028b0 <xQueueGenericSend+0x1c8>)
  4027c2:	4798      	blx	r3
  4027c4:	2801      	cmp	r0, #1
  4027c6:	d1f1      	bne.n	4027ac <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4027c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027cc:	4b36      	ldr	r3, [pc, #216]	; (4028a8 <xQueueGenericSend+0x1c0>)
  4027ce:	601a      	str	r2, [r3, #0]
  4027d0:	f3bf 8f4f 	dsb	sy
  4027d4:	f3bf 8f6f 	isb	sy
  4027d8:	e7e8      	b.n	4027ac <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4027da:	2800      	cmp	r0, #0
  4027dc:	d0e6      	beq.n	4027ac <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4027de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027e2:	4b31      	ldr	r3, [pc, #196]	; (4028a8 <xQueueGenericSend+0x1c0>)
  4027e4:	601a      	str	r2, [r3, #0]
  4027e6:	f3bf 8f4f 	dsb	sy
  4027ea:	f3bf 8f6f 	isb	sy
  4027ee:	e7dd      	b.n	4027ac <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4027f0:	4b2e      	ldr	r3, [pc, #184]	; (4028ac <xQueueGenericSend+0x1c4>)
  4027f2:	4798      	blx	r3
					return errQUEUE_FULL;
  4027f4:	2000      	movs	r0, #0
  4027f6:	e7dc      	b.n	4027b2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4027f8:	4620      	mov	r0, r4
  4027fa:	4b2e      	ldr	r3, [pc, #184]	; (4028b4 <xQueueGenericSend+0x1cc>)
  4027fc:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4027fe:	4b2e      	ldr	r3, [pc, #184]	; (4028b8 <xQueueGenericSend+0x1d0>)
  402800:	4798      	blx	r3
  402802:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402804:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402806:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40280a:	429a      	cmp	r2, r3
  40280c:	d3b9      	bcc.n	402782 <xQueueGenericSend+0x9a>
  40280e:	2d02      	cmp	r5, #2
  402810:	d0b7      	beq.n	402782 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402812:	9b01      	ldr	r3, [sp, #4]
  402814:	2b00      	cmp	r3, #0
  402816:	d0eb      	beq.n	4027f0 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  402818:	b90f      	cbnz	r7, 40281e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40281a:	a802      	add	r0, sp, #8
  40281c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40281e:	4b23      	ldr	r3, [pc, #140]	; (4028ac <xQueueGenericSend+0x1c4>)
  402820:	4798      	blx	r3
		vTaskSuspendAll();
  402822:	4b26      	ldr	r3, [pc, #152]	; (4028bc <xQueueGenericSend+0x1d4>)
  402824:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402826:	47b0      	blx	r6
  402828:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40282a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40282e:	d101      	bne.n	402834 <xQueueGenericSend+0x14c>
  402830:	2300      	movs	r3, #0
  402832:	6463      	str	r3, [r4, #68]	; 0x44
  402834:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402836:	f1b3 3fff 	cmp.w	r3, #4294967295
  40283a:	d101      	bne.n	402840 <xQueueGenericSend+0x158>
  40283c:	2300      	movs	r3, #0
  40283e:	64a3      	str	r3, [r4, #72]	; 0x48
  402840:	4b1a      	ldr	r3, [pc, #104]	; (4028ac <xQueueGenericSend+0x1c4>)
  402842:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402844:	a901      	add	r1, sp, #4
  402846:	a802      	add	r0, sp, #8
  402848:	4b1d      	ldr	r3, [pc, #116]	; (4028c0 <xQueueGenericSend+0x1d8>)
  40284a:	4798      	blx	r3
  40284c:	b9e0      	cbnz	r0, 402888 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40284e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  402850:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402854:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  402856:	4b15      	ldr	r3, [pc, #84]	; (4028ac <xQueueGenericSend+0x1c4>)
  402858:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40285a:	45bb      	cmp	fp, r7
  40285c:	d1cc      	bne.n	4027f8 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40285e:	9901      	ldr	r1, [sp, #4]
  402860:	f104 0010 	add.w	r0, r4, #16
  402864:	4b17      	ldr	r3, [pc, #92]	; (4028c4 <xQueueGenericSend+0x1dc>)
  402866:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402868:	4620      	mov	r0, r4
  40286a:	4b12      	ldr	r3, [pc, #72]	; (4028b4 <xQueueGenericSend+0x1cc>)
  40286c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40286e:	4b12      	ldr	r3, [pc, #72]	; (4028b8 <xQueueGenericSend+0x1d0>)
  402870:	4798      	blx	r3
  402872:	2800      	cmp	r0, #0
  402874:	d1c5      	bne.n	402802 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  402876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40287a:	f8c9 3000 	str.w	r3, [r9]
  40287e:	f3bf 8f4f 	dsb	sy
  402882:	f3bf 8f6f 	isb	sy
  402886:	e7bc      	b.n	402802 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  402888:	4620      	mov	r0, r4
  40288a:	4b0a      	ldr	r3, [pc, #40]	; (4028b4 <xQueueGenericSend+0x1cc>)
  40288c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40288e:	4b0a      	ldr	r3, [pc, #40]	; (4028b8 <xQueueGenericSend+0x1d0>)
  402890:	4798      	blx	r3
			return errQUEUE_FULL;
  402892:	2000      	movs	r0, #0
  402894:	e78d      	b.n	4027b2 <xQueueGenericSend+0xca>
  402896:	bf00      	nop
  402898:	00403659 	.word	0x00403659
  40289c:	00402115 	.word	0x00402115
  4028a0:	004023fd 	.word	0x004023fd
  4028a4:	00402485 	.word	0x00402485
  4028a8:	e000ed04 	.word	0xe000ed04
  4028ac:	00402161 	.word	0x00402161
  4028b0:	004034f1 	.word	0x004034f1
  4028b4:	00402535 	.word	0x00402535
  4028b8:	004030d5 	.word	0x004030d5
  4028bc:	00402f6d 	.word	0x00402f6d
  4028c0:	004035b9 	.word	0x004035b9
  4028c4:	004033ed 	.word	0x004033ed
  4028c8:	00403589 	.word	0x00403589

004028cc <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4028cc:	2800      	cmp	r0, #0
  4028ce:	d036      	beq.n	40293e <xQueueGenericSendFromISR+0x72>
{
  4028d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4028d4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4028d6:	2900      	cmp	r1, #0
  4028d8:	d03c      	beq.n	402954 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4028da:	2b02      	cmp	r3, #2
  4028dc:	d048      	beq.n	402970 <xQueueGenericSendFromISR+0xa4>
  4028de:	461e      	mov	r6, r3
  4028e0:	4615      	mov	r5, r2
  4028e2:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4028e4:	4b35      	ldr	r3, [pc, #212]	; (4029bc <xQueueGenericSendFromISR+0xf0>)
  4028e6:	4798      	blx	r3
	__asm volatile
  4028e8:	f3ef 8711 	mrs	r7, BASEPRI
  4028ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028f0:	b672      	cpsid	i
  4028f2:	f383 8811 	msr	BASEPRI, r3
  4028f6:	f3bf 8f6f 	isb	sy
  4028fa:	f3bf 8f4f 	dsb	sy
  4028fe:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402900:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402902:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402904:	429a      	cmp	r2, r3
  402906:	d301      	bcc.n	40290c <xQueueGenericSendFromISR+0x40>
  402908:	2e02      	cmp	r6, #2
  40290a:	d14f      	bne.n	4029ac <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40290c:	4632      	mov	r2, r6
  40290e:	4641      	mov	r1, r8
  402910:	4620      	mov	r0, r4
  402912:	4b2b      	ldr	r3, [pc, #172]	; (4029c0 <xQueueGenericSendFromISR+0xf4>)
  402914:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  402916:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402918:	f1b3 3fff 	cmp.w	r3, #4294967295
  40291c:	d141      	bne.n	4029a2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40291e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402920:	2b00      	cmp	r3, #0
  402922:	d033      	beq.n	40298c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402924:	4631      	mov	r1, r6
  402926:	4620      	mov	r0, r4
  402928:	4b26      	ldr	r3, [pc, #152]	; (4029c4 <xQueueGenericSendFromISR+0xf8>)
  40292a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40292c:	2d00      	cmp	r5, #0
  40292e:	d03f      	beq.n	4029b0 <xQueueGenericSendFromISR+0xe4>
  402930:	2801      	cmp	r0, #1
  402932:	d13d      	bne.n	4029b0 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402934:	6028      	str	r0, [r5, #0]
	__asm volatile
  402936:	f387 8811 	msr	BASEPRI, r7
}
  40293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40293e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402942:	b672      	cpsid	i
  402944:	f383 8811 	msr	BASEPRI, r3
  402948:	f3bf 8f6f 	isb	sy
  40294c:	f3bf 8f4f 	dsb	sy
  402950:	b662      	cpsie	i
  402952:	e7fe      	b.n	402952 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402954:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402956:	2800      	cmp	r0, #0
  402958:	d0bf      	beq.n	4028da <xQueueGenericSendFromISR+0xe>
  40295a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40295e:	b672      	cpsid	i
  402960:	f383 8811 	msr	BASEPRI, r3
  402964:	f3bf 8f6f 	isb	sy
  402968:	f3bf 8f4f 	dsb	sy
  40296c:	b662      	cpsie	i
  40296e:	e7fe      	b.n	40296e <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402970:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402972:	2801      	cmp	r0, #1
  402974:	d0b3      	beq.n	4028de <xQueueGenericSendFromISR+0x12>
  402976:	f04f 0380 	mov.w	r3, #128	; 0x80
  40297a:	b672      	cpsid	i
  40297c:	f383 8811 	msr	BASEPRI, r3
  402980:	f3bf 8f6f 	isb	sy
  402984:	f3bf 8f4f 	dsb	sy
  402988:	b662      	cpsie	i
  40298a:	e7fe      	b.n	40298a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40298c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40298e:	b18b      	cbz	r3, 4029b4 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402990:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402994:	4b0c      	ldr	r3, [pc, #48]	; (4029c8 <xQueueGenericSendFromISR+0xfc>)
  402996:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402998:	b175      	cbz	r5, 4029b8 <xQueueGenericSendFromISR+0xec>
  40299a:	b168      	cbz	r0, 4029b8 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40299c:	2001      	movs	r0, #1
  40299e:	6028      	str	r0, [r5, #0]
  4029a0:	e7c9      	b.n	402936 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  4029a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4029a4:	3301      	adds	r3, #1
  4029a6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4029a8:	2001      	movs	r0, #1
  4029aa:	e7c4      	b.n	402936 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  4029ac:	2000      	movs	r0, #0
  4029ae:	e7c2      	b.n	402936 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  4029b0:	2001      	movs	r0, #1
  4029b2:	e7c0      	b.n	402936 <xQueueGenericSendFromISR+0x6a>
  4029b4:	2001      	movs	r0, #1
  4029b6:	e7be      	b.n	402936 <xQueueGenericSendFromISR+0x6a>
  4029b8:	2001      	movs	r0, #1
  4029ba:	e7bc      	b.n	402936 <xQueueGenericSendFromISR+0x6a>
  4029bc:	0040230d 	.word	0x0040230d
  4029c0:	004023fd 	.word	0x004023fd
  4029c4:	00402485 	.word	0x00402485
  4029c8:	004034f1 	.word	0x004034f1

004029cc <xQueueGenericReceive>:
{
  4029cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029d0:	b084      	sub	sp, #16
  4029d2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4029d4:	b198      	cbz	r0, 4029fe <xQueueGenericReceive+0x32>
  4029d6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4029d8:	b1e1      	cbz	r1, 402a14 <xQueueGenericReceive+0x48>
  4029da:	4698      	mov	r8, r3
  4029dc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4029de:	4b61      	ldr	r3, [pc, #388]	; (402b64 <xQueueGenericReceive+0x198>)
  4029e0:	4798      	blx	r3
  4029e2:	bb28      	cbnz	r0, 402a30 <xQueueGenericReceive+0x64>
  4029e4:	9b01      	ldr	r3, [sp, #4]
  4029e6:	b353      	cbz	r3, 402a3e <xQueueGenericReceive+0x72>
  4029e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029ec:	b672      	cpsid	i
  4029ee:	f383 8811 	msr	BASEPRI, r3
  4029f2:	f3bf 8f6f 	isb	sy
  4029f6:	f3bf 8f4f 	dsb	sy
  4029fa:	b662      	cpsie	i
  4029fc:	e7fe      	b.n	4029fc <xQueueGenericReceive+0x30>
  4029fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a02:	b672      	cpsid	i
  402a04:	f383 8811 	msr	BASEPRI, r3
  402a08:	f3bf 8f6f 	isb	sy
  402a0c:	f3bf 8f4f 	dsb	sy
  402a10:	b662      	cpsie	i
  402a12:	e7fe      	b.n	402a12 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402a14:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402a16:	2a00      	cmp	r2, #0
  402a18:	d0df      	beq.n	4029da <xQueueGenericReceive+0xe>
  402a1a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a1e:	b672      	cpsid	i
  402a20:	f383 8811 	msr	BASEPRI, r3
  402a24:	f3bf 8f6f 	isb	sy
  402a28:	f3bf 8f4f 	dsb	sy
  402a2c:	b662      	cpsie	i
  402a2e:	e7fe      	b.n	402a2e <xQueueGenericReceive+0x62>
  402a30:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402a32:	4d4d      	ldr	r5, [pc, #308]	; (402b68 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402a34:	f8df a160 	ldr.w	sl, [pc, #352]	; 402b98 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402a38:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402b78 <xQueueGenericReceive+0x1ac>
  402a3c:	e04b      	b.n	402ad6 <xQueueGenericReceive+0x10a>
  402a3e:	2600      	movs	r6, #0
  402a40:	e7f7      	b.n	402a32 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402a42:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402a44:	4639      	mov	r1, r7
  402a46:	4620      	mov	r0, r4
  402a48:	4b48      	ldr	r3, [pc, #288]	; (402b6c <xQueueGenericReceive+0x1a0>)
  402a4a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402a4c:	f1b8 0f00 	cmp.w	r8, #0
  402a50:	d11d      	bne.n	402a8e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402a54:	3b01      	subs	r3, #1
  402a56:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402a58:	6823      	ldr	r3, [r4, #0]
  402a5a:	b913      	cbnz	r3, 402a62 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402a5c:	4b44      	ldr	r3, [pc, #272]	; (402b70 <xQueueGenericReceive+0x1a4>)
  402a5e:	4798      	blx	r3
  402a60:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402a62:	6923      	ldr	r3, [r4, #16]
  402a64:	b16b      	cbz	r3, 402a82 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402a66:	f104 0010 	add.w	r0, r4, #16
  402a6a:	4b42      	ldr	r3, [pc, #264]	; (402b74 <xQueueGenericReceive+0x1a8>)
  402a6c:	4798      	blx	r3
  402a6e:	2801      	cmp	r0, #1
  402a70:	d107      	bne.n	402a82 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a76:	4b40      	ldr	r3, [pc, #256]	; (402b78 <xQueueGenericReceive+0x1ac>)
  402a78:	601a      	str	r2, [r3, #0]
  402a7a:	f3bf 8f4f 	dsb	sy
  402a7e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402a82:	4b3e      	ldr	r3, [pc, #248]	; (402b7c <xQueueGenericReceive+0x1b0>)
  402a84:	4798      	blx	r3
				return pdPASS;
  402a86:	2001      	movs	r0, #1
}
  402a88:	b004      	add	sp, #16
  402a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402a8e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a92:	2b00      	cmp	r3, #0
  402a94:	d0f5      	beq.n	402a82 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402a96:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a9a:	4b36      	ldr	r3, [pc, #216]	; (402b74 <xQueueGenericReceive+0x1a8>)
  402a9c:	4798      	blx	r3
  402a9e:	2800      	cmp	r0, #0
  402aa0:	d0ef      	beq.n	402a82 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402aa6:	4b34      	ldr	r3, [pc, #208]	; (402b78 <xQueueGenericReceive+0x1ac>)
  402aa8:	601a      	str	r2, [r3, #0]
  402aaa:	f3bf 8f4f 	dsb	sy
  402aae:	f3bf 8f6f 	isb	sy
  402ab2:	e7e6      	b.n	402a82 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402ab4:	4b31      	ldr	r3, [pc, #196]	; (402b7c <xQueueGenericReceive+0x1b0>)
  402ab6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402ab8:	2000      	movs	r0, #0
  402aba:	e7e5      	b.n	402a88 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402abc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402abe:	6860      	ldr	r0, [r4, #4]
  402ac0:	4b2f      	ldr	r3, [pc, #188]	; (402b80 <xQueueGenericReceive+0x1b4>)
  402ac2:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402ac4:	4b2d      	ldr	r3, [pc, #180]	; (402b7c <xQueueGenericReceive+0x1b0>)
  402ac6:	4798      	blx	r3
  402ac8:	e030      	b.n	402b2c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402aca:	4620      	mov	r0, r4
  402acc:	4b2d      	ldr	r3, [pc, #180]	; (402b84 <xQueueGenericReceive+0x1b8>)
  402ace:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402ad0:	4b2d      	ldr	r3, [pc, #180]	; (402b88 <xQueueGenericReceive+0x1bc>)
  402ad2:	4798      	blx	r3
  402ad4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402ad6:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402ada:	2b00      	cmp	r3, #0
  402adc:	d1b1      	bne.n	402a42 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402ade:	9b01      	ldr	r3, [sp, #4]
  402ae0:	2b00      	cmp	r3, #0
  402ae2:	d0e7      	beq.n	402ab4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402ae4:	b90e      	cbnz	r6, 402aea <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402ae6:	a802      	add	r0, sp, #8
  402ae8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402aea:	4b24      	ldr	r3, [pc, #144]	; (402b7c <xQueueGenericReceive+0x1b0>)
  402aec:	4798      	blx	r3
		vTaskSuspendAll();
  402aee:	4b27      	ldr	r3, [pc, #156]	; (402b8c <xQueueGenericReceive+0x1c0>)
  402af0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402af2:	47a8      	blx	r5
  402af4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402af6:	f1b3 3fff 	cmp.w	r3, #4294967295
  402afa:	d101      	bne.n	402b00 <xQueueGenericReceive+0x134>
  402afc:	2300      	movs	r3, #0
  402afe:	6463      	str	r3, [r4, #68]	; 0x44
  402b00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b02:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b06:	d101      	bne.n	402b0c <xQueueGenericReceive+0x140>
  402b08:	2300      	movs	r3, #0
  402b0a:	64a3      	str	r3, [r4, #72]	; 0x48
  402b0c:	4b1b      	ldr	r3, [pc, #108]	; (402b7c <xQueueGenericReceive+0x1b0>)
  402b0e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402b10:	a901      	add	r1, sp, #4
  402b12:	a802      	add	r0, sp, #8
  402b14:	4b1e      	ldr	r3, [pc, #120]	; (402b90 <xQueueGenericReceive+0x1c4>)
  402b16:	4798      	blx	r3
  402b18:	b9e8      	cbnz	r0, 402b56 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402b1a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402b1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402b1e:	4b17      	ldr	r3, [pc, #92]	; (402b7c <xQueueGenericReceive+0x1b0>)
  402b20:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402b22:	2e00      	cmp	r6, #0
  402b24:	d1d1      	bne.n	402aca <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402b26:	6823      	ldr	r3, [r4, #0]
  402b28:	2b00      	cmp	r3, #0
  402b2a:	d0c7      	beq.n	402abc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402b2c:	9901      	ldr	r1, [sp, #4]
  402b2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402b32:	4b18      	ldr	r3, [pc, #96]	; (402b94 <xQueueGenericReceive+0x1c8>)
  402b34:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402b36:	4620      	mov	r0, r4
  402b38:	4b12      	ldr	r3, [pc, #72]	; (402b84 <xQueueGenericReceive+0x1b8>)
  402b3a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402b3c:	4b12      	ldr	r3, [pc, #72]	; (402b88 <xQueueGenericReceive+0x1bc>)
  402b3e:	4798      	blx	r3
  402b40:	2800      	cmp	r0, #0
  402b42:	d1c7      	bne.n	402ad4 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402b44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402b48:	f8c9 3000 	str.w	r3, [r9]
  402b4c:	f3bf 8f4f 	dsb	sy
  402b50:	f3bf 8f6f 	isb	sy
  402b54:	e7be      	b.n	402ad4 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402b56:	4620      	mov	r0, r4
  402b58:	4b0a      	ldr	r3, [pc, #40]	; (402b84 <xQueueGenericReceive+0x1b8>)
  402b5a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402b5c:	4b0a      	ldr	r3, [pc, #40]	; (402b88 <xQueueGenericReceive+0x1bc>)
  402b5e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402b60:	2000      	movs	r0, #0
  402b62:	e791      	b.n	402a88 <xQueueGenericReceive+0xbc>
  402b64:	00403659 	.word	0x00403659
  402b68:	00402115 	.word	0x00402115
  402b6c:	0040250d 	.word	0x0040250d
  402b70:	004037d9 	.word	0x004037d9
  402b74:	004034f1 	.word	0x004034f1
  402b78:	e000ed04 	.word	0xe000ed04
  402b7c:	00402161 	.word	0x00402161
  402b80:	00403679 	.word	0x00403679
  402b84:	00402535 	.word	0x00402535
  402b88:	004030d5 	.word	0x004030d5
  402b8c:	00402f6d 	.word	0x00402f6d
  402b90:	004035b9 	.word	0x004035b9
  402b94:	004033ed 	.word	0x004033ed
  402b98:	00403589 	.word	0x00403589

00402b9c <vQueueAddToRegistry>:
	{
  402b9c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402b9e:	4b0b      	ldr	r3, [pc, #44]	; (402bcc <vQueueAddToRegistry+0x30>)
  402ba0:	681b      	ldr	r3, [r3, #0]
  402ba2:	b153      	cbz	r3, 402bba <vQueueAddToRegistry+0x1e>
  402ba4:	2301      	movs	r3, #1
  402ba6:	4c09      	ldr	r4, [pc, #36]	; (402bcc <vQueueAddToRegistry+0x30>)
  402ba8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402bac:	b132      	cbz	r2, 402bbc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402bae:	3301      	adds	r3, #1
  402bb0:	2b08      	cmp	r3, #8
  402bb2:	d1f9      	bne.n	402ba8 <vQueueAddToRegistry+0xc>
	}
  402bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
  402bb8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402bba:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402bbc:	4a03      	ldr	r2, [pc, #12]	; (402bcc <vQueueAddToRegistry+0x30>)
  402bbe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402bc2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402bc6:	6058      	str	r0, [r3, #4]
				break;
  402bc8:	e7f4      	b.n	402bb4 <vQueueAddToRegistry+0x18>
  402bca:	bf00      	nop
  402bcc:	2040c820 	.word	0x2040c820

00402bd0 <vQueueWaitForMessageRestricted>:
	{
  402bd0:	b570      	push	{r4, r5, r6, lr}
  402bd2:	4604      	mov	r4, r0
  402bd4:	460d      	mov	r5, r1
  402bd6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402bd8:	4b0f      	ldr	r3, [pc, #60]	; (402c18 <vQueueWaitForMessageRestricted+0x48>)
  402bda:	4798      	blx	r3
  402bdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402bde:	f1b3 3fff 	cmp.w	r3, #4294967295
  402be2:	d00b      	beq.n	402bfc <vQueueWaitForMessageRestricted+0x2c>
  402be4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402be6:	f1b3 3fff 	cmp.w	r3, #4294967295
  402bea:	d00a      	beq.n	402c02 <vQueueWaitForMessageRestricted+0x32>
  402bec:	4b0b      	ldr	r3, [pc, #44]	; (402c1c <vQueueWaitForMessageRestricted+0x4c>)
  402bee:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402bf2:	b14b      	cbz	r3, 402c08 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402bf4:	4620      	mov	r0, r4
  402bf6:	4b0a      	ldr	r3, [pc, #40]	; (402c20 <vQueueWaitForMessageRestricted+0x50>)
  402bf8:	4798      	blx	r3
  402bfa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402bfc:	2300      	movs	r3, #0
  402bfe:	6463      	str	r3, [r4, #68]	; 0x44
  402c00:	e7f0      	b.n	402be4 <vQueueWaitForMessageRestricted+0x14>
  402c02:	2300      	movs	r3, #0
  402c04:	64a3      	str	r3, [r4, #72]	; 0x48
  402c06:	e7f1      	b.n	402bec <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402c08:	4632      	mov	r2, r6
  402c0a:	4629      	mov	r1, r5
  402c0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402c10:	4b04      	ldr	r3, [pc, #16]	; (402c24 <vQueueWaitForMessageRestricted+0x54>)
  402c12:	4798      	blx	r3
  402c14:	e7ee      	b.n	402bf4 <vQueueWaitForMessageRestricted+0x24>
  402c16:	bf00      	nop
  402c18:	00402115 	.word	0x00402115
  402c1c:	00402161 	.word	0x00402161
  402c20:	00402535 	.word	0x00402535
  402c24:	00403471 	.word	0x00403471

00402c28 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402c28:	4b08      	ldr	r3, [pc, #32]	; (402c4c <prvResetNextTaskUnblockTime+0x24>)
  402c2a:	681b      	ldr	r3, [r3, #0]
  402c2c:	681b      	ldr	r3, [r3, #0]
  402c2e:	b13b      	cbz	r3, 402c40 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402c30:	4b06      	ldr	r3, [pc, #24]	; (402c4c <prvResetNextTaskUnblockTime+0x24>)
  402c32:	681b      	ldr	r3, [r3, #0]
  402c34:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402c36:	68db      	ldr	r3, [r3, #12]
  402c38:	685a      	ldr	r2, [r3, #4]
  402c3a:	4b05      	ldr	r3, [pc, #20]	; (402c50 <prvResetNextTaskUnblockTime+0x28>)
  402c3c:	601a      	str	r2, [r3, #0]
  402c3e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402c40:	f04f 32ff 	mov.w	r2, #4294967295
  402c44:	4b02      	ldr	r3, [pc, #8]	; (402c50 <prvResetNextTaskUnblockTime+0x28>)
  402c46:	601a      	str	r2, [r3, #0]
  402c48:	4770      	bx	lr
  402c4a:	bf00      	nop
  402c4c:	2040c628 	.word	0x2040c628
  402c50:	2040c6d4 	.word	0x2040c6d4

00402c54 <prvAddCurrentTaskToDelayedList>:
{
  402c54:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402c56:	4b0f      	ldr	r3, [pc, #60]	; (402c94 <prvAddCurrentTaskToDelayedList+0x40>)
  402c58:	681b      	ldr	r3, [r3, #0]
  402c5a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402c5c:	4b0e      	ldr	r3, [pc, #56]	; (402c98 <prvAddCurrentTaskToDelayedList+0x44>)
  402c5e:	681b      	ldr	r3, [r3, #0]
  402c60:	4298      	cmp	r0, r3
  402c62:	d30e      	bcc.n	402c82 <prvAddCurrentTaskToDelayedList+0x2e>
  402c64:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402c66:	4b0d      	ldr	r3, [pc, #52]	; (402c9c <prvAddCurrentTaskToDelayedList+0x48>)
  402c68:	6818      	ldr	r0, [r3, #0]
  402c6a:	4b0a      	ldr	r3, [pc, #40]	; (402c94 <prvAddCurrentTaskToDelayedList+0x40>)
  402c6c:	6819      	ldr	r1, [r3, #0]
  402c6e:	3104      	adds	r1, #4
  402c70:	4b0b      	ldr	r3, [pc, #44]	; (402ca0 <prvAddCurrentTaskToDelayedList+0x4c>)
  402c72:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402c74:	4b0b      	ldr	r3, [pc, #44]	; (402ca4 <prvAddCurrentTaskToDelayedList+0x50>)
  402c76:	681b      	ldr	r3, [r3, #0]
  402c78:	429c      	cmp	r4, r3
  402c7a:	d201      	bcs.n	402c80 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402c7c:	4b09      	ldr	r3, [pc, #36]	; (402ca4 <prvAddCurrentTaskToDelayedList+0x50>)
  402c7e:	601c      	str	r4, [r3, #0]
  402c80:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402c82:	4b09      	ldr	r3, [pc, #36]	; (402ca8 <prvAddCurrentTaskToDelayedList+0x54>)
  402c84:	6818      	ldr	r0, [r3, #0]
  402c86:	4b03      	ldr	r3, [pc, #12]	; (402c94 <prvAddCurrentTaskToDelayedList+0x40>)
  402c88:	6819      	ldr	r1, [r3, #0]
  402c8a:	3104      	adds	r1, #4
  402c8c:	4b04      	ldr	r3, [pc, #16]	; (402ca0 <prvAddCurrentTaskToDelayedList+0x4c>)
  402c8e:	4798      	blx	r3
  402c90:	bd10      	pop	{r4, pc}
  402c92:	bf00      	nop
  402c94:	2040c624 	.word	0x2040c624
  402c98:	2040c71c 	.word	0x2040c71c
  402c9c:	2040c628 	.word	0x2040c628
  402ca0:	00401ffd 	.word	0x00401ffd
  402ca4:	2040c6d4 	.word	0x2040c6d4
  402ca8:	2040c62c 	.word	0x2040c62c

00402cac <xTaskGenericCreate>:
{
  402cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cb0:	b083      	sub	sp, #12
  402cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402cb4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402cb8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402cba:	b160      	cbz	r0, 402cd6 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402cbc:	2d04      	cmp	r5, #4
  402cbe:	d915      	bls.n	402cec <xTaskGenericCreate+0x40>
  402cc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cc4:	b672      	cpsid	i
  402cc6:	f383 8811 	msr	BASEPRI, r3
  402cca:	f3bf 8f6f 	isb	sy
  402cce:	f3bf 8f4f 	dsb	sy
  402cd2:	b662      	cpsie	i
  402cd4:	e7fe      	b.n	402cd4 <xTaskGenericCreate+0x28>
  402cd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cda:	b672      	cpsid	i
  402cdc:	f383 8811 	msr	BASEPRI, r3
  402ce0:	f3bf 8f6f 	isb	sy
  402ce4:	f3bf 8f4f 	dsb	sy
  402ce8:	b662      	cpsie	i
  402cea:	e7fe      	b.n	402cea <xTaskGenericCreate+0x3e>
  402cec:	9001      	str	r0, [sp, #4]
  402cee:	4698      	mov	r8, r3
  402cf0:	4691      	mov	r9, r2
  402cf2:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402cf4:	b936      	cbnz	r6, 402d04 <xTaskGenericCreate+0x58>
  402cf6:	0090      	lsls	r0, r2, #2
  402cf8:	4b62      	ldr	r3, [pc, #392]	; (402e84 <xTaskGenericCreate+0x1d8>)
  402cfa:	4798      	blx	r3
		if( pxStack != NULL )
  402cfc:	4606      	mov	r6, r0
  402cfe:	2800      	cmp	r0, #0
  402d00:	f000 809e 	beq.w	402e40 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402d04:	2058      	movs	r0, #88	; 0x58
  402d06:	4b5f      	ldr	r3, [pc, #380]	; (402e84 <xTaskGenericCreate+0x1d8>)
  402d08:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402d0a:	4604      	mov	r4, r0
  402d0c:	2800      	cmp	r0, #0
  402d0e:	f000 8094 	beq.w	402e3a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402d12:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402d14:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402d18:	21a5      	movs	r1, #165	; 0xa5
  402d1a:	4630      	mov	r0, r6
  402d1c:	4b5a      	ldr	r3, [pc, #360]	; (402e88 <xTaskGenericCreate+0x1dc>)
  402d1e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402d20:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402d24:	444e      	add	r6, r9
  402d26:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402d28:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402d2c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402d30:	783b      	ldrb	r3, [r7, #0]
  402d32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402d36:	783b      	ldrb	r3, [r7, #0]
  402d38:	2b00      	cmp	r3, #0
  402d3a:	f040 8084 	bne.w	402e46 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402d3e:	2700      	movs	r7, #0
  402d40:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402d44:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402d46:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402d48:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402d4a:	f104 0904 	add.w	r9, r4, #4
  402d4e:	4648      	mov	r0, r9
  402d50:	f8df b184 	ldr.w	fp, [pc, #388]	; 402ed8 <xTaskGenericCreate+0x22c>
  402d54:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402d56:	f104 0018 	add.w	r0, r4, #24
  402d5a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402d5c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402d5e:	f1c5 0305 	rsb	r3, r5, #5
  402d62:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402d64:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402d66:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402d68:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402d6c:	4642      	mov	r2, r8
  402d6e:	9901      	ldr	r1, [sp, #4]
  402d70:	4630      	mov	r0, r6
  402d72:	4b46      	ldr	r3, [pc, #280]	; (402e8c <xTaskGenericCreate+0x1e0>)
  402d74:	4798      	blx	r3
  402d76:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402d78:	f1ba 0f00 	cmp.w	sl, #0
  402d7c:	d001      	beq.n	402d82 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402d7e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402d82:	4b43      	ldr	r3, [pc, #268]	; (402e90 <xTaskGenericCreate+0x1e4>)
  402d84:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402d86:	4a43      	ldr	r2, [pc, #268]	; (402e94 <xTaskGenericCreate+0x1e8>)
  402d88:	6813      	ldr	r3, [r2, #0]
  402d8a:	3301      	adds	r3, #1
  402d8c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402d8e:	4b42      	ldr	r3, [pc, #264]	; (402e98 <xTaskGenericCreate+0x1ec>)
  402d90:	681b      	ldr	r3, [r3, #0]
  402d92:	2b00      	cmp	r3, #0
  402d94:	d166      	bne.n	402e64 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402d96:	4b40      	ldr	r3, [pc, #256]	; (402e98 <xTaskGenericCreate+0x1ec>)
  402d98:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402d9a:	6813      	ldr	r3, [r2, #0]
  402d9c:	2b01      	cmp	r3, #1
  402d9e:	d121      	bne.n	402de4 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402da0:	4f3e      	ldr	r7, [pc, #248]	; (402e9c <xTaskGenericCreate+0x1f0>)
  402da2:	4638      	mov	r0, r7
  402da4:	4e3e      	ldr	r6, [pc, #248]	; (402ea0 <xTaskGenericCreate+0x1f4>)
  402da6:	47b0      	blx	r6
  402da8:	f107 0014 	add.w	r0, r7, #20
  402dac:	47b0      	blx	r6
  402dae:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402db2:	47b0      	blx	r6
  402db4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402db8:	47b0      	blx	r6
  402dba:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402dbe:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402dc0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402edc <xTaskGenericCreate+0x230>
  402dc4:	4640      	mov	r0, r8
  402dc6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402dc8:	4f36      	ldr	r7, [pc, #216]	; (402ea4 <xTaskGenericCreate+0x1f8>)
  402dca:	4638      	mov	r0, r7
  402dcc:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402dce:	4836      	ldr	r0, [pc, #216]	; (402ea8 <xTaskGenericCreate+0x1fc>)
  402dd0:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402dd2:	4836      	ldr	r0, [pc, #216]	; (402eac <xTaskGenericCreate+0x200>)
  402dd4:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402dd6:	4836      	ldr	r0, [pc, #216]	; (402eb0 <xTaskGenericCreate+0x204>)
  402dd8:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402dda:	4b36      	ldr	r3, [pc, #216]	; (402eb4 <xTaskGenericCreate+0x208>)
  402ddc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402de0:	4b35      	ldr	r3, [pc, #212]	; (402eb8 <xTaskGenericCreate+0x20c>)
  402de2:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402de4:	4a35      	ldr	r2, [pc, #212]	; (402ebc <xTaskGenericCreate+0x210>)
  402de6:	6813      	ldr	r3, [r2, #0]
  402de8:	3301      	adds	r3, #1
  402dea:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402dec:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402dee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402df0:	4a33      	ldr	r2, [pc, #204]	; (402ec0 <xTaskGenericCreate+0x214>)
  402df2:	6811      	ldr	r1, [r2, #0]
  402df4:	2301      	movs	r3, #1
  402df6:	4083      	lsls	r3, r0
  402df8:	430b      	orrs	r3, r1
  402dfa:	6013      	str	r3, [r2, #0]
  402dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402e00:	4649      	mov	r1, r9
  402e02:	4b26      	ldr	r3, [pc, #152]	; (402e9c <xTaskGenericCreate+0x1f0>)
  402e04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402e08:	4b2e      	ldr	r3, [pc, #184]	; (402ec4 <xTaskGenericCreate+0x218>)
  402e0a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402e0c:	4b2e      	ldr	r3, [pc, #184]	; (402ec8 <xTaskGenericCreate+0x21c>)
  402e0e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402e10:	4b2e      	ldr	r3, [pc, #184]	; (402ecc <xTaskGenericCreate+0x220>)
  402e12:	681b      	ldr	r3, [r3, #0]
  402e14:	2b00      	cmp	r3, #0
  402e16:	d031      	beq.n	402e7c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402e18:	4b1f      	ldr	r3, [pc, #124]	; (402e98 <xTaskGenericCreate+0x1ec>)
  402e1a:	681b      	ldr	r3, [r3, #0]
  402e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e1e:	429d      	cmp	r5, r3
  402e20:	d92e      	bls.n	402e80 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402e26:	4b2a      	ldr	r3, [pc, #168]	; (402ed0 <xTaskGenericCreate+0x224>)
  402e28:	601a      	str	r2, [r3, #0]
  402e2a:	f3bf 8f4f 	dsb	sy
  402e2e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402e32:	2001      	movs	r0, #1
}
  402e34:	b003      	add	sp, #12
  402e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402e3a:	4630      	mov	r0, r6
  402e3c:	4b25      	ldr	r3, [pc, #148]	; (402ed4 <xTaskGenericCreate+0x228>)
  402e3e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402e40:	f04f 30ff 	mov.w	r0, #4294967295
  402e44:	e7f6      	b.n	402e34 <xTaskGenericCreate+0x188>
  402e46:	463b      	mov	r3, r7
  402e48:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402e4c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402e4e:	7859      	ldrb	r1, [r3, #1]
  402e50:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402e54:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402e58:	2900      	cmp	r1, #0
  402e5a:	f43f af70 	beq.w	402d3e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402e5e:	42bb      	cmp	r3, r7
  402e60:	d1f5      	bne.n	402e4e <xTaskGenericCreate+0x1a2>
  402e62:	e76c      	b.n	402d3e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402e64:	4b19      	ldr	r3, [pc, #100]	; (402ecc <xTaskGenericCreate+0x220>)
  402e66:	681b      	ldr	r3, [r3, #0]
  402e68:	2b00      	cmp	r3, #0
  402e6a:	d1bb      	bne.n	402de4 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402e6c:	4b0a      	ldr	r3, [pc, #40]	; (402e98 <xTaskGenericCreate+0x1ec>)
  402e6e:	681b      	ldr	r3, [r3, #0]
  402e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e72:	429d      	cmp	r5, r3
  402e74:	d3b6      	bcc.n	402de4 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402e76:	4b08      	ldr	r3, [pc, #32]	; (402e98 <xTaskGenericCreate+0x1ec>)
  402e78:	601c      	str	r4, [r3, #0]
  402e7a:	e7b3      	b.n	402de4 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402e7c:	2001      	movs	r0, #1
  402e7e:	e7d9      	b.n	402e34 <xTaskGenericCreate+0x188>
  402e80:	2001      	movs	r0, #1
	return xReturn;
  402e82:	e7d7      	b.n	402e34 <xTaskGenericCreate+0x188>
  402e84:	00402371 	.word	0x00402371
  402e88:	00405395 	.word	0x00405395
  402e8c:	004020c9 	.word	0x004020c9
  402e90:	00402115 	.word	0x00402115
  402e94:	2040c694 	.word	0x2040c694
  402e98:	2040c624 	.word	0x2040c624
  402e9c:	2040c630 	.word	0x2040c630
  402ea0:	00401fc9 	.word	0x00401fc9
  402ea4:	2040c6c0 	.word	0x2040c6c0
  402ea8:	2040c6dc 	.word	0x2040c6dc
  402eac:	2040c708 	.word	0x2040c708
  402eb0:	2040c6f4 	.word	0x2040c6f4
  402eb4:	2040c628 	.word	0x2040c628
  402eb8:	2040c62c 	.word	0x2040c62c
  402ebc:	2040c6a0 	.word	0x2040c6a0
  402ec0:	2040c6a8 	.word	0x2040c6a8
  402ec4:	00401fe5 	.word	0x00401fe5
  402ec8:	00402161 	.word	0x00402161
  402ecc:	2040c6f0 	.word	0x2040c6f0
  402ed0:	e000ed04 	.word	0xe000ed04
  402ed4:	004023e1 	.word	0x004023e1
  402ed8:	00401fdf 	.word	0x00401fdf
  402edc:	2040c6ac 	.word	0x2040c6ac

00402ee0 <vTaskStartScheduler>:
{
  402ee0:	b510      	push	{r4, lr}
  402ee2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402ee4:	2300      	movs	r3, #0
  402ee6:	9303      	str	r3, [sp, #12]
  402ee8:	9302      	str	r3, [sp, #8]
  402eea:	9301      	str	r3, [sp, #4]
  402eec:	9300      	str	r3, [sp, #0]
  402eee:	2282      	movs	r2, #130	; 0x82
  402ef0:	4916      	ldr	r1, [pc, #88]	; (402f4c <vTaskStartScheduler+0x6c>)
  402ef2:	4817      	ldr	r0, [pc, #92]	; (402f50 <vTaskStartScheduler+0x70>)
  402ef4:	4c17      	ldr	r4, [pc, #92]	; (402f54 <vTaskStartScheduler+0x74>)
  402ef6:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402ef8:	2801      	cmp	r0, #1
  402efa:	d00b      	beq.n	402f14 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402efc:	bb20      	cbnz	r0, 402f48 <vTaskStartScheduler+0x68>
  402efe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f02:	b672      	cpsid	i
  402f04:	f383 8811 	msr	BASEPRI, r3
  402f08:	f3bf 8f6f 	isb	sy
  402f0c:	f3bf 8f4f 	dsb	sy
  402f10:	b662      	cpsie	i
  402f12:	e7fe      	b.n	402f12 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402f14:	4b10      	ldr	r3, [pc, #64]	; (402f58 <vTaskStartScheduler+0x78>)
  402f16:	4798      	blx	r3
	if( xReturn == pdPASS )
  402f18:	2801      	cmp	r0, #1
  402f1a:	d1ef      	bne.n	402efc <vTaskStartScheduler+0x1c>
  402f1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f20:	b672      	cpsid	i
  402f22:	f383 8811 	msr	BASEPRI, r3
  402f26:	f3bf 8f6f 	isb	sy
  402f2a:	f3bf 8f4f 	dsb	sy
  402f2e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402f30:	f04f 32ff 	mov.w	r2, #4294967295
  402f34:	4b09      	ldr	r3, [pc, #36]	; (402f5c <vTaskStartScheduler+0x7c>)
  402f36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402f38:	2201      	movs	r2, #1
  402f3a:	4b09      	ldr	r3, [pc, #36]	; (402f60 <vTaskStartScheduler+0x80>)
  402f3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402f3e:	2200      	movs	r2, #0
  402f40:	4b08      	ldr	r3, [pc, #32]	; (402f64 <vTaskStartScheduler+0x84>)
  402f42:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402f44:	4b08      	ldr	r3, [pc, #32]	; (402f68 <vTaskStartScheduler+0x88>)
  402f46:	4798      	blx	r3
}
  402f48:	b004      	add	sp, #16
  402f4a:	bd10      	pop	{r4, pc}
  402f4c:	00407c78 	.word	0x00407c78
  402f50:	00403285 	.word	0x00403285
  402f54:	00402cad 	.word	0x00402cad
  402f58:	004038c5 	.word	0x004038c5
  402f5c:	2040c6d4 	.word	0x2040c6d4
  402f60:	2040c6f0 	.word	0x2040c6f0
  402f64:	2040c71c 	.word	0x2040c71c
  402f68:	00402249 	.word	0x00402249

00402f6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402f6c:	4a02      	ldr	r2, [pc, #8]	; (402f78 <vTaskSuspendAll+0xc>)
  402f6e:	6813      	ldr	r3, [r2, #0]
  402f70:	3301      	adds	r3, #1
  402f72:	6013      	str	r3, [r2, #0]
  402f74:	4770      	bx	lr
  402f76:	bf00      	nop
  402f78:	2040c69c 	.word	0x2040c69c

00402f7c <xTaskGetTickCount>:
		xTicks = xTickCount;
  402f7c:	4b01      	ldr	r3, [pc, #4]	; (402f84 <xTaskGetTickCount+0x8>)
  402f7e:	6818      	ldr	r0, [r3, #0]
}
  402f80:	4770      	bx	lr
  402f82:	bf00      	nop
  402f84:	2040c71c 	.word	0x2040c71c

00402f88 <xTaskIncrementTick>:
{
  402f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402f8c:	4b42      	ldr	r3, [pc, #264]	; (403098 <xTaskIncrementTick+0x110>)
  402f8e:	681b      	ldr	r3, [r3, #0]
  402f90:	2b00      	cmp	r3, #0
  402f92:	d178      	bne.n	403086 <xTaskIncrementTick+0xfe>
		++xTickCount;
  402f94:	4b41      	ldr	r3, [pc, #260]	; (40309c <xTaskIncrementTick+0x114>)
  402f96:	681a      	ldr	r2, [r3, #0]
  402f98:	3201      	adds	r2, #1
  402f9a:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402f9c:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402f9e:	b9d6      	cbnz	r6, 402fd6 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402fa0:	4b3f      	ldr	r3, [pc, #252]	; (4030a0 <xTaskIncrementTick+0x118>)
  402fa2:	681b      	ldr	r3, [r3, #0]
  402fa4:	681b      	ldr	r3, [r3, #0]
  402fa6:	b153      	cbz	r3, 402fbe <xTaskIncrementTick+0x36>
  402fa8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fac:	b672      	cpsid	i
  402fae:	f383 8811 	msr	BASEPRI, r3
  402fb2:	f3bf 8f6f 	isb	sy
  402fb6:	f3bf 8f4f 	dsb	sy
  402fba:	b662      	cpsie	i
  402fbc:	e7fe      	b.n	402fbc <xTaskIncrementTick+0x34>
  402fbe:	4a38      	ldr	r2, [pc, #224]	; (4030a0 <xTaskIncrementTick+0x118>)
  402fc0:	6811      	ldr	r1, [r2, #0]
  402fc2:	4b38      	ldr	r3, [pc, #224]	; (4030a4 <xTaskIncrementTick+0x11c>)
  402fc4:	6818      	ldr	r0, [r3, #0]
  402fc6:	6010      	str	r0, [r2, #0]
  402fc8:	6019      	str	r1, [r3, #0]
  402fca:	4a37      	ldr	r2, [pc, #220]	; (4030a8 <xTaskIncrementTick+0x120>)
  402fcc:	6813      	ldr	r3, [r2, #0]
  402fce:	3301      	adds	r3, #1
  402fd0:	6013      	str	r3, [r2, #0]
  402fd2:	4b36      	ldr	r3, [pc, #216]	; (4030ac <xTaskIncrementTick+0x124>)
  402fd4:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402fd6:	4b36      	ldr	r3, [pc, #216]	; (4030b0 <xTaskIncrementTick+0x128>)
  402fd8:	681b      	ldr	r3, [r3, #0]
  402fda:	429e      	cmp	r6, r3
  402fdc:	d218      	bcs.n	403010 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402fde:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402fe0:	4b34      	ldr	r3, [pc, #208]	; (4030b4 <xTaskIncrementTick+0x12c>)
  402fe2:	681b      	ldr	r3, [r3, #0]
  402fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fe6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402fea:	4a33      	ldr	r2, [pc, #204]	; (4030b8 <xTaskIncrementTick+0x130>)
  402fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402ff0:	2b02      	cmp	r3, #2
  402ff2:	bf28      	it	cs
  402ff4:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402ff6:	4b31      	ldr	r3, [pc, #196]	; (4030bc <xTaskIncrementTick+0x134>)
  402ff8:	681b      	ldr	r3, [r3, #0]
  402ffa:	b90b      	cbnz	r3, 403000 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402ffc:	4b30      	ldr	r3, [pc, #192]	; (4030c0 <xTaskIncrementTick+0x138>)
  402ffe:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  403000:	4b30      	ldr	r3, [pc, #192]	; (4030c4 <xTaskIncrementTick+0x13c>)
  403002:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  403004:	2b00      	cmp	r3, #0
}
  403006:	bf0c      	ite	eq
  403008:	4620      	moveq	r0, r4
  40300a:	2001      	movne	r0, #1
  40300c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403010:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403012:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4030a0 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403016:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4030d0 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40301a:	4f2b      	ldr	r7, [pc, #172]	; (4030c8 <xTaskIncrementTick+0x140>)
  40301c:	e01f      	b.n	40305e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40301e:	f04f 32ff 	mov.w	r2, #4294967295
  403022:	4b23      	ldr	r3, [pc, #140]	; (4030b0 <xTaskIncrementTick+0x128>)
  403024:	601a      	str	r2, [r3, #0]
						break;
  403026:	e7db      	b.n	402fe0 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  403028:	4a21      	ldr	r2, [pc, #132]	; (4030b0 <xTaskIncrementTick+0x128>)
  40302a:	6013      	str	r3, [r2, #0]
							break;
  40302c:	e7d8      	b.n	402fe0 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40302e:	f105 0018 	add.w	r0, r5, #24
  403032:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  403034:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  403036:	683a      	ldr	r2, [r7, #0]
  403038:	2301      	movs	r3, #1
  40303a:	4083      	lsls	r3, r0
  40303c:	4313      	orrs	r3, r2
  40303e:	603b      	str	r3, [r7, #0]
  403040:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403044:	4651      	mov	r1, sl
  403046:	4b1c      	ldr	r3, [pc, #112]	; (4030b8 <xTaskIncrementTick+0x130>)
  403048:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40304c:	4b1f      	ldr	r3, [pc, #124]	; (4030cc <xTaskIncrementTick+0x144>)
  40304e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403050:	4b18      	ldr	r3, [pc, #96]	; (4030b4 <xTaskIncrementTick+0x12c>)
  403052:	681b      	ldr	r3, [r3, #0]
  403054:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  403056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  403058:	429a      	cmp	r2, r3
  40305a:	bf28      	it	cs
  40305c:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40305e:	f8d9 3000 	ldr.w	r3, [r9]
  403062:	681b      	ldr	r3, [r3, #0]
  403064:	2b00      	cmp	r3, #0
  403066:	d0da      	beq.n	40301e <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403068:	f8d9 3000 	ldr.w	r3, [r9]
  40306c:	68db      	ldr	r3, [r3, #12]
  40306e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  403070:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  403072:	429e      	cmp	r6, r3
  403074:	d3d8      	bcc.n	403028 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403076:	f105 0a04 	add.w	sl, r5, #4
  40307a:	4650      	mov	r0, sl
  40307c:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40307e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  403080:	2b00      	cmp	r3, #0
  403082:	d1d4      	bne.n	40302e <xTaskIncrementTick+0xa6>
  403084:	e7d6      	b.n	403034 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  403086:	4a0d      	ldr	r2, [pc, #52]	; (4030bc <xTaskIncrementTick+0x134>)
  403088:	6813      	ldr	r3, [r2, #0]
  40308a:	3301      	adds	r3, #1
  40308c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40308e:	4b0c      	ldr	r3, [pc, #48]	; (4030c0 <xTaskIncrementTick+0x138>)
  403090:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  403092:	2400      	movs	r4, #0
  403094:	e7b4      	b.n	403000 <xTaskIncrementTick+0x78>
  403096:	bf00      	nop
  403098:	2040c69c 	.word	0x2040c69c
  40309c:	2040c71c 	.word	0x2040c71c
  4030a0:	2040c628 	.word	0x2040c628
  4030a4:	2040c62c 	.word	0x2040c62c
  4030a8:	2040c6d8 	.word	0x2040c6d8
  4030ac:	00402c29 	.word	0x00402c29
  4030b0:	2040c6d4 	.word	0x2040c6d4
  4030b4:	2040c624 	.word	0x2040c624
  4030b8:	2040c630 	.word	0x2040c630
  4030bc:	2040c698 	.word	0x2040c698
  4030c0:	00403e1d 	.word	0x00403e1d
  4030c4:	2040c720 	.word	0x2040c720
  4030c8:	2040c6a8 	.word	0x2040c6a8
  4030cc:	00401fe5 	.word	0x00401fe5
  4030d0:	00402031 	.word	0x00402031

004030d4 <xTaskResumeAll>:
{
  4030d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4030d8:	4b38      	ldr	r3, [pc, #224]	; (4031bc <xTaskResumeAll+0xe8>)
  4030da:	681b      	ldr	r3, [r3, #0]
  4030dc:	b953      	cbnz	r3, 4030f4 <xTaskResumeAll+0x20>
  4030de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030e2:	b672      	cpsid	i
  4030e4:	f383 8811 	msr	BASEPRI, r3
  4030e8:	f3bf 8f6f 	isb	sy
  4030ec:	f3bf 8f4f 	dsb	sy
  4030f0:	b662      	cpsie	i
  4030f2:	e7fe      	b.n	4030f2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4030f4:	4b32      	ldr	r3, [pc, #200]	; (4031c0 <xTaskResumeAll+0xec>)
  4030f6:	4798      	blx	r3
		--uxSchedulerSuspended;
  4030f8:	4b30      	ldr	r3, [pc, #192]	; (4031bc <xTaskResumeAll+0xe8>)
  4030fa:	681a      	ldr	r2, [r3, #0]
  4030fc:	3a01      	subs	r2, #1
  4030fe:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403100:	681b      	ldr	r3, [r3, #0]
  403102:	2b00      	cmp	r3, #0
  403104:	d155      	bne.n	4031b2 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  403106:	4b2f      	ldr	r3, [pc, #188]	; (4031c4 <xTaskResumeAll+0xf0>)
  403108:	681b      	ldr	r3, [r3, #0]
  40310a:	2b00      	cmp	r3, #0
  40310c:	d132      	bne.n	403174 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40310e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403110:	4b2d      	ldr	r3, [pc, #180]	; (4031c8 <xTaskResumeAll+0xf4>)
  403112:	4798      	blx	r3
}
  403114:	4620      	mov	r0, r4
  403116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40311a:	68fb      	ldr	r3, [r7, #12]
  40311c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40311e:	f104 0018 	add.w	r0, r4, #24
  403122:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403124:	f104 0804 	add.w	r8, r4, #4
  403128:	4640      	mov	r0, r8
  40312a:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40312c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40312e:	682a      	ldr	r2, [r5, #0]
  403130:	2301      	movs	r3, #1
  403132:	4083      	lsls	r3, r0
  403134:	4313      	orrs	r3, r2
  403136:	602b      	str	r3, [r5, #0]
  403138:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40313c:	4641      	mov	r1, r8
  40313e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  403142:	4b22      	ldr	r3, [pc, #136]	; (4031cc <xTaskResumeAll+0xf8>)
  403144:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403146:	4b22      	ldr	r3, [pc, #136]	; (4031d0 <xTaskResumeAll+0xfc>)
  403148:	681b      	ldr	r3, [r3, #0]
  40314a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40314e:	429a      	cmp	r2, r3
  403150:	d20c      	bcs.n	40316c <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403152:	683b      	ldr	r3, [r7, #0]
  403154:	2b00      	cmp	r3, #0
  403156:	d1e0      	bne.n	40311a <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  403158:	4b1e      	ldr	r3, [pc, #120]	; (4031d4 <xTaskResumeAll+0x100>)
  40315a:	681b      	ldr	r3, [r3, #0]
  40315c:	b1db      	cbz	r3, 403196 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40315e:	4b1d      	ldr	r3, [pc, #116]	; (4031d4 <xTaskResumeAll+0x100>)
  403160:	681b      	ldr	r3, [r3, #0]
  403162:	b1c3      	cbz	r3, 403196 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403164:	4e1c      	ldr	r6, [pc, #112]	; (4031d8 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  403166:	4d1d      	ldr	r5, [pc, #116]	; (4031dc <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  403168:	4c1a      	ldr	r4, [pc, #104]	; (4031d4 <xTaskResumeAll+0x100>)
  40316a:	e00e      	b.n	40318a <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  40316c:	2201      	movs	r2, #1
  40316e:	4b1b      	ldr	r3, [pc, #108]	; (4031dc <xTaskResumeAll+0x108>)
  403170:	601a      	str	r2, [r3, #0]
  403172:	e7ee      	b.n	403152 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403174:	4f1a      	ldr	r7, [pc, #104]	; (4031e0 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403176:	4e1b      	ldr	r6, [pc, #108]	; (4031e4 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  403178:	4d1b      	ldr	r5, [pc, #108]	; (4031e8 <xTaskResumeAll+0x114>)
  40317a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4031f0 <xTaskResumeAll+0x11c>
  40317e:	e7e8      	b.n	403152 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  403180:	6823      	ldr	r3, [r4, #0]
  403182:	3b01      	subs	r3, #1
  403184:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  403186:	6823      	ldr	r3, [r4, #0]
  403188:	b12b      	cbz	r3, 403196 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40318a:	47b0      	blx	r6
  40318c:	2800      	cmp	r0, #0
  40318e:	d0f7      	beq.n	403180 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  403190:	2301      	movs	r3, #1
  403192:	602b      	str	r3, [r5, #0]
  403194:	e7f4      	b.n	403180 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  403196:	4b11      	ldr	r3, [pc, #68]	; (4031dc <xTaskResumeAll+0x108>)
  403198:	681b      	ldr	r3, [r3, #0]
  40319a:	2b01      	cmp	r3, #1
  40319c:	d10b      	bne.n	4031b6 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4031a2:	4b12      	ldr	r3, [pc, #72]	; (4031ec <xTaskResumeAll+0x118>)
  4031a4:	601a      	str	r2, [r3, #0]
  4031a6:	f3bf 8f4f 	dsb	sy
  4031aa:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4031ae:	2401      	movs	r4, #1
  4031b0:	e7ae      	b.n	403110 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4031b2:	2400      	movs	r4, #0
  4031b4:	e7ac      	b.n	403110 <xTaskResumeAll+0x3c>
  4031b6:	2400      	movs	r4, #0
  4031b8:	e7aa      	b.n	403110 <xTaskResumeAll+0x3c>
  4031ba:	bf00      	nop
  4031bc:	2040c69c 	.word	0x2040c69c
  4031c0:	00402115 	.word	0x00402115
  4031c4:	2040c694 	.word	0x2040c694
  4031c8:	00402161 	.word	0x00402161
  4031cc:	00401fe5 	.word	0x00401fe5
  4031d0:	2040c624 	.word	0x2040c624
  4031d4:	2040c698 	.word	0x2040c698
  4031d8:	00402f89 	.word	0x00402f89
  4031dc:	2040c720 	.word	0x2040c720
  4031e0:	2040c6dc 	.word	0x2040c6dc
  4031e4:	00402031 	.word	0x00402031
  4031e8:	2040c6a8 	.word	0x2040c6a8
  4031ec:	e000ed04 	.word	0xe000ed04
  4031f0:	2040c630 	.word	0x2040c630

004031f4 <vTaskDelay>:
	{
  4031f4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4031f6:	2800      	cmp	r0, #0
  4031f8:	d029      	beq.n	40324e <vTaskDelay+0x5a>
  4031fa:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4031fc:	4b18      	ldr	r3, [pc, #96]	; (403260 <vTaskDelay+0x6c>)
  4031fe:	681b      	ldr	r3, [r3, #0]
  403200:	b153      	cbz	r3, 403218 <vTaskDelay+0x24>
  403202:	f04f 0380 	mov.w	r3, #128	; 0x80
  403206:	b672      	cpsid	i
  403208:	f383 8811 	msr	BASEPRI, r3
  40320c:	f3bf 8f6f 	isb	sy
  403210:	f3bf 8f4f 	dsb	sy
  403214:	b662      	cpsie	i
  403216:	e7fe      	b.n	403216 <vTaskDelay+0x22>
			vTaskSuspendAll();
  403218:	4b12      	ldr	r3, [pc, #72]	; (403264 <vTaskDelay+0x70>)
  40321a:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  40321c:	4b12      	ldr	r3, [pc, #72]	; (403268 <vTaskDelay+0x74>)
  40321e:	681b      	ldr	r3, [r3, #0]
  403220:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403222:	4b12      	ldr	r3, [pc, #72]	; (40326c <vTaskDelay+0x78>)
  403224:	6818      	ldr	r0, [r3, #0]
  403226:	3004      	adds	r0, #4
  403228:	4b11      	ldr	r3, [pc, #68]	; (403270 <vTaskDelay+0x7c>)
  40322a:	4798      	blx	r3
  40322c:	b948      	cbnz	r0, 403242 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40322e:	4b0f      	ldr	r3, [pc, #60]	; (40326c <vTaskDelay+0x78>)
  403230:	681a      	ldr	r2, [r3, #0]
  403232:	4910      	ldr	r1, [pc, #64]	; (403274 <vTaskDelay+0x80>)
  403234:	680b      	ldr	r3, [r1, #0]
  403236:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403238:	2201      	movs	r2, #1
  40323a:	4082      	lsls	r2, r0
  40323c:	ea23 0302 	bic.w	r3, r3, r2
  403240:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  403242:	4620      	mov	r0, r4
  403244:	4b0c      	ldr	r3, [pc, #48]	; (403278 <vTaskDelay+0x84>)
  403246:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  403248:	4b0c      	ldr	r3, [pc, #48]	; (40327c <vTaskDelay+0x88>)
  40324a:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  40324c:	b938      	cbnz	r0, 40325e <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  40324e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403252:	4b0b      	ldr	r3, [pc, #44]	; (403280 <vTaskDelay+0x8c>)
  403254:	601a      	str	r2, [r3, #0]
  403256:	f3bf 8f4f 	dsb	sy
  40325a:	f3bf 8f6f 	isb	sy
  40325e:	bd10      	pop	{r4, pc}
  403260:	2040c69c 	.word	0x2040c69c
  403264:	00402f6d 	.word	0x00402f6d
  403268:	2040c71c 	.word	0x2040c71c
  40326c:	2040c624 	.word	0x2040c624
  403270:	00402031 	.word	0x00402031
  403274:	2040c6a8 	.word	0x2040c6a8
  403278:	00402c55 	.word	0x00402c55
  40327c:	004030d5 	.word	0x004030d5
  403280:	e000ed04 	.word	0xe000ed04

00403284 <prvIdleTask>:
{
  403284:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  403286:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403310 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40328a:	4e19      	ldr	r6, [pc, #100]	; (4032f0 <prvIdleTask+0x6c>)
				taskYIELD();
  40328c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403314 <prvIdleTask+0x90>
  403290:	e02a      	b.n	4032e8 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  403292:	4b18      	ldr	r3, [pc, #96]	; (4032f4 <prvIdleTask+0x70>)
  403294:	681b      	ldr	r3, [r3, #0]
  403296:	2b01      	cmp	r3, #1
  403298:	d81e      	bhi.n	4032d8 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40329a:	682b      	ldr	r3, [r5, #0]
  40329c:	2b00      	cmp	r3, #0
  40329e:	d0f8      	beq.n	403292 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4032a0:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4032a2:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4032a4:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4032a6:	2c00      	cmp	r4, #0
  4032a8:	d0f7      	beq.n	40329a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4032aa:	4b13      	ldr	r3, [pc, #76]	; (4032f8 <prvIdleTask+0x74>)
  4032ac:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4032ae:	68f3      	ldr	r3, [r6, #12]
  4032b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4032b2:	1d20      	adds	r0, r4, #4
  4032b4:	4b11      	ldr	r3, [pc, #68]	; (4032fc <prvIdleTask+0x78>)
  4032b6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4032b8:	4a11      	ldr	r2, [pc, #68]	; (403300 <prvIdleTask+0x7c>)
  4032ba:	6813      	ldr	r3, [r2, #0]
  4032bc:	3b01      	subs	r3, #1
  4032be:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4032c0:	682b      	ldr	r3, [r5, #0]
  4032c2:	3b01      	subs	r3, #1
  4032c4:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4032c6:	4b0f      	ldr	r3, [pc, #60]	; (403304 <prvIdleTask+0x80>)
  4032c8:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4032ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4032cc:	f8df a048 	ldr.w	sl, [pc, #72]	; 403318 <prvIdleTask+0x94>
  4032d0:	47d0      	blx	sl
		vPortFree( pxTCB );
  4032d2:	4620      	mov	r0, r4
  4032d4:	47d0      	blx	sl
  4032d6:	e7e0      	b.n	40329a <prvIdleTask+0x16>
				taskYIELD();
  4032d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4032dc:	f8c9 3000 	str.w	r3, [r9]
  4032e0:	f3bf 8f4f 	dsb	sy
  4032e4:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4032e8:	4d07      	ldr	r5, [pc, #28]	; (403308 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4032ea:	4f08      	ldr	r7, [pc, #32]	; (40330c <prvIdleTask+0x88>)
  4032ec:	e7d5      	b.n	40329a <prvIdleTask+0x16>
  4032ee:	bf00      	nop
  4032f0:	2040c708 	.word	0x2040c708
  4032f4:	2040c630 	.word	0x2040c630
  4032f8:	00402115 	.word	0x00402115
  4032fc:	00402031 	.word	0x00402031
  403300:	2040c694 	.word	0x2040c694
  403304:	00402161 	.word	0x00402161
  403308:	2040c6a4 	.word	0x2040c6a4
  40330c:	004030d5 	.word	0x004030d5
  403310:	00402f6d 	.word	0x00402f6d
  403314:	e000ed04 	.word	0xe000ed04
  403318:	004023e1 	.word	0x004023e1

0040331c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40331c:	4b2d      	ldr	r3, [pc, #180]	; (4033d4 <vTaskSwitchContext+0xb8>)
  40331e:	681b      	ldr	r3, [r3, #0]
  403320:	2b00      	cmp	r3, #0
  403322:	d12c      	bne.n	40337e <vTaskSwitchContext+0x62>
{
  403324:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  403326:	2200      	movs	r2, #0
  403328:	4b2b      	ldr	r3, [pc, #172]	; (4033d8 <vTaskSwitchContext+0xbc>)
  40332a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  40332c:	4b2b      	ldr	r3, [pc, #172]	; (4033dc <vTaskSwitchContext+0xc0>)
  40332e:	681b      	ldr	r3, [r3, #0]
  403330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403332:	681a      	ldr	r2, [r3, #0]
  403334:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403338:	d103      	bne.n	403342 <vTaskSwitchContext+0x26>
  40333a:	685a      	ldr	r2, [r3, #4]
  40333c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403340:	d021      	beq.n	403386 <vTaskSwitchContext+0x6a>
  403342:	4b26      	ldr	r3, [pc, #152]	; (4033dc <vTaskSwitchContext+0xc0>)
  403344:	6818      	ldr	r0, [r3, #0]
  403346:	6819      	ldr	r1, [r3, #0]
  403348:	3134      	adds	r1, #52	; 0x34
  40334a:	4b25      	ldr	r3, [pc, #148]	; (4033e0 <vTaskSwitchContext+0xc4>)
  40334c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40334e:	4b25      	ldr	r3, [pc, #148]	; (4033e4 <vTaskSwitchContext+0xc8>)
  403350:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  403352:	fab3 f383 	clz	r3, r3
  403356:	b2db      	uxtb	r3, r3
  403358:	f1c3 031f 	rsb	r3, r3, #31
  40335c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403360:	4a21      	ldr	r2, [pc, #132]	; (4033e8 <vTaskSwitchContext+0xcc>)
  403362:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403366:	b9ba      	cbnz	r2, 403398 <vTaskSwitchContext+0x7c>
	__asm volatile
  403368:	f04f 0380 	mov.w	r3, #128	; 0x80
  40336c:	b672      	cpsid	i
  40336e:	f383 8811 	msr	BASEPRI, r3
  403372:	f3bf 8f6f 	isb	sy
  403376:	f3bf 8f4f 	dsb	sy
  40337a:	b662      	cpsie	i
  40337c:	e7fe      	b.n	40337c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40337e:	2201      	movs	r2, #1
  403380:	4b15      	ldr	r3, [pc, #84]	; (4033d8 <vTaskSwitchContext+0xbc>)
  403382:	601a      	str	r2, [r3, #0]
  403384:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  403386:	689a      	ldr	r2, [r3, #8]
  403388:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40338c:	d1d9      	bne.n	403342 <vTaskSwitchContext+0x26>
  40338e:	68db      	ldr	r3, [r3, #12]
  403390:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403394:	d1d5      	bne.n	403342 <vTaskSwitchContext+0x26>
  403396:	e7da      	b.n	40334e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403398:	4a13      	ldr	r2, [pc, #76]	; (4033e8 <vTaskSwitchContext+0xcc>)
  40339a:	0099      	lsls	r1, r3, #2
  40339c:	18c8      	adds	r0, r1, r3
  40339e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4033a2:	6844      	ldr	r4, [r0, #4]
  4033a4:	6864      	ldr	r4, [r4, #4]
  4033a6:	6044      	str	r4, [r0, #4]
  4033a8:	4419      	add	r1, r3
  4033aa:	4602      	mov	r2, r0
  4033ac:	3208      	adds	r2, #8
  4033ae:	4294      	cmp	r4, r2
  4033b0:	d009      	beq.n	4033c6 <vTaskSwitchContext+0xaa>
  4033b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4033b6:	4a0c      	ldr	r2, [pc, #48]	; (4033e8 <vTaskSwitchContext+0xcc>)
  4033b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4033bc:	685b      	ldr	r3, [r3, #4]
  4033be:	68da      	ldr	r2, [r3, #12]
  4033c0:	4b06      	ldr	r3, [pc, #24]	; (4033dc <vTaskSwitchContext+0xc0>)
  4033c2:	601a      	str	r2, [r3, #0]
  4033c4:	bd10      	pop	{r4, pc}
  4033c6:	6860      	ldr	r0, [r4, #4]
  4033c8:	4a07      	ldr	r2, [pc, #28]	; (4033e8 <vTaskSwitchContext+0xcc>)
  4033ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4033ce:	6050      	str	r0, [r2, #4]
  4033d0:	e7ef      	b.n	4033b2 <vTaskSwitchContext+0x96>
  4033d2:	bf00      	nop
  4033d4:	2040c69c 	.word	0x2040c69c
  4033d8:	2040c720 	.word	0x2040c720
  4033dc:	2040c624 	.word	0x2040c624
  4033e0:	00403e05 	.word	0x00403e05
  4033e4:	2040c6a8 	.word	0x2040c6a8
  4033e8:	2040c630 	.word	0x2040c630

004033ec <vTaskPlaceOnEventList>:
{
  4033ec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4033ee:	b1e0      	cbz	r0, 40342a <vTaskPlaceOnEventList+0x3e>
  4033f0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4033f2:	4d17      	ldr	r5, [pc, #92]	; (403450 <vTaskPlaceOnEventList+0x64>)
  4033f4:	6829      	ldr	r1, [r5, #0]
  4033f6:	3118      	adds	r1, #24
  4033f8:	4b16      	ldr	r3, [pc, #88]	; (403454 <vTaskPlaceOnEventList+0x68>)
  4033fa:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4033fc:	6828      	ldr	r0, [r5, #0]
  4033fe:	3004      	adds	r0, #4
  403400:	4b15      	ldr	r3, [pc, #84]	; (403458 <vTaskPlaceOnEventList+0x6c>)
  403402:	4798      	blx	r3
  403404:	b940      	cbnz	r0, 403418 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403406:	682a      	ldr	r2, [r5, #0]
  403408:	4914      	ldr	r1, [pc, #80]	; (40345c <vTaskPlaceOnEventList+0x70>)
  40340a:	680b      	ldr	r3, [r1, #0]
  40340c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40340e:	2201      	movs	r2, #1
  403410:	4082      	lsls	r2, r0
  403412:	ea23 0302 	bic.w	r3, r3, r2
  403416:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  403418:	f1b4 3fff 	cmp.w	r4, #4294967295
  40341c:	d010      	beq.n	403440 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40341e:	4b10      	ldr	r3, [pc, #64]	; (403460 <vTaskPlaceOnEventList+0x74>)
  403420:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  403422:	4420      	add	r0, r4
  403424:	4b0f      	ldr	r3, [pc, #60]	; (403464 <vTaskPlaceOnEventList+0x78>)
  403426:	4798      	blx	r3
  403428:	bd38      	pop	{r3, r4, r5, pc}
  40342a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40342e:	b672      	cpsid	i
  403430:	f383 8811 	msr	BASEPRI, r3
  403434:	f3bf 8f6f 	isb	sy
  403438:	f3bf 8f4f 	dsb	sy
  40343c:	b662      	cpsie	i
  40343e:	e7fe      	b.n	40343e <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403440:	4b03      	ldr	r3, [pc, #12]	; (403450 <vTaskPlaceOnEventList+0x64>)
  403442:	6819      	ldr	r1, [r3, #0]
  403444:	3104      	adds	r1, #4
  403446:	4808      	ldr	r0, [pc, #32]	; (403468 <vTaskPlaceOnEventList+0x7c>)
  403448:	4b08      	ldr	r3, [pc, #32]	; (40346c <vTaskPlaceOnEventList+0x80>)
  40344a:	4798      	blx	r3
  40344c:	bd38      	pop	{r3, r4, r5, pc}
  40344e:	bf00      	nop
  403450:	2040c624 	.word	0x2040c624
  403454:	00401ffd 	.word	0x00401ffd
  403458:	00402031 	.word	0x00402031
  40345c:	2040c6a8 	.word	0x2040c6a8
  403460:	2040c71c 	.word	0x2040c71c
  403464:	00402c55 	.word	0x00402c55
  403468:	2040c6f4 	.word	0x2040c6f4
  40346c:	00401fe5 	.word	0x00401fe5

00403470 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  403470:	b1e8      	cbz	r0, 4034ae <vTaskPlaceOnEventListRestricted+0x3e>
	{
  403472:	b570      	push	{r4, r5, r6, lr}
  403474:	4615      	mov	r5, r2
  403476:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403478:	4e16      	ldr	r6, [pc, #88]	; (4034d4 <vTaskPlaceOnEventListRestricted+0x64>)
  40347a:	6831      	ldr	r1, [r6, #0]
  40347c:	3118      	adds	r1, #24
  40347e:	4b16      	ldr	r3, [pc, #88]	; (4034d8 <vTaskPlaceOnEventListRestricted+0x68>)
  403480:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403482:	6830      	ldr	r0, [r6, #0]
  403484:	3004      	adds	r0, #4
  403486:	4b15      	ldr	r3, [pc, #84]	; (4034dc <vTaskPlaceOnEventListRestricted+0x6c>)
  403488:	4798      	blx	r3
  40348a:	b940      	cbnz	r0, 40349e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40348c:	6832      	ldr	r2, [r6, #0]
  40348e:	4914      	ldr	r1, [pc, #80]	; (4034e0 <vTaskPlaceOnEventListRestricted+0x70>)
  403490:	680b      	ldr	r3, [r1, #0]
  403492:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403494:	2201      	movs	r2, #1
  403496:	4082      	lsls	r2, r0
  403498:	ea23 0302 	bic.w	r3, r3, r2
  40349c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40349e:	2d01      	cmp	r5, #1
  4034a0:	d010      	beq.n	4034c4 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4034a2:	4b10      	ldr	r3, [pc, #64]	; (4034e4 <vTaskPlaceOnEventListRestricted+0x74>)
  4034a4:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4034a6:	4420      	add	r0, r4
  4034a8:	4b0f      	ldr	r3, [pc, #60]	; (4034e8 <vTaskPlaceOnEventListRestricted+0x78>)
  4034aa:	4798      	blx	r3
  4034ac:	bd70      	pop	{r4, r5, r6, pc}
  4034ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034b2:	b672      	cpsid	i
  4034b4:	f383 8811 	msr	BASEPRI, r3
  4034b8:	f3bf 8f6f 	isb	sy
  4034bc:	f3bf 8f4f 	dsb	sy
  4034c0:	b662      	cpsie	i
  4034c2:	e7fe      	b.n	4034c2 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4034c4:	4b03      	ldr	r3, [pc, #12]	; (4034d4 <vTaskPlaceOnEventListRestricted+0x64>)
  4034c6:	6819      	ldr	r1, [r3, #0]
  4034c8:	3104      	adds	r1, #4
  4034ca:	4808      	ldr	r0, [pc, #32]	; (4034ec <vTaskPlaceOnEventListRestricted+0x7c>)
  4034cc:	4b02      	ldr	r3, [pc, #8]	; (4034d8 <vTaskPlaceOnEventListRestricted+0x68>)
  4034ce:	4798      	blx	r3
  4034d0:	bd70      	pop	{r4, r5, r6, pc}
  4034d2:	bf00      	nop
  4034d4:	2040c624 	.word	0x2040c624
  4034d8:	00401fe5 	.word	0x00401fe5
  4034dc:	00402031 	.word	0x00402031
  4034e0:	2040c6a8 	.word	0x2040c6a8
  4034e4:	2040c71c 	.word	0x2040c71c
  4034e8:	00402c55 	.word	0x00402c55
  4034ec:	2040c6f4 	.word	0x2040c6f4

004034f0 <xTaskRemoveFromEventList>:
{
  4034f0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4034f2:	68c3      	ldr	r3, [r0, #12]
  4034f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4034f6:	b324      	cbz	r4, 403542 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4034f8:	f104 0518 	add.w	r5, r4, #24
  4034fc:	4628      	mov	r0, r5
  4034fe:	4b1a      	ldr	r3, [pc, #104]	; (403568 <xTaskRemoveFromEventList+0x78>)
  403500:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403502:	4b1a      	ldr	r3, [pc, #104]	; (40356c <xTaskRemoveFromEventList+0x7c>)
  403504:	681b      	ldr	r3, [r3, #0]
  403506:	bb3b      	cbnz	r3, 403558 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  403508:	1d25      	adds	r5, r4, #4
  40350a:	4628      	mov	r0, r5
  40350c:	4b16      	ldr	r3, [pc, #88]	; (403568 <xTaskRemoveFromEventList+0x78>)
  40350e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403510:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403512:	4a17      	ldr	r2, [pc, #92]	; (403570 <xTaskRemoveFromEventList+0x80>)
  403514:	6811      	ldr	r1, [r2, #0]
  403516:	2301      	movs	r3, #1
  403518:	4083      	lsls	r3, r0
  40351a:	430b      	orrs	r3, r1
  40351c:	6013      	str	r3, [r2, #0]
  40351e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403522:	4629      	mov	r1, r5
  403524:	4b13      	ldr	r3, [pc, #76]	; (403574 <xTaskRemoveFromEventList+0x84>)
  403526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40352a:	4b13      	ldr	r3, [pc, #76]	; (403578 <xTaskRemoveFromEventList+0x88>)
  40352c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40352e:	4b13      	ldr	r3, [pc, #76]	; (40357c <xTaskRemoveFromEventList+0x8c>)
  403530:	681b      	ldr	r3, [r3, #0]
  403532:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403536:	429a      	cmp	r2, r3
  403538:	d913      	bls.n	403562 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40353a:	2001      	movs	r0, #1
  40353c:	4b10      	ldr	r3, [pc, #64]	; (403580 <xTaskRemoveFromEventList+0x90>)
  40353e:	6018      	str	r0, [r3, #0]
  403540:	bd38      	pop	{r3, r4, r5, pc}
  403542:	f04f 0380 	mov.w	r3, #128	; 0x80
  403546:	b672      	cpsid	i
  403548:	f383 8811 	msr	BASEPRI, r3
  40354c:	f3bf 8f6f 	isb	sy
  403550:	f3bf 8f4f 	dsb	sy
  403554:	b662      	cpsie	i
  403556:	e7fe      	b.n	403556 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  403558:	4629      	mov	r1, r5
  40355a:	480a      	ldr	r0, [pc, #40]	; (403584 <xTaskRemoveFromEventList+0x94>)
  40355c:	4b06      	ldr	r3, [pc, #24]	; (403578 <xTaskRemoveFromEventList+0x88>)
  40355e:	4798      	blx	r3
  403560:	e7e5      	b.n	40352e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  403562:	2000      	movs	r0, #0
}
  403564:	bd38      	pop	{r3, r4, r5, pc}
  403566:	bf00      	nop
  403568:	00402031 	.word	0x00402031
  40356c:	2040c69c 	.word	0x2040c69c
  403570:	2040c6a8 	.word	0x2040c6a8
  403574:	2040c630 	.word	0x2040c630
  403578:	00401fe5 	.word	0x00401fe5
  40357c:	2040c624 	.word	0x2040c624
  403580:	2040c720 	.word	0x2040c720
  403584:	2040c6dc 	.word	0x2040c6dc

00403588 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  403588:	b130      	cbz	r0, 403598 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40358a:	4a09      	ldr	r2, [pc, #36]	; (4035b0 <vTaskSetTimeOutState+0x28>)
  40358c:	6812      	ldr	r2, [r2, #0]
  40358e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403590:	4a08      	ldr	r2, [pc, #32]	; (4035b4 <vTaskSetTimeOutState+0x2c>)
  403592:	6812      	ldr	r2, [r2, #0]
  403594:	6042      	str	r2, [r0, #4]
  403596:	4770      	bx	lr
  403598:	f04f 0380 	mov.w	r3, #128	; 0x80
  40359c:	b672      	cpsid	i
  40359e:	f383 8811 	msr	BASEPRI, r3
  4035a2:	f3bf 8f6f 	isb	sy
  4035a6:	f3bf 8f4f 	dsb	sy
  4035aa:	b662      	cpsie	i
  4035ac:	e7fe      	b.n	4035ac <vTaskSetTimeOutState+0x24>
  4035ae:	bf00      	nop
  4035b0:	2040c6d8 	.word	0x2040c6d8
  4035b4:	2040c71c 	.word	0x2040c71c

004035b8 <xTaskCheckForTimeOut>:
{
  4035b8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4035ba:	b1c0      	cbz	r0, 4035ee <xTaskCheckForTimeOut+0x36>
  4035bc:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4035be:	b309      	cbz	r1, 403604 <xTaskCheckForTimeOut+0x4c>
  4035c0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4035c2:	4b1d      	ldr	r3, [pc, #116]	; (403638 <xTaskCheckForTimeOut+0x80>)
  4035c4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4035c6:	4b1d      	ldr	r3, [pc, #116]	; (40363c <xTaskCheckForTimeOut+0x84>)
  4035c8:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4035ca:	682b      	ldr	r3, [r5, #0]
  4035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4035d0:	d02e      	beq.n	403630 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4035d2:	491b      	ldr	r1, [pc, #108]	; (403640 <xTaskCheckForTimeOut+0x88>)
  4035d4:	6809      	ldr	r1, [r1, #0]
  4035d6:	6820      	ldr	r0, [r4, #0]
  4035d8:	4288      	cmp	r0, r1
  4035da:	d002      	beq.n	4035e2 <xTaskCheckForTimeOut+0x2a>
  4035dc:	6861      	ldr	r1, [r4, #4]
  4035de:	428a      	cmp	r2, r1
  4035e0:	d228      	bcs.n	403634 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4035e2:	6861      	ldr	r1, [r4, #4]
  4035e4:	1a50      	subs	r0, r2, r1
  4035e6:	4283      	cmp	r3, r0
  4035e8:	d817      	bhi.n	40361a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4035ea:	2401      	movs	r4, #1
  4035ec:	e01c      	b.n	403628 <xTaskCheckForTimeOut+0x70>
  4035ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035f2:	b672      	cpsid	i
  4035f4:	f383 8811 	msr	BASEPRI, r3
  4035f8:	f3bf 8f6f 	isb	sy
  4035fc:	f3bf 8f4f 	dsb	sy
  403600:	b662      	cpsie	i
  403602:	e7fe      	b.n	403602 <xTaskCheckForTimeOut+0x4a>
  403604:	f04f 0380 	mov.w	r3, #128	; 0x80
  403608:	b672      	cpsid	i
  40360a:	f383 8811 	msr	BASEPRI, r3
  40360e:	f3bf 8f6f 	isb	sy
  403612:	f3bf 8f4f 	dsb	sy
  403616:	b662      	cpsie	i
  403618:	e7fe      	b.n	403618 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40361a:	1a9b      	subs	r3, r3, r2
  40361c:	440b      	add	r3, r1
  40361e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403620:	4620      	mov	r0, r4
  403622:	4b08      	ldr	r3, [pc, #32]	; (403644 <xTaskCheckForTimeOut+0x8c>)
  403624:	4798      	blx	r3
			xReturn = pdFALSE;
  403626:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403628:	4b07      	ldr	r3, [pc, #28]	; (403648 <xTaskCheckForTimeOut+0x90>)
  40362a:	4798      	blx	r3
}
  40362c:	4620      	mov	r0, r4
  40362e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403630:	2400      	movs	r4, #0
  403632:	e7f9      	b.n	403628 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  403634:	2401      	movs	r4, #1
  403636:	e7f7      	b.n	403628 <xTaskCheckForTimeOut+0x70>
  403638:	00402115 	.word	0x00402115
  40363c:	2040c71c 	.word	0x2040c71c
  403640:	2040c6d8 	.word	0x2040c6d8
  403644:	00403589 	.word	0x00403589
  403648:	00402161 	.word	0x00402161

0040364c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  40364c:	2201      	movs	r2, #1
  40364e:	4b01      	ldr	r3, [pc, #4]	; (403654 <vTaskMissedYield+0x8>)
  403650:	601a      	str	r2, [r3, #0]
  403652:	4770      	bx	lr
  403654:	2040c720 	.word	0x2040c720

00403658 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  403658:	4b05      	ldr	r3, [pc, #20]	; (403670 <xTaskGetSchedulerState+0x18>)
  40365a:	681b      	ldr	r3, [r3, #0]
  40365c:	b133      	cbz	r3, 40366c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40365e:	4b05      	ldr	r3, [pc, #20]	; (403674 <xTaskGetSchedulerState+0x1c>)
  403660:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  403662:	2b00      	cmp	r3, #0
  403664:	bf0c      	ite	eq
  403666:	2002      	moveq	r0, #2
  403668:	2000      	movne	r0, #0
  40366a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  40366c:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40366e:	4770      	bx	lr
  403670:	2040c6f0 	.word	0x2040c6f0
  403674:	2040c69c 	.word	0x2040c69c

00403678 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  403678:	2800      	cmp	r0, #0
  40367a:	d044      	beq.n	403706 <vTaskPriorityInherit+0x8e>
	{
  40367c:	b538      	push	{r3, r4, r5, lr}
  40367e:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  403680:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403682:	4921      	ldr	r1, [pc, #132]	; (403708 <vTaskPriorityInherit+0x90>)
  403684:	6809      	ldr	r1, [r1, #0]
  403686:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403688:	428a      	cmp	r2, r1
  40368a:	d214      	bcs.n	4036b6 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40368c:	6981      	ldr	r1, [r0, #24]
  40368e:	2900      	cmp	r1, #0
  403690:	db05      	blt.n	40369e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403692:	491d      	ldr	r1, [pc, #116]	; (403708 <vTaskPriorityInherit+0x90>)
  403694:	6809      	ldr	r1, [r1, #0]
  403696:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403698:	f1c1 0105 	rsb	r1, r1, #5
  40369c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40369e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4036a2:	491a      	ldr	r1, [pc, #104]	; (40370c <vTaskPriorityInherit+0x94>)
  4036a4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4036a8:	6961      	ldr	r1, [r4, #20]
  4036aa:	4291      	cmp	r1, r2
  4036ac:	d004      	beq.n	4036b8 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4036ae:	4a16      	ldr	r2, [pc, #88]	; (403708 <vTaskPriorityInherit+0x90>)
  4036b0:	6812      	ldr	r2, [r2, #0]
  4036b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4036b4:	62e2      	str	r2, [r4, #44]	; 0x2c
  4036b6:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4036b8:	1d25      	adds	r5, r4, #4
  4036ba:	4628      	mov	r0, r5
  4036bc:	4b14      	ldr	r3, [pc, #80]	; (403710 <vTaskPriorityInherit+0x98>)
  4036be:	4798      	blx	r3
  4036c0:	b970      	cbnz	r0, 4036e0 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4036c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4036c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4036c8:	4a10      	ldr	r2, [pc, #64]	; (40370c <vTaskPriorityInherit+0x94>)
  4036ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4036ce:	b93a      	cbnz	r2, 4036e0 <vTaskPriorityInherit+0x68>
  4036d0:	4810      	ldr	r0, [pc, #64]	; (403714 <vTaskPriorityInherit+0x9c>)
  4036d2:	6802      	ldr	r2, [r0, #0]
  4036d4:	2101      	movs	r1, #1
  4036d6:	fa01 f303 	lsl.w	r3, r1, r3
  4036da:	ea22 0303 	bic.w	r3, r2, r3
  4036de:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4036e0:	4b09      	ldr	r3, [pc, #36]	; (403708 <vTaskPriorityInherit+0x90>)
  4036e2:	681b      	ldr	r3, [r3, #0]
  4036e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4036e6:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4036e8:	4a0a      	ldr	r2, [pc, #40]	; (403714 <vTaskPriorityInherit+0x9c>)
  4036ea:	6811      	ldr	r1, [r2, #0]
  4036ec:	2301      	movs	r3, #1
  4036ee:	4083      	lsls	r3, r0
  4036f0:	430b      	orrs	r3, r1
  4036f2:	6013      	str	r3, [r2, #0]
  4036f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4036f8:	4629      	mov	r1, r5
  4036fa:	4b04      	ldr	r3, [pc, #16]	; (40370c <vTaskPriorityInherit+0x94>)
  4036fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403700:	4b05      	ldr	r3, [pc, #20]	; (403718 <vTaskPriorityInherit+0xa0>)
  403702:	4798      	blx	r3
  403704:	bd38      	pop	{r3, r4, r5, pc}
  403706:	4770      	bx	lr
  403708:	2040c624 	.word	0x2040c624
  40370c:	2040c630 	.word	0x2040c630
  403710:	00402031 	.word	0x00402031
  403714:	2040c6a8 	.word	0x2040c6a8
  403718:	00401fe5 	.word	0x00401fe5

0040371c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40371c:	2800      	cmp	r0, #0
  40371e:	d04d      	beq.n	4037bc <xTaskPriorityDisinherit+0xa0>
	{
  403720:	b538      	push	{r3, r4, r5, lr}
  403722:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403724:	4a27      	ldr	r2, [pc, #156]	; (4037c4 <xTaskPriorityDisinherit+0xa8>)
  403726:	6812      	ldr	r2, [r2, #0]
  403728:	4290      	cmp	r0, r2
  40372a:	d00a      	beq.n	403742 <xTaskPriorityDisinherit+0x26>
  40372c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403730:	b672      	cpsid	i
  403732:	f383 8811 	msr	BASEPRI, r3
  403736:	f3bf 8f6f 	isb	sy
  40373a:	f3bf 8f4f 	dsb	sy
  40373e:	b662      	cpsie	i
  403740:	e7fe      	b.n	403740 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  403742:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403744:	b952      	cbnz	r2, 40375c <xTaskPriorityDisinherit+0x40>
  403746:	f04f 0380 	mov.w	r3, #128	; 0x80
  40374a:	b672      	cpsid	i
  40374c:	f383 8811 	msr	BASEPRI, r3
  403750:	f3bf 8f6f 	isb	sy
  403754:	f3bf 8f4f 	dsb	sy
  403758:	b662      	cpsie	i
  40375a:	e7fe      	b.n	40375a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  40375c:	3a01      	subs	r2, #1
  40375e:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  403760:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  403762:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  403764:	4288      	cmp	r0, r1
  403766:	d02b      	beq.n	4037c0 <xTaskPriorityDisinherit+0xa4>
  403768:	bb52      	cbnz	r2, 4037c0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40376a:	1d25      	adds	r5, r4, #4
  40376c:	4628      	mov	r0, r5
  40376e:	4b16      	ldr	r3, [pc, #88]	; (4037c8 <xTaskPriorityDisinherit+0xac>)
  403770:	4798      	blx	r3
  403772:	b968      	cbnz	r0, 403790 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403774:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403776:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40377a:	4b14      	ldr	r3, [pc, #80]	; (4037cc <xTaskPriorityDisinherit+0xb0>)
  40377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403780:	b933      	cbnz	r3, 403790 <xTaskPriorityDisinherit+0x74>
  403782:	4813      	ldr	r0, [pc, #76]	; (4037d0 <xTaskPriorityDisinherit+0xb4>)
  403784:	6803      	ldr	r3, [r0, #0]
  403786:	2201      	movs	r2, #1
  403788:	408a      	lsls	r2, r1
  40378a:	ea23 0302 	bic.w	r3, r3, r2
  40378e:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403790:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403792:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403794:	f1c0 0305 	rsb	r3, r0, #5
  403798:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40379a:	4a0d      	ldr	r2, [pc, #52]	; (4037d0 <xTaskPriorityDisinherit+0xb4>)
  40379c:	6811      	ldr	r1, [r2, #0]
  40379e:	2401      	movs	r4, #1
  4037a0:	fa04 f300 	lsl.w	r3, r4, r0
  4037a4:	430b      	orrs	r3, r1
  4037a6:	6013      	str	r3, [r2, #0]
  4037a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4037ac:	4629      	mov	r1, r5
  4037ae:	4b07      	ldr	r3, [pc, #28]	; (4037cc <xTaskPriorityDisinherit+0xb0>)
  4037b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4037b4:	4b07      	ldr	r3, [pc, #28]	; (4037d4 <xTaskPriorityDisinherit+0xb8>)
  4037b6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4037b8:	4620      	mov	r0, r4
  4037ba:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4037bc:	2000      	movs	r0, #0
  4037be:	4770      	bx	lr
  4037c0:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4037c2:	bd38      	pop	{r3, r4, r5, pc}
  4037c4:	2040c624 	.word	0x2040c624
  4037c8:	00402031 	.word	0x00402031
  4037cc:	2040c630 	.word	0x2040c630
  4037d0:	2040c6a8 	.word	0x2040c6a8
  4037d4:	00401fe5 	.word	0x00401fe5

004037d8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4037d8:	4b05      	ldr	r3, [pc, #20]	; (4037f0 <pvTaskIncrementMutexHeldCount+0x18>)
  4037da:	681b      	ldr	r3, [r3, #0]
  4037dc:	b123      	cbz	r3, 4037e8 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4037de:	4b04      	ldr	r3, [pc, #16]	; (4037f0 <pvTaskIncrementMutexHeldCount+0x18>)
  4037e0:	681a      	ldr	r2, [r3, #0]
  4037e2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4037e4:	3301      	adds	r3, #1
  4037e6:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4037e8:	4b01      	ldr	r3, [pc, #4]	; (4037f0 <pvTaskIncrementMutexHeldCount+0x18>)
  4037ea:	6818      	ldr	r0, [r3, #0]
	}
  4037ec:	4770      	bx	lr
  4037ee:	bf00      	nop
  4037f0:	2040c624 	.word	0x2040c624

004037f4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4037f4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4037f6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4037f8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4037fa:	4291      	cmp	r1, r2
  4037fc:	d80c      	bhi.n	403818 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4037fe:	1ad2      	subs	r2, r2, r3
  403800:	6983      	ldr	r3, [r0, #24]
  403802:	429a      	cmp	r2, r3
  403804:	d301      	bcc.n	40380a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  403806:	2001      	movs	r0, #1
  403808:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40380a:	1d01      	adds	r1, r0, #4
  40380c:	4b09      	ldr	r3, [pc, #36]	; (403834 <prvInsertTimerInActiveList+0x40>)
  40380e:	6818      	ldr	r0, [r3, #0]
  403810:	4b09      	ldr	r3, [pc, #36]	; (403838 <prvInsertTimerInActiveList+0x44>)
  403812:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403814:	2000      	movs	r0, #0
  403816:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  403818:	429a      	cmp	r2, r3
  40381a:	d203      	bcs.n	403824 <prvInsertTimerInActiveList+0x30>
  40381c:	4299      	cmp	r1, r3
  40381e:	d301      	bcc.n	403824 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403820:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  403822:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403824:	1d01      	adds	r1, r0, #4
  403826:	4b05      	ldr	r3, [pc, #20]	; (40383c <prvInsertTimerInActiveList+0x48>)
  403828:	6818      	ldr	r0, [r3, #0]
  40382a:	4b03      	ldr	r3, [pc, #12]	; (403838 <prvInsertTimerInActiveList+0x44>)
  40382c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40382e:	2000      	movs	r0, #0
  403830:	bd08      	pop	{r3, pc}
  403832:	bf00      	nop
  403834:	2040c728 	.word	0x2040c728
  403838:	00401ffd 	.word	0x00401ffd
  40383c:	2040c724 	.word	0x2040c724

00403840 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403840:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403842:	4b15      	ldr	r3, [pc, #84]	; (403898 <prvCheckForValidListAndQueue+0x58>)
  403844:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  403846:	4b15      	ldr	r3, [pc, #84]	; (40389c <prvCheckForValidListAndQueue+0x5c>)
  403848:	681b      	ldr	r3, [r3, #0]
  40384a:	b113      	cbz	r3, 403852 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40384c:	4b14      	ldr	r3, [pc, #80]	; (4038a0 <prvCheckForValidListAndQueue+0x60>)
  40384e:	4798      	blx	r3
  403850:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  403852:	4d14      	ldr	r5, [pc, #80]	; (4038a4 <prvCheckForValidListAndQueue+0x64>)
  403854:	4628      	mov	r0, r5
  403856:	4e14      	ldr	r6, [pc, #80]	; (4038a8 <prvCheckForValidListAndQueue+0x68>)
  403858:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40385a:	4c14      	ldr	r4, [pc, #80]	; (4038ac <prvCheckForValidListAndQueue+0x6c>)
  40385c:	4620      	mov	r0, r4
  40385e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  403860:	4b13      	ldr	r3, [pc, #76]	; (4038b0 <prvCheckForValidListAndQueue+0x70>)
  403862:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403864:	4b13      	ldr	r3, [pc, #76]	; (4038b4 <prvCheckForValidListAndQueue+0x74>)
  403866:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  403868:	2200      	movs	r2, #0
  40386a:	2110      	movs	r1, #16
  40386c:	2005      	movs	r0, #5
  40386e:	4b12      	ldr	r3, [pc, #72]	; (4038b8 <prvCheckForValidListAndQueue+0x78>)
  403870:	4798      	blx	r3
  403872:	4b0a      	ldr	r3, [pc, #40]	; (40389c <prvCheckForValidListAndQueue+0x5c>)
  403874:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  403876:	b118      	cbz	r0, 403880 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  403878:	4910      	ldr	r1, [pc, #64]	; (4038bc <prvCheckForValidListAndQueue+0x7c>)
  40387a:	4b11      	ldr	r3, [pc, #68]	; (4038c0 <prvCheckForValidListAndQueue+0x80>)
  40387c:	4798      	blx	r3
  40387e:	e7e5      	b.n	40384c <prvCheckForValidListAndQueue+0xc>
  403880:	f04f 0380 	mov.w	r3, #128	; 0x80
  403884:	b672      	cpsid	i
  403886:	f383 8811 	msr	BASEPRI, r3
  40388a:	f3bf 8f6f 	isb	sy
  40388e:	f3bf 8f4f 	dsb	sy
  403892:	b662      	cpsie	i
  403894:	e7fe      	b.n	403894 <prvCheckForValidListAndQueue+0x54>
  403896:	bf00      	nop
  403898:	00402115 	.word	0x00402115
  40389c:	2040c758 	.word	0x2040c758
  4038a0:	00402161 	.word	0x00402161
  4038a4:	2040c72c 	.word	0x2040c72c
  4038a8:	00401fc9 	.word	0x00401fc9
  4038ac:	2040c740 	.word	0x2040c740
  4038b0:	2040c724 	.word	0x2040c724
  4038b4:	2040c728 	.word	0x2040c728
  4038b8:	0040266d 	.word	0x0040266d
  4038bc:	00407c80 	.word	0x00407c80
  4038c0:	00402b9d 	.word	0x00402b9d

004038c4 <xTimerCreateTimerTask>:
{
  4038c4:	b510      	push	{r4, lr}
  4038c6:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  4038c8:	4b0f      	ldr	r3, [pc, #60]	; (403908 <xTimerCreateTimerTask+0x44>)
  4038ca:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4038cc:	4b0f      	ldr	r3, [pc, #60]	; (40390c <xTimerCreateTimerTask+0x48>)
  4038ce:	681b      	ldr	r3, [r3, #0]
  4038d0:	b173      	cbz	r3, 4038f0 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4038d2:	2300      	movs	r3, #0
  4038d4:	9303      	str	r3, [sp, #12]
  4038d6:	9302      	str	r3, [sp, #8]
  4038d8:	9301      	str	r3, [sp, #4]
  4038da:	2204      	movs	r2, #4
  4038dc:	9200      	str	r2, [sp, #0]
  4038de:	f44f 7282 	mov.w	r2, #260	; 0x104
  4038e2:	490b      	ldr	r1, [pc, #44]	; (403910 <xTimerCreateTimerTask+0x4c>)
  4038e4:	480b      	ldr	r0, [pc, #44]	; (403914 <xTimerCreateTimerTask+0x50>)
  4038e6:	4c0c      	ldr	r4, [pc, #48]	; (403918 <xTimerCreateTimerTask+0x54>)
  4038e8:	47a0      	blx	r4
	configASSERT( xReturn );
  4038ea:	b108      	cbz	r0, 4038f0 <xTimerCreateTimerTask+0x2c>
}
  4038ec:	b004      	add	sp, #16
  4038ee:	bd10      	pop	{r4, pc}
  4038f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038f4:	b672      	cpsid	i
  4038f6:	f383 8811 	msr	BASEPRI, r3
  4038fa:	f3bf 8f6f 	isb	sy
  4038fe:	f3bf 8f4f 	dsb	sy
  403902:	b662      	cpsie	i
  403904:	e7fe      	b.n	403904 <xTimerCreateTimerTask+0x40>
  403906:	bf00      	nop
  403908:	00403841 	.word	0x00403841
  40390c:	2040c758 	.word	0x2040c758
  403910:	00407c88 	.word	0x00407c88
  403914:	00403a45 	.word	0x00403a45
  403918:	00402cad 	.word	0x00402cad

0040391c <xTimerGenericCommand>:
	configASSERT( xTimer );
  40391c:	b1d8      	cbz	r0, 403956 <xTimerGenericCommand+0x3a>
{
  40391e:	b530      	push	{r4, r5, lr}
  403920:	b085      	sub	sp, #20
  403922:	4615      	mov	r5, r2
  403924:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  403926:	4a15      	ldr	r2, [pc, #84]	; (40397c <xTimerGenericCommand+0x60>)
  403928:	6810      	ldr	r0, [r2, #0]
  40392a:	b320      	cbz	r0, 403976 <xTimerGenericCommand+0x5a>
  40392c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  40392e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403930:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403932:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403934:	2905      	cmp	r1, #5
  403936:	dc19      	bgt.n	40396c <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403938:	4b11      	ldr	r3, [pc, #68]	; (403980 <xTimerGenericCommand+0x64>)
  40393a:	4798      	blx	r3
  40393c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40393e:	f04f 0300 	mov.w	r3, #0
  403942:	bf0c      	ite	eq
  403944:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403946:	461a      	movne	r2, r3
  403948:	4669      	mov	r1, sp
  40394a:	480c      	ldr	r0, [pc, #48]	; (40397c <xTimerGenericCommand+0x60>)
  40394c:	6800      	ldr	r0, [r0, #0]
  40394e:	4c0d      	ldr	r4, [pc, #52]	; (403984 <xTimerGenericCommand+0x68>)
  403950:	47a0      	blx	r4
}
  403952:	b005      	add	sp, #20
  403954:	bd30      	pop	{r4, r5, pc}
  403956:	f04f 0380 	mov.w	r3, #128	; 0x80
  40395a:	b672      	cpsid	i
  40395c:	f383 8811 	msr	BASEPRI, r3
  403960:	f3bf 8f6f 	isb	sy
  403964:	f3bf 8f4f 	dsb	sy
  403968:	b662      	cpsie	i
  40396a:	e7fe      	b.n	40396a <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40396c:	2300      	movs	r3, #0
  40396e:	4669      	mov	r1, sp
  403970:	4c05      	ldr	r4, [pc, #20]	; (403988 <xTimerGenericCommand+0x6c>)
  403972:	47a0      	blx	r4
  403974:	e7ed      	b.n	403952 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  403976:	2000      	movs	r0, #0
	return xReturn;
  403978:	e7eb      	b.n	403952 <xTimerGenericCommand+0x36>
  40397a:	bf00      	nop
  40397c:	2040c758 	.word	0x2040c758
  403980:	00403659 	.word	0x00403659
  403984:	004026e9 	.word	0x004026e9
  403988:	004028cd 	.word	0x004028cd

0040398c <prvSampleTimeNow>:
{
  40398c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403990:	b082      	sub	sp, #8
  403992:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403994:	4b24      	ldr	r3, [pc, #144]	; (403a28 <prvSampleTimeNow+0x9c>)
  403996:	4798      	blx	r3
  403998:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40399a:	4b24      	ldr	r3, [pc, #144]	; (403a2c <prvSampleTimeNow+0xa0>)
  40399c:	681b      	ldr	r3, [r3, #0]
  40399e:	4298      	cmp	r0, r3
  4039a0:	d31b      	bcc.n	4039da <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4039a2:	2300      	movs	r3, #0
  4039a4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  4039a8:	4b20      	ldr	r3, [pc, #128]	; (403a2c <prvSampleTimeNow+0xa0>)
  4039aa:	601f      	str	r7, [r3, #0]
}
  4039ac:	4638      	mov	r0, r7
  4039ae:	b002      	add	sp, #8
  4039b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4039b4:	2100      	movs	r1, #0
  4039b6:	9100      	str	r1, [sp, #0]
  4039b8:	460b      	mov	r3, r1
  4039ba:	4652      	mov	r2, sl
  4039bc:	4620      	mov	r0, r4
  4039be:	4c1c      	ldr	r4, [pc, #112]	; (403a30 <prvSampleTimeNow+0xa4>)
  4039c0:	47a0      	blx	r4
				configASSERT( xResult );
  4039c2:	b960      	cbnz	r0, 4039de <prvSampleTimeNow+0x52>
  4039c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4039c8:	b672      	cpsid	i
  4039ca:	f383 8811 	msr	BASEPRI, r3
  4039ce:	f3bf 8f6f 	isb	sy
  4039d2:	f3bf 8f4f 	dsb	sy
  4039d6:	b662      	cpsie	i
  4039d8:	e7fe      	b.n	4039d8 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4039da:	4d16      	ldr	r5, [pc, #88]	; (403a34 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4039dc:	4e16      	ldr	r6, [pc, #88]	; (403a38 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4039de:	682b      	ldr	r3, [r5, #0]
  4039e0:	681a      	ldr	r2, [r3, #0]
  4039e2:	b1c2      	cbz	r2, 403a16 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4039e4:	68db      	ldr	r3, [r3, #12]
  4039e6:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4039ea:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4039ec:	f104 0904 	add.w	r9, r4, #4
  4039f0:	4648      	mov	r0, r9
  4039f2:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4039f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4039f6:	4620      	mov	r0, r4
  4039f8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4039fa:	69e3      	ldr	r3, [r4, #28]
  4039fc:	2b01      	cmp	r3, #1
  4039fe:	d1ee      	bne.n	4039de <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403a00:	69a3      	ldr	r3, [r4, #24]
  403a02:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403a04:	459a      	cmp	sl, r3
  403a06:	d2d5      	bcs.n	4039b4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403a08:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403a0a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403a0c:	4649      	mov	r1, r9
  403a0e:	6828      	ldr	r0, [r5, #0]
  403a10:	4b0a      	ldr	r3, [pc, #40]	; (403a3c <prvSampleTimeNow+0xb0>)
  403a12:	4798      	blx	r3
  403a14:	e7e3      	b.n	4039de <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  403a16:	4a0a      	ldr	r2, [pc, #40]	; (403a40 <prvSampleTimeNow+0xb4>)
  403a18:	6810      	ldr	r0, [r2, #0]
  403a1a:	4906      	ldr	r1, [pc, #24]	; (403a34 <prvSampleTimeNow+0xa8>)
  403a1c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403a1e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403a20:	2301      	movs	r3, #1
  403a22:	f8c8 3000 	str.w	r3, [r8]
  403a26:	e7bf      	b.n	4039a8 <prvSampleTimeNow+0x1c>
  403a28:	00402f7d 	.word	0x00402f7d
  403a2c:	2040c754 	.word	0x2040c754
  403a30:	0040391d 	.word	0x0040391d
  403a34:	2040c724 	.word	0x2040c724
  403a38:	00402031 	.word	0x00402031
  403a3c:	00401ffd 	.word	0x00401ffd
  403a40:	2040c728 	.word	0x2040c728

00403a44 <prvTimerTask>:
{
  403a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a48:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403a4a:	4e75      	ldr	r6, [pc, #468]	; (403c20 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403a4c:	4f75      	ldr	r7, [pc, #468]	; (403c24 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403a4e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403c4c <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403a52:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403c50 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403a56:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  403a58:	681a      	ldr	r2, [r3, #0]
  403a5a:	2a00      	cmp	r2, #0
  403a5c:	f000 80ce 	beq.w	403bfc <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403a60:	68db      	ldr	r3, [r3, #12]
  403a62:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403a64:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403a66:	a804      	add	r0, sp, #16
  403a68:	4b6f      	ldr	r3, [pc, #444]	; (403c28 <prvTimerTask+0x1e4>)
  403a6a:	4798      	blx	r3
  403a6c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403a6e:	9b04      	ldr	r3, [sp, #16]
  403a70:	2b00      	cmp	r3, #0
  403a72:	d144      	bne.n	403afe <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403a74:	42a0      	cmp	r0, r4
  403a76:	d212      	bcs.n	403a9e <prvTimerTask+0x5a>
  403a78:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403a7a:	1b61      	subs	r1, r4, r5
  403a7c:	4b6b      	ldr	r3, [pc, #428]	; (403c2c <prvTimerTask+0x1e8>)
  403a7e:	6818      	ldr	r0, [r3, #0]
  403a80:	4b6b      	ldr	r3, [pc, #428]	; (403c30 <prvTimerTask+0x1ec>)
  403a82:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403a84:	4b6b      	ldr	r3, [pc, #428]	; (403c34 <prvTimerTask+0x1f0>)
  403a86:	4798      	blx	r3
  403a88:	2800      	cmp	r0, #0
  403a8a:	d13a      	bne.n	403b02 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403a8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403a90:	f8c9 3000 	str.w	r3, [r9]
  403a94:	f3bf 8f4f 	dsb	sy
  403a98:	f3bf 8f6f 	isb	sy
  403a9c:	e031      	b.n	403b02 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403a9e:	4b65      	ldr	r3, [pc, #404]	; (403c34 <prvTimerTask+0x1f0>)
  403aa0:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403aa2:	6833      	ldr	r3, [r6, #0]
  403aa4:	68db      	ldr	r3, [r3, #12]
  403aa6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403aaa:	f10a 0004 	add.w	r0, sl, #4
  403aae:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403ab0:	f8da 301c 	ldr.w	r3, [sl, #28]
  403ab4:	2b01      	cmp	r3, #1
  403ab6:	d004      	beq.n	403ac2 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403ab8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403abc:	4650      	mov	r0, sl
  403abe:	4798      	blx	r3
  403ac0:	e01f      	b.n	403b02 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403ac2:	f8da 1018 	ldr.w	r1, [sl, #24]
  403ac6:	4623      	mov	r3, r4
  403ac8:	462a      	mov	r2, r5
  403aca:	4421      	add	r1, r4
  403acc:	4650      	mov	r0, sl
  403ace:	4d5a      	ldr	r5, [pc, #360]	; (403c38 <prvTimerTask+0x1f4>)
  403ad0:	47a8      	blx	r5
  403ad2:	2801      	cmp	r0, #1
  403ad4:	d1f0      	bne.n	403ab8 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403ad6:	2100      	movs	r1, #0
  403ad8:	9100      	str	r1, [sp, #0]
  403ada:	460b      	mov	r3, r1
  403adc:	4622      	mov	r2, r4
  403ade:	4650      	mov	r0, sl
  403ae0:	4c56      	ldr	r4, [pc, #344]	; (403c3c <prvTimerTask+0x1f8>)
  403ae2:	47a0      	blx	r4
			configASSERT( xResult );
  403ae4:	2800      	cmp	r0, #0
  403ae6:	d1e7      	bne.n	403ab8 <prvTimerTask+0x74>
  403ae8:	f04f 0380 	mov.w	r3, #128	; 0x80
  403aec:	b672      	cpsid	i
  403aee:	f383 8811 	msr	BASEPRI, r3
  403af2:	f3bf 8f6f 	isb	sy
  403af6:	f3bf 8f4f 	dsb	sy
  403afa:	b662      	cpsie	i
  403afc:	e7fe      	b.n	403afc <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403afe:	4b4d      	ldr	r3, [pc, #308]	; (403c34 <prvTimerTask+0x1f0>)
  403b00:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403b02:	4d4a      	ldr	r5, [pc, #296]	; (403c2c <prvTimerTask+0x1e8>)
  403b04:	4c4e      	ldr	r4, [pc, #312]	; (403c40 <prvTimerTask+0x1fc>)
  403b06:	e006      	b.n	403b16 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403b08:	9907      	ldr	r1, [sp, #28]
  403b0a:	9806      	ldr	r0, [sp, #24]
  403b0c:	9b05      	ldr	r3, [sp, #20]
  403b0e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403b10:	9b04      	ldr	r3, [sp, #16]
  403b12:	2b00      	cmp	r3, #0
  403b14:	da09      	bge.n	403b2a <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403b16:	2300      	movs	r3, #0
  403b18:	461a      	mov	r2, r3
  403b1a:	a904      	add	r1, sp, #16
  403b1c:	6828      	ldr	r0, [r5, #0]
  403b1e:	47a0      	blx	r4
  403b20:	2800      	cmp	r0, #0
  403b22:	d098      	beq.n	403a56 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403b24:	9b04      	ldr	r3, [sp, #16]
  403b26:	2b00      	cmp	r3, #0
  403b28:	dbee      	blt.n	403b08 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403b2a:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403b2e:	f8da 3014 	ldr.w	r3, [sl, #20]
  403b32:	b113      	cbz	r3, 403b3a <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403b34:	f10a 0004 	add.w	r0, sl, #4
  403b38:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403b3a:	a803      	add	r0, sp, #12
  403b3c:	4b3a      	ldr	r3, [pc, #232]	; (403c28 <prvTimerTask+0x1e4>)
  403b3e:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403b40:	9b04      	ldr	r3, [sp, #16]
  403b42:	2b09      	cmp	r3, #9
  403b44:	d8e7      	bhi.n	403b16 <prvTimerTask+0xd2>
  403b46:	a201      	add	r2, pc, #4	; (adr r2, 403b4c <prvTimerTask+0x108>)
  403b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403b4c:	00403b75 	.word	0x00403b75
  403b50:	00403b75 	.word	0x00403b75
  403b54:	00403b75 	.word	0x00403b75
  403b58:	00403b17 	.word	0x00403b17
  403b5c:	00403bc9 	.word	0x00403bc9
  403b60:	00403bf5 	.word	0x00403bf5
  403b64:	00403b75 	.word	0x00403b75
  403b68:	00403b75 	.word	0x00403b75
  403b6c:	00403b17 	.word	0x00403b17
  403b70:	00403bc9 	.word	0x00403bc9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403b74:	9c05      	ldr	r4, [sp, #20]
  403b76:	f8da 1018 	ldr.w	r1, [sl, #24]
  403b7a:	4623      	mov	r3, r4
  403b7c:	4602      	mov	r2, r0
  403b7e:	4421      	add	r1, r4
  403b80:	4650      	mov	r0, sl
  403b82:	4c2d      	ldr	r4, [pc, #180]	; (403c38 <prvTimerTask+0x1f4>)
  403b84:	47a0      	blx	r4
  403b86:	2801      	cmp	r0, #1
  403b88:	d1bc      	bne.n	403b04 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403b8a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403b8e:	4650      	mov	r0, sl
  403b90:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403b92:	f8da 301c 	ldr.w	r3, [sl, #28]
  403b96:	2b01      	cmp	r3, #1
  403b98:	d1b4      	bne.n	403b04 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403b9a:	f8da 2018 	ldr.w	r2, [sl, #24]
  403b9e:	2100      	movs	r1, #0
  403ba0:	9100      	str	r1, [sp, #0]
  403ba2:	460b      	mov	r3, r1
  403ba4:	9805      	ldr	r0, [sp, #20]
  403ba6:	4402      	add	r2, r0
  403ba8:	4650      	mov	r0, sl
  403baa:	4c24      	ldr	r4, [pc, #144]	; (403c3c <prvTimerTask+0x1f8>)
  403bac:	47a0      	blx	r4
							configASSERT( xResult );
  403bae:	2800      	cmp	r0, #0
  403bb0:	d1a8      	bne.n	403b04 <prvTimerTask+0xc0>
  403bb2:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bb6:	b672      	cpsid	i
  403bb8:	f383 8811 	msr	BASEPRI, r3
  403bbc:	f3bf 8f6f 	isb	sy
  403bc0:	f3bf 8f4f 	dsb	sy
  403bc4:	b662      	cpsie	i
  403bc6:	e7fe      	b.n	403bc6 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403bc8:	9905      	ldr	r1, [sp, #20]
  403bca:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403bce:	b131      	cbz	r1, 403bde <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403bd0:	4603      	mov	r3, r0
  403bd2:	4602      	mov	r2, r0
  403bd4:	4401      	add	r1, r0
  403bd6:	4650      	mov	r0, sl
  403bd8:	4c17      	ldr	r4, [pc, #92]	; (403c38 <prvTimerTask+0x1f4>)
  403bda:	47a0      	blx	r4
  403bdc:	e792      	b.n	403b04 <prvTimerTask+0xc0>
  403bde:	f04f 0380 	mov.w	r3, #128	; 0x80
  403be2:	b672      	cpsid	i
  403be4:	f383 8811 	msr	BASEPRI, r3
  403be8:	f3bf 8f6f 	isb	sy
  403bec:	f3bf 8f4f 	dsb	sy
  403bf0:	b662      	cpsie	i
  403bf2:	e7fe      	b.n	403bf2 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403bf4:	4650      	mov	r0, sl
  403bf6:	4b13      	ldr	r3, [pc, #76]	; (403c44 <prvTimerTask+0x200>)
  403bf8:	4798      	blx	r3
  403bfa:	e783      	b.n	403b04 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403bfc:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403bfe:	a804      	add	r0, sp, #16
  403c00:	4b09      	ldr	r3, [pc, #36]	; (403c28 <prvTimerTask+0x1e4>)
  403c02:	4798      	blx	r3
  403c04:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403c06:	9b04      	ldr	r3, [sp, #16]
  403c08:	2b00      	cmp	r3, #0
  403c0a:	f47f af78 	bne.w	403afe <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403c0e:	4b0e      	ldr	r3, [pc, #56]	; (403c48 <prvTimerTask+0x204>)
  403c10:	681b      	ldr	r3, [r3, #0]
  403c12:	681a      	ldr	r2, [r3, #0]
  403c14:	fab2 f282 	clz	r2, r2
  403c18:	0952      	lsrs	r2, r2, #5
  403c1a:	2400      	movs	r4, #0
  403c1c:	e72d      	b.n	403a7a <prvTimerTask+0x36>
  403c1e:	bf00      	nop
  403c20:	2040c724 	.word	0x2040c724
  403c24:	00402f6d 	.word	0x00402f6d
  403c28:	0040398d 	.word	0x0040398d
  403c2c:	2040c758 	.word	0x2040c758
  403c30:	00402bd1 	.word	0x00402bd1
  403c34:	004030d5 	.word	0x004030d5
  403c38:	004037f5 	.word	0x004037f5
  403c3c:	0040391d 	.word	0x0040391d
  403c40:	004029cd 	.word	0x004029cd
  403c44:	004023e1 	.word	0x004023e1
  403c48:	2040c728 	.word	0x2040c728
  403c4c:	e000ed04 	.word	0xe000ed04
  403c50:	00402031 	.word	0x00402031

00403c54 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403c54:	b5f0      	push	{r4, r5, r6, r7, lr}
  403c56:	b083      	sub	sp, #12
  403c58:	4605      	mov	r5, r0
  403c5a:	460c      	mov	r4, r1
	uint32_t val = 0;
  403c5c:	2300      	movs	r3, #0
  403c5e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403c60:	4b2a      	ldr	r3, [pc, #168]	; (403d0c <usart_serial_getchar+0xb8>)
  403c62:	4298      	cmp	r0, r3
  403c64:	d013      	beq.n	403c8e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403c66:	4b2a      	ldr	r3, [pc, #168]	; (403d10 <usart_serial_getchar+0xbc>)
  403c68:	4298      	cmp	r0, r3
  403c6a:	d018      	beq.n	403c9e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403c6c:	4b29      	ldr	r3, [pc, #164]	; (403d14 <usart_serial_getchar+0xc0>)
  403c6e:	4298      	cmp	r0, r3
  403c70:	d01d      	beq.n	403cae <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403c72:	4b29      	ldr	r3, [pc, #164]	; (403d18 <usart_serial_getchar+0xc4>)
  403c74:	429d      	cmp	r5, r3
  403c76:	d022      	beq.n	403cbe <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403c78:	4b28      	ldr	r3, [pc, #160]	; (403d1c <usart_serial_getchar+0xc8>)
  403c7a:	429d      	cmp	r5, r3
  403c7c:	d027      	beq.n	403cce <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403c7e:	4b28      	ldr	r3, [pc, #160]	; (403d20 <usart_serial_getchar+0xcc>)
  403c80:	429d      	cmp	r5, r3
  403c82:	d02e      	beq.n	403ce2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403c84:	4b27      	ldr	r3, [pc, #156]	; (403d24 <usart_serial_getchar+0xd0>)
  403c86:	429d      	cmp	r5, r3
  403c88:	d035      	beq.n	403cf6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403c8a:	b003      	add	sp, #12
  403c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403c8e:	461f      	mov	r7, r3
  403c90:	4e25      	ldr	r6, [pc, #148]	; (403d28 <usart_serial_getchar+0xd4>)
  403c92:	4621      	mov	r1, r4
  403c94:	4638      	mov	r0, r7
  403c96:	47b0      	blx	r6
  403c98:	2800      	cmp	r0, #0
  403c9a:	d1fa      	bne.n	403c92 <usart_serial_getchar+0x3e>
  403c9c:	e7e9      	b.n	403c72 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403c9e:	461f      	mov	r7, r3
  403ca0:	4e21      	ldr	r6, [pc, #132]	; (403d28 <usart_serial_getchar+0xd4>)
  403ca2:	4621      	mov	r1, r4
  403ca4:	4638      	mov	r0, r7
  403ca6:	47b0      	blx	r6
  403ca8:	2800      	cmp	r0, #0
  403caa:	d1fa      	bne.n	403ca2 <usart_serial_getchar+0x4e>
  403cac:	e7e4      	b.n	403c78 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403cae:	461f      	mov	r7, r3
  403cb0:	4e1d      	ldr	r6, [pc, #116]	; (403d28 <usart_serial_getchar+0xd4>)
  403cb2:	4621      	mov	r1, r4
  403cb4:	4638      	mov	r0, r7
  403cb6:	47b0      	blx	r6
  403cb8:	2800      	cmp	r0, #0
  403cba:	d1fa      	bne.n	403cb2 <usart_serial_getchar+0x5e>
  403cbc:	e7df      	b.n	403c7e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403cbe:	461f      	mov	r7, r3
  403cc0:	4e19      	ldr	r6, [pc, #100]	; (403d28 <usart_serial_getchar+0xd4>)
  403cc2:	4621      	mov	r1, r4
  403cc4:	4638      	mov	r0, r7
  403cc6:	47b0      	blx	r6
  403cc8:	2800      	cmp	r0, #0
  403cca:	d1fa      	bne.n	403cc2 <usart_serial_getchar+0x6e>
  403ccc:	e7da      	b.n	403c84 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403cce:	461e      	mov	r6, r3
  403cd0:	4d16      	ldr	r5, [pc, #88]	; (403d2c <usart_serial_getchar+0xd8>)
  403cd2:	a901      	add	r1, sp, #4
  403cd4:	4630      	mov	r0, r6
  403cd6:	47a8      	blx	r5
  403cd8:	2800      	cmp	r0, #0
  403cda:	d1fa      	bne.n	403cd2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403cdc:	9b01      	ldr	r3, [sp, #4]
  403cde:	7023      	strb	r3, [r4, #0]
  403ce0:	e7d3      	b.n	403c8a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403ce2:	461e      	mov	r6, r3
  403ce4:	4d11      	ldr	r5, [pc, #68]	; (403d2c <usart_serial_getchar+0xd8>)
  403ce6:	a901      	add	r1, sp, #4
  403ce8:	4630      	mov	r0, r6
  403cea:	47a8      	blx	r5
  403cec:	2800      	cmp	r0, #0
  403cee:	d1fa      	bne.n	403ce6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403cf0:	9b01      	ldr	r3, [sp, #4]
  403cf2:	7023      	strb	r3, [r4, #0]
  403cf4:	e7c9      	b.n	403c8a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403cf6:	461e      	mov	r6, r3
  403cf8:	4d0c      	ldr	r5, [pc, #48]	; (403d2c <usart_serial_getchar+0xd8>)
  403cfa:	a901      	add	r1, sp, #4
  403cfc:	4630      	mov	r0, r6
  403cfe:	47a8      	blx	r5
  403d00:	2800      	cmp	r0, #0
  403d02:	d1fa      	bne.n	403cfa <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403d04:	9b01      	ldr	r3, [sp, #4]
  403d06:	7023      	strb	r3, [r4, #0]
}
  403d08:	e7bf      	b.n	403c8a <usart_serial_getchar+0x36>
  403d0a:	bf00      	nop
  403d0c:	400e0800 	.word	0x400e0800
  403d10:	400e0a00 	.word	0x400e0a00
  403d14:	400e1a00 	.word	0x400e1a00
  403d18:	400e1c00 	.word	0x400e1c00
  403d1c:	40024000 	.word	0x40024000
  403d20:	40028000 	.word	0x40028000
  403d24:	4002c000 	.word	0x4002c000
  403d28:	00401bf3 	.word	0x00401bf3
  403d2c:	00401cff 	.word	0x00401cff

00403d30 <usart_serial_putchar>:
{
  403d30:	b570      	push	{r4, r5, r6, lr}
  403d32:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403d34:	4b2a      	ldr	r3, [pc, #168]	; (403de0 <usart_serial_putchar+0xb0>)
  403d36:	4298      	cmp	r0, r3
  403d38:	d013      	beq.n	403d62 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403d3a:	4b2a      	ldr	r3, [pc, #168]	; (403de4 <usart_serial_putchar+0xb4>)
  403d3c:	4298      	cmp	r0, r3
  403d3e:	d019      	beq.n	403d74 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403d40:	4b29      	ldr	r3, [pc, #164]	; (403de8 <usart_serial_putchar+0xb8>)
  403d42:	4298      	cmp	r0, r3
  403d44:	d01f      	beq.n	403d86 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403d46:	4b29      	ldr	r3, [pc, #164]	; (403dec <usart_serial_putchar+0xbc>)
  403d48:	4298      	cmp	r0, r3
  403d4a:	d025      	beq.n	403d98 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403d4c:	4b28      	ldr	r3, [pc, #160]	; (403df0 <usart_serial_putchar+0xc0>)
  403d4e:	4298      	cmp	r0, r3
  403d50:	d02b      	beq.n	403daa <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403d52:	4b28      	ldr	r3, [pc, #160]	; (403df4 <usart_serial_putchar+0xc4>)
  403d54:	4298      	cmp	r0, r3
  403d56:	d031      	beq.n	403dbc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403d58:	4b27      	ldr	r3, [pc, #156]	; (403df8 <usart_serial_putchar+0xc8>)
  403d5a:	4298      	cmp	r0, r3
  403d5c:	d037      	beq.n	403dce <usart_serial_putchar+0x9e>
	return 0;
  403d5e:	2000      	movs	r0, #0
}
  403d60:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d62:	461e      	mov	r6, r3
  403d64:	4d25      	ldr	r5, [pc, #148]	; (403dfc <usart_serial_putchar+0xcc>)
  403d66:	4621      	mov	r1, r4
  403d68:	4630      	mov	r0, r6
  403d6a:	47a8      	blx	r5
  403d6c:	2800      	cmp	r0, #0
  403d6e:	d1fa      	bne.n	403d66 <usart_serial_putchar+0x36>
		return 1;
  403d70:	2001      	movs	r0, #1
  403d72:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d74:	461e      	mov	r6, r3
  403d76:	4d21      	ldr	r5, [pc, #132]	; (403dfc <usart_serial_putchar+0xcc>)
  403d78:	4621      	mov	r1, r4
  403d7a:	4630      	mov	r0, r6
  403d7c:	47a8      	blx	r5
  403d7e:	2800      	cmp	r0, #0
  403d80:	d1fa      	bne.n	403d78 <usart_serial_putchar+0x48>
		return 1;
  403d82:	2001      	movs	r0, #1
  403d84:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d86:	461e      	mov	r6, r3
  403d88:	4d1c      	ldr	r5, [pc, #112]	; (403dfc <usart_serial_putchar+0xcc>)
  403d8a:	4621      	mov	r1, r4
  403d8c:	4630      	mov	r0, r6
  403d8e:	47a8      	blx	r5
  403d90:	2800      	cmp	r0, #0
  403d92:	d1fa      	bne.n	403d8a <usart_serial_putchar+0x5a>
		return 1;
  403d94:	2001      	movs	r0, #1
  403d96:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d98:	461e      	mov	r6, r3
  403d9a:	4d18      	ldr	r5, [pc, #96]	; (403dfc <usart_serial_putchar+0xcc>)
  403d9c:	4621      	mov	r1, r4
  403d9e:	4630      	mov	r0, r6
  403da0:	47a8      	blx	r5
  403da2:	2800      	cmp	r0, #0
  403da4:	d1fa      	bne.n	403d9c <usart_serial_putchar+0x6c>
		return 1;
  403da6:	2001      	movs	r0, #1
  403da8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403daa:	461e      	mov	r6, r3
  403dac:	4d14      	ldr	r5, [pc, #80]	; (403e00 <usart_serial_putchar+0xd0>)
  403dae:	4621      	mov	r1, r4
  403db0:	4630      	mov	r0, r6
  403db2:	47a8      	blx	r5
  403db4:	2800      	cmp	r0, #0
  403db6:	d1fa      	bne.n	403dae <usart_serial_putchar+0x7e>
		return 1;
  403db8:	2001      	movs	r0, #1
  403dba:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403dbc:	461e      	mov	r6, r3
  403dbe:	4d10      	ldr	r5, [pc, #64]	; (403e00 <usart_serial_putchar+0xd0>)
  403dc0:	4621      	mov	r1, r4
  403dc2:	4630      	mov	r0, r6
  403dc4:	47a8      	blx	r5
  403dc6:	2800      	cmp	r0, #0
  403dc8:	d1fa      	bne.n	403dc0 <usart_serial_putchar+0x90>
		return 1;
  403dca:	2001      	movs	r0, #1
  403dcc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403dce:	461e      	mov	r6, r3
  403dd0:	4d0b      	ldr	r5, [pc, #44]	; (403e00 <usart_serial_putchar+0xd0>)
  403dd2:	4621      	mov	r1, r4
  403dd4:	4630      	mov	r0, r6
  403dd6:	47a8      	blx	r5
  403dd8:	2800      	cmp	r0, #0
  403dda:	d1fa      	bne.n	403dd2 <usart_serial_putchar+0xa2>
		return 1;
  403ddc:	2001      	movs	r0, #1
  403dde:	bd70      	pop	{r4, r5, r6, pc}
  403de0:	400e0800 	.word	0x400e0800
  403de4:	400e0a00 	.word	0x400e0a00
  403de8:	400e1a00 	.word	0x400e1a00
  403dec:	400e1c00 	.word	0x400e1c00
  403df0:	40024000 	.word	0x40024000
  403df4:	40028000 	.word	0x40028000
  403df8:	4002c000 	.word	0x4002c000
  403dfc:	00401be1 	.word	0x00401be1
  403e00:	00401ce9 	.word	0x00401ce9

00403e04 <vApplicationStackOverflowHook>:
/**
* \brief Called if stack overflow during execution
*/
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
signed char *pcTaskName)
{
  403e04:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403e06:	460a      	mov	r2, r1
  403e08:	4601      	mov	r1, r0
  403e0a:	4802      	ldr	r0, [pc, #8]	; (403e14 <vApplicationStackOverflowHook+0x10>)
  403e0c:	4b02      	ldr	r3, [pc, #8]	; (403e18 <vApplicationStackOverflowHook+0x14>)
  403e0e:	4798      	blx	r3
  403e10:	e7fe      	b.n	403e10 <vApplicationStackOverflowHook+0xc>
  403e12:	bf00      	nop
  403e14:	00408be0 	.word	0x00408be0
  403e18:	00404cc9 	.word	0x00404cc9

00403e1c <vApplicationTickHook>:

/**
* \brief This function is called by FreeRTOS each tick
*/
extern void vApplicationTickHook(void)
{
  403e1c:	4770      	bx	lr

00403e1e <vApplicationMallocFailedHook>:
  403e1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e22:	b672      	cpsid	i
  403e24:	f383 8811 	msr	BASEPRI, r3
  403e28:	f3bf 8f6f 	isb	sy
  403e2c:	f3bf 8f4f 	dsb	sy
  403e30:	b662      	cpsie	i
  403e32:	e7fe      	b.n	403e32 <vApplicationMallocFailedHook+0x14>

00403e34 <draw_screen>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void draw_screen(void) {
  403e34:	b510      	push	{r4, lr}
  ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  403e36:	4806      	ldr	r0, [pc, #24]	; (403e50 <draw_screen+0x1c>)
  403e38:	4b06      	ldr	r3, [pc, #24]	; (403e54 <draw_screen+0x20>)
  403e3a:	4798      	blx	r3
  ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  403e3c:	f240 13df 	movw	r3, #479	; 0x1df
  403e40:	f240 123f 	movw	r2, #319	; 0x13f
  403e44:	2100      	movs	r1, #0
  403e46:	4608      	mov	r0, r1
  403e48:	4c03      	ldr	r4, [pc, #12]	; (403e58 <draw_screen+0x24>)
  403e4a:	47a0      	blx	r4
  403e4c:	bd10      	pop	{r4, pc}
  403e4e:	bf00      	nop
  403e50:	00fcfcfc 	.word	0x00fcfcfc
  403e54:	00400fc9 	.word	0x00400fc9
  403e58:	00401219 	.word	0x00401219

00403e5c <mxt_handler>:
    p++;
  }
}

void mxt_handler(struct mxt_device *device, uint *x, uint *y)
{
  403e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e60:	b084      	sub	sp, #16
  403e62:	4605      	mov	r5, r0
  403e64:	4689      	mov	r9, r1
  403e66:	4690      	mov	r8, r2

  /* Temporary touch event data struct */
  struct mxt_touch_event touch_event;
  
  /* first touch only */
  uint first = 0;
  403e68:	f04f 0a00 	mov.w	sl, #0
  uint8_t i = 0; /* Iterator */
  403e6c:	4654      	mov	r4, sl
  /* Collect touch events and put the data in a string,
  * maximum 2 events at the time */
  do {

    /* Read next next touch event in the queue, discard if read fails */
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403e6e:	4f15      	ldr	r7, [pc, #84]	; (403ec4 <mxt_handler+0x68>)
    
    i++;

    /* Check if there is still messages in the queue and
    * if we have reached the maximum numbers of events */
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403e70:	4e15      	ldr	r6, [pc, #84]	; (403ec8 <mxt_handler+0x6c>)
  403e72:	e008      	b.n	403e86 <mxt_handler+0x2a>
    i++;
  403e74:	3401      	adds	r4, #1
  403e76:	b2e4      	uxtb	r4, r4
  403e78:	f04f 0a01 	mov.w	sl, #1
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403e7c:	4628      	mov	r0, r5
  403e7e:	47b0      	blx	r6
  403e80:	2c09      	cmp	r4, #9
  403e82:	d81b      	bhi.n	403ebc <mxt_handler+0x60>
  403e84:	b1d0      	cbz	r0, 403ebc <mxt_handler+0x60>
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403e86:	a901      	add	r1, sp, #4
  403e88:	4628      	mov	r0, r5
  403e8a:	47b8      	blx	r7
  403e8c:	2800      	cmp	r0, #0
  403e8e:	d1f5      	bne.n	403e7c <mxt_handler+0x20>
    if(first == 0 ){
  403e90:	f1ba 0f00 	cmp.w	sl, #0
  403e94:	d1ee      	bne.n	403e74 <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  403e96:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  403e9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403e9e:	f3c3 1393 	ubfx	r3, r3, #6, #20
  403ea2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
      *x = convert_axis_system_x(touch_event.y);
  403ea6:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  403eaa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  return ILI9488_LCD_HEIGHT*touch_x/4096;
  403eae:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  403eb2:	f3c3 13d3 	ubfx	r3, r3, #7, #20
      *y = convert_axis_system_y(touch_event.x);
  403eb6:	f8c8 3000 	str.w	r3, [r8]
  403eba:	e7db      	b.n	403e74 <mxt_handler+0x18>
}
  403ebc:	b004      	add	sp, #16
  403ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ec2:	bf00      	nop
  403ec4:	004007e9 	.word	0x004007e9
  403ec8:	00400779 	.word	0x00400779

00403ecc <task_mxt>:

/************************************************************************/
/* tasks                                                                */
/************************************************************************/

void task_mxt(void){
  403ecc:	b580      	push	{r7, lr}
  403ece:	b08a      	sub	sp, #40	; 0x28
  
  struct mxt_device device; /* Device data container */
  mxt_init(&device);       	/* Initialize the mXT touch device */
  403ed0:	a802      	add	r0, sp, #8
  403ed2:	4b13      	ldr	r3, [pc, #76]	; (403f20 <task_mxt+0x54>)
  403ed4:	4798      	blx	r3
  touchData touch;          /* touch queue data type*/
  
  while (true) {
    /* Check for any pending messages and run message handler if any
    * message is found in the queue */
    if (mxt_is_message_pending(&device)) {
  403ed6:	4d13      	ldr	r5, [pc, #76]	; (403f24 <task_mxt+0x58>)
      mxt_handler(&device, &touch.x, &touch.y);
  403ed8:	4e13      	ldr	r6, [pc, #76]	; (403f28 <task_mxt+0x5c>)
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  403eda:	f8df 8058 	ldr.w	r8, [pc, #88]	; 403f34 <task_mxt+0x68>
      vTaskDelay(200);
  403ede:	4c13      	ldr	r4, [pc, #76]	; (403f2c <task_mxt+0x60>)
  403ee0:	e00c      	b.n	403efc <task_mxt+0x30>
      
      // limpa touch
      while (mxt_is_message_pending(&device)){
        mxt_handler(&device, NULL, NULL);
  403ee2:	2200      	movs	r2, #0
  403ee4:	4611      	mov	r1, r2
  403ee6:	a802      	add	r0, sp, #8
  403ee8:	47b0      	blx	r6
        vTaskDelay(50);
  403eea:	2032      	movs	r0, #50	; 0x32
  403eec:	47a0      	blx	r4
      while (mxt_is_message_pending(&device)){
  403eee:	a802      	add	r0, sp, #8
  403ef0:	47a8      	blx	r5
  403ef2:	2800      	cmp	r0, #0
  403ef4:	d1f5      	bne.n	403ee2 <task_mxt+0x16>
      }
    }
    
    vTaskDelay(300);
  403ef6:	f44f 7096 	mov.w	r0, #300	; 0x12c
  403efa:	47a0      	blx	r4
    if (mxt_is_message_pending(&device)) {
  403efc:	a802      	add	r0, sp, #8
  403efe:	47a8      	blx	r5
  403f00:	2800      	cmp	r0, #0
  403f02:	d0f8      	beq.n	403ef6 <task_mxt+0x2a>
      mxt_handler(&device, &touch.x, &touch.y);
  403f04:	aa01      	add	r2, sp, #4
  403f06:	4669      	mov	r1, sp
  403f08:	a802      	add	r0, sp, #8
  403f0a:	47b0      	blx	r6
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  403f0c:	2300      	movs	r3, #0
  403f0e:	461a      	mov	r2, r3
  403f10:	4669      	mov	r1, sp
  403f12:	f8d8 0000 	ldr.w	r0, [r8]
  403f16:	4f06      	ldr	r7, [pc, #24]	; (403f30 <task_mxt+0x64>)
  403f18:	47b8      	blx	r7
      vTaskDelay(200);
  403f1a:	20c8      	movs	r0, #200	; 0xc8
  403f1c:	47a0      	blx	r4
      while (mxt_is_message_pending(&device)){
  403f1e:	e7e6      	b.n	403eee <task_mxt+0x22>
  403f20:	00400285 	.word	0x00400285
  403f24:	00400779 	.word	0x00400779
  403f28:	00403e5d 	.word	0x00403e5d
  403f2c:	004031f5 	.word	0x004031f5
  403f30:	004026e9 	.word	0x004026e9
  403f34:	2040c870 	.word	0x2040c870

00403f38 <draw_button_new>:
  }
}



void draw_button_new(t_but but){
  403f38:	b084      	sub	sp, #16
  403f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403f3c:	ac06      	add	r4, sp, #24
  403f3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  403f42:	4604      	mov	r4, r0
  403f44:	9d07      	ldr	r5, [sp, #28]
  403f46:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  403f48:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	uint32_t color;
	if(but.status)
  403f4a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  403f4e:	b983      	cbnz	r3, 403f72 <draw_button_new+0x3a>
	color = but.colorOn;
	else
	color = but.colorOff;
  403f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34

	ili9488_set_foreground_color(COLOR_CONVERT(color));
  403f52:	4809      	ldr	r0, [pc, #36]	; (403f78 <draw_button_new+0x40>)
  403f54:	4018      	ands	r0, r3
  403f56:	4b09      	ldr	r3, [pc, #36]	; (403f7c <draw_button_new+0x44>)
  403f58:	4798      	blx	r3
	ili9488_draw_filled_rectangle(but.x-but.width/2, but.y-but.height/2,
  403f5a:	0860      	lsrs	r0, r4, #1
  403f5c:	0869      	lsrs	r1, r5, #1
  403f5e:	19cb      	adds	r3, r1, r7
  403f60:	1982      	adds	r2, r0, r6
  403f62:	1a79      	subs	r1, r7, r1
  403f64:	1a30      	subs	r0, r6, r0
  403f66:	4c06      	ldr	r4, [pc, #24]	; (403f80 <draw_button_new+0x48>)
  403f68:	47a0      	blx	r4
	but.x+but.width/2, but.y+but.height/2);
}
  403f6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  403f6e:	b004      	add	sp, #16
  403f70:	4770      	bx	lr
	color = but.colorOn;
  403f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403f74:	e7ed      	b.n	403f52 <draw_button_new+0x1a>
  403f76:	bf00      	nop
  403f78:	00fcfcfc 	.word	0x00fcfcfc
  403f7c:	00400fc9 	.word	0x00400fc9
  403f80:	00401219 	.word	0x00401219

00403f84 <but0_callback>:

void but0_callback(t_but *b){
  403f84:	b570      	push	{r4, r5, r6, lr}
  403f86:	b086      	sub	sp, #24
  403f88:	4604      	mov	r4, r0
	b->status = !b->status;
  403f8a:	7b03      	ldrb	r3, [r0, #12]
  403f8c:	fab3 f383 	clz	r3, r3
  403f90:	095b      	lsrs	r3, r3, #5
  403f92:	7303      	strb	r3, [r0, #12]

	draw_button_new(*b);
  403f94:	466d      	mov	r5, sp
  403f96:	f100 0610 	add.w	r6, r0, #16
  403f9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403f9e:	e896 0003 	ldmia.w	r6, {r0, r1}
  403fa2:	e885 0003 	stmia.w	r5, {r0, r1}
  403fa6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  403faa:	4d0d      	ldr	r5, [pc, #52]	; (403fe0 <but0_callback+0x5c>)
  403fac:	47a8      	blx	r5
	ili9488_draw_pixmap(b->x, b->y, image1.width, image1.height, b->image_status ?  0 :  image1.data);
  403fae:	6963      	ldr	r3, [r4, #20]
  403fb0:	2b00      	cmp	r3, #0
  403fb2:	4b0c      	ldr	r3, [pc, #48]	; (403fe4 <but0_callback+0x60>)
  403fb4:	bf18      	it	ne
  403fb6:	2300      	movne	r3, #0
  403fb8:	9300      	str	r3, [sp, #0]
  403fba:	231a      	movs	r3, #26
  403fbc:	221c      	movs	r2, #28
  403fbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
  403fc0:	6a20      	ldr	r0, [r4, #32]
  403fc2:	4d09      	ldr	r5, [pc, #36]	; (403fe8 <but0_callback+0x64>)
  403fc4:	47a8      	blx	r5
	b->image_status = !b->image_status;
  403fc6:	6963      	ldr	r3, [r4, #20]
  403fc8:	fab3 f383 	clz	r3, r3
  403fcc:	095b      	lsrs	r3, r3, #5
  403fce:	6163      	str	r3, [r4, #20]
	but0 = !but0;
  403fd0:	4a06      	ldr	r2, [pc, #24]	; (403fec <but0_callback+0x68>)
  403fd2:	7813      	ldrb	r3, [r2, #0]
  403fd4:	fab3 f383 	clz	r3, r3
  403fd8:	095b      	lsrs	r3, r3, #5
  403fda:	7013      	strb	r3, [r2, #0]
}
  403fdc:	b006      	add	sp, #24
  403fde:	bd70      	pop	{r4, r5, r6, pc}
  403fe0:	00403f39 	.word	0x00403f39
  403fe4:	004081f4 	.word	0x004081f4
  403fe8:	004012d5 	.word	0x004012d5
  403fec:	2040c75c 	.word	0x2040c75c

00403ff0 <but1_callback>:

void but1_callback(t_but *b){
  403ff0:	b570      	push	{r4, r5, r6, lr}
  403ff2:	b086      	sub	sp, #24
  403ff4:	4604      	mov	r4, r0
	b->status = !b->status;
  403ff6:	7b03      	ldrb	r3, [r0, #12]
  403ff8:	fab3 f383 	clz	r3, r3
  403ffc:	095b      	lsrs	r3, r3, #5
  403ffe:	7303      	strb	r3, [r0, #12]
	draw_button_new(*b);
  404000:	466d      	mov	r5, sp
  404002:	f100 0610 	add.w	r6, r0, #16
  404006:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  404008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40400a:	e896 0003 	ldmia.w	r6, {r0, r1}
  40400e:	e885 0003 	stmia.w	r5, {r0, r1}
  404012:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  404016:	4d0d      	ldr	r5, [pc, #52]	; (40404c <but1_callback+0x5c>)
  404018:	47a8      	blx	r5
	ili9488_draw_pixmap(b->x, b->y, image2.width, image2.height, b->image_status ? 0 : image2.data);
  40401a:	6963      	ldr	r3, [r4, #20]
  40401c:	2b00      	cmp	r3, #0
  40401e:	4b0c      	ldr	r3, [pc, #48]	; (404050 <but1_callback+0x60>)
  404020:	bf18      	it	ne
  404022:	2300      	movne	r3, #0
  404024:	9300      	str	r3, [sp, #0]
  404026:	2315      	movs	r3, #21
  404028:	2214      	movs	r2, #20
  40402a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40402c:	6a20      	ldr	r0, [r4, #32]
  40402e:	4d09      	ldr	r5, [pc, #36]	; (404054 <but1_callback+0x64>)
  404030:	47a8      	blx	r5
	b->image_status = !b->image_status;
  404032:	6963      	ldr	r3, [r4, #20]
  404034:	fab3 f383 	clz	r3, r3
  404038:	095b      	lsrs	r3, r3, #5
  40403a:	6163      	str	r3, [r4, #20]
	but1 = !but1;
  40403c:	4a06      	ldr	r2, [pc, #24]	; (404058 <but1_callback+0x68>)
  40403e:	7813      	ldrb	r3, [r2, #0]
  404040:	fab3 f383 	clz	r3, r3
  404044:	095b      	lsrs	r3, r3, #5
  404046:	7013      	strb	r3, [r2, #0]
}
  404048:	b006      	add	sp, #24
  40404a:	bd70      	pop	{r4, r5, r6, pc}
  40404c:	00403f39 	.word	0x00403f39
  404050:	00407d08 	.word	0x00407d08
  404054:	004012d5 	.word	0x004012d5
  404058:	2040c75d 	.word	0x2040c75d

0040405c <but2_callback>:

void but2_callback(t_but *b){
  40405c:	b570      	push	{r4, r5, r6, lr}
  40405e:	b086      	sub	sp, #24
  404060:	4604      	mov	r4, r0
	b->status = !b->status;
  404062:	7b03      	ldrb	r3, [r0, #12]
  404064:	fab3 f383 	clz	r3, r3
  404068:	095b      	lsrs	r3, r3, #5
  40406a:	7303      	strb	r3, [r0, #12]
	draw_button_new(*b);
  40406c:	466d      	mov	r5, sp
  40406e:	f100 0610 	add.w	r6, r0, #16
  404072:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  404074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  404076:	e896 0003 	ldmia.w	r6, {r0, r1}
  40407a:	e885 0003 	stmia.w	r5, {r0, r1}
  40407e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  404082:	4d0d      	ldr	r5, [pc, #52]	; (4040b8 <but2_callback+0x5c>)
  404084:	47a8      	blx	r5
	ili9488_draw_pixmap(b->x, b->y, image3.width, image3.height, b->image_status ? 0 : image3.data);
  404086:	6963      	ldr	r3, [r4, #20]
  404088:	2b00      	cmp	r3, #0
  40408a:	4b0c      	ldr	r3, [pc, #48]	; (4040bc <but2_callback+0x60>)
  40408c:	bf18      	it	ne
  40408e:	2300      	movne	r3, #0
  404090:	9300      	str	r3, [sp, #0]
  404092:	230a      	movs	r3, #10
  404094:	461a      	mov	r2, r3
  404096:	6a61      	ldr	r1, [r4, #36]	; 0x24
  404098:	6a20      	ldr	r0, [r4, #32]
  40409a:	4d09      	ldr	r5, [pc, #36]	; (4040c0 <but2_callback+0x64>)
  40409c:	47a8      	blx	r5
	b->image_status = !b->image_status;
  40409e:	6963      	ldr	r3, [r4, #20]
  4040a0:	fab3 f383 	clz	r3, r3
  4040a4:	095b      	lsrs	r3, r3, #5
  4040a6:	6163      	str	r3, [r4, #20]
	but2 = !but2;
  4040a8:	4a06      	ldr	r2, [pc, #24]	; (4040c4 <but2_callback+0x68>)
  4040aa:	7813      	ldrb	r3, [r2, #0]
  4040ac:	fab3 f383 	clz	r3, r3
  4040b0:	095b      	lsrs	r3, r3, #5
  4040b2:	7013      	strb	r3, [r2, #0]
}
  4040b4:	b006      	add	sp, #24
  4040b6:	bd70      	pop	{r4, r5, r6, pc}
  4040b8:	00403f39 	.word	0x00403f39
  4040bc:	00408a7c 	.word	0x00408a7c
  4040c0:	004012d5 	.word	0x004012d5
  4040c4:	2040c75e 	.word	0x2040c75e

004040c8 <process_touch>:



int process_touch(t_but botoes[], touchData touch, uint32_t n){
  4040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4040cc:	b087      	sub	sp, #28
  4040ce:	ac06      	add	r4, sp, #24
  4040d0:	e904 0006 	stmdb	r4, {r1, r2}
  4040d4:	9f04      	ldr	r7, [sp, #16]
  4040d6:	9a05      	ldr	r2, [sp, #20]
  4040d8:	9203      	str	r2, [sp, #12]
	for(int i = 0; i < n; i++){
  4040da:	2b00      	cmp	r3, #0
  4040dc:	d03d      	beq.n	40415a <process_touch+0x92>
  4040de:	469a      	mov	sl, r3
  4040e0:	4604      	mov	r4, r0
  4040e2:	2500      	movs	r5, #0
		if(i == 0){
			if((touch.x > x && touch.x <= x + width) && touch.y <= height){
				return i;
			}
		} else {
			if((touch.x > x && touch.x <= x +  width) && (touch.y > 1.5* height && touch.y <= 2*i*height)){
  4040e4:	f8df b080 	ldr.w	fp, [pc, #128]	; 404168 <process_touch+0xa0>
  4040e8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 40416c <process_touch+0xa4>
  4040ec:	f8df 8080 	ldr.w	r8, [pc, #128]	; 404170 <process_touch+0xa8>
  4040f0:	e00b      	b.n	40410a <process_touch+0x42>
			if((touch.x > x && touch.x <= x + width) && touch.y <= height){
  4040f2:	4297      	cmp	r7, r2
  4040f4:	d905      	bls.n	404102 <process_touch+0x3a>
  4040f6:	4413      	add	r3, r2
  4040f8:	429f      	cmp	r7, r3
  4040fa:	d802      	bhi.n	404102 <process_touch+0x3a>
  4040fc:	9b03      	ldr	r3, [sp, #12]
  4040fe:	429e      	cmp	r6, r3
  404100:	d227      	bcs.n	404152 <process_touch+0x8a>
	for(int i = 0; i < n; i++){
  404102:	3501      	adds	r5, #1
  404104:	3428      	adds	r4, #40	; 0x28
  404106:	4555      	cmp	r5, sl
  404108:	d021      	beq.n	40414e <process_touch+0x86>
		int height = botoes[i].height;
  40410a:	6866      	ldr	r6, [r4, #4]
		int width = botoes[i].width;
  40410c:	6823      	ldr	r3, [r4, #0]
		int x = botoes[i].x;
  40410e:	6a22      	ldr	r2, [r4, #32]
		if(i == 0){
  404110:	2d00      	cmp	r5, #0
  404112:	d0ee      	beq.n	4040f2 <process_touch+0x2a>
			if((touch.x > x && touch.x <= x +  width) && (touch.y > 1.5* height && touch.y <= 2*i*height)){
  404114:	4297      	cmp	r7, r2
  404116:	d9f4      	bls.n	404102 <process_touch+0x3a>
  404118:	4413      	add	r3, r2
  40411a:	429f      	cmp	r7, r3
  40411c:	d8f1      	bhi.n	404102 <process_touch+0x3a>
  40411e:	9803      	ldr	r0, [sp, #12]
  404120:	47d8      	blx	fp
  404122:	e9cd 0100 	strd	r0, r1, [sp]
  404126:	4630      	mov	r0, r6
  404128:	4b0d      	ldr	r3, [pc, #52]	; (404160 <process_touch+0x98>)
  40412a:	4798      	blx	r3
  40412c:	2200      	movs	r2, #0
  40412e:	4b0d      	ldr	r3, [pc, #52]	; (404164 <process_touch+0x9c>)
  404130:	47c8      	blx	r9
  404132:	4602      	mov	r2, r0
  404134:	460b      	mov	r3, r1
  404136:	e9dd 0100 	ldrd	r0, r1, [sp]
  40413a:	47c0      	blx	r8
  40413c:	2800      	cmp	r0, #0
  40413e:	d0e0      	beq.n	404102 <process_touch+0x3a>
  404140:	006b      	lsls	r3, r5, #1
  404142:	fb06 f603 	mul.w	r6, r6, r3
  404146:	9b03      	ldr	r3, [sp, #12]
  404148:	42b3      	cmp	r3, r6
  40414a:	d8da      	bhi.n	404102 <process_touch+0x3a>
  40414c:	e001      	b.n	404152 <process_touch+0x8a>
				 return i;
			}		
		}
		}
	return -1;
  40414e:	f04f 35ff 	mov.w	r5, #4294967295
}
  404152:	4628      	mov	r0, r5
  404154:	b007      	add	sp, #28
  404156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return -1;
  40415a:	f04f 35ff 	mov.w	r5, #4294967295
  40415e:	e7f8      	b.n	404152 <process_touch+0x8a>
  404160:	00404679 	.word	0x00404679
  404164:	3ff80000 	.word	0x3ff80000
  404168:	00404659 	.word	0x00404659
  40416c:	00404745 	.word	0x00404745
  404170:	00404c65 	.word	0x00404c65

00404174 <task_lcd>:


void task_lcd(void){
  404174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404178:	b0c4      	sub	sp, #272	; 0x110
	xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  40417a:	2200      	movs	r2, #0
  40417c:	2108      	movs	r1, #8
  40417e:	200a      	movs	r0, #10
  404180:	4b46      	ldr	r3, [pc, #280]	; (40429c <task_lcd+0x128>)
  404182:	4798      	blx	r3
  404184:	4b46      	ldr	r3, [pc, #280]	; (4042a0 <task_lcd+0x12c>)
  404186:	6018      	str	r0, [r3, #0]
  g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  404188:	4846      	ldr	r0, [pc, #280]	; (4042a4 <task_lcd+0x130>)
  40418a:	f44f 73a0 	mov.w	r3, #320	; 0x140
  40418e:	6003      	str	r3, [r0, #0]
  g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  404190:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  404194:	6043      	str	r3, [r0, #4]
  g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  404196:	4b44      	ldr	r3, [pc, #272]	; (4042a8 <task_lcd+0x134>)
  404198:	6083      	str	r3, [r0, #8]
  g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  40419a:	60c3      	str	r3, [r0, #12]
  ili9488_init(&g_ili9488_display_opt);
  40419c:	4b43      	ldr	r3, [pc, #268]	; (4042ac <task_lcd+0x138>)
  40419e:	4798      	blx	r3
	configure_lcd();
	draw_screen();
  4041a0:	4b43      	ldr	r3, [pc, #268]	; (4042b0 <task_lcd+0x13c>)
  4041a2:	4798      	blx	r3
	
	t_but but0 = {.width = 120, .height = 75, .border = 2, .status= 1, .callback = but0_callback, .image_status = 1,
  4041a4:	4c43      	ldr	r4, [pc, #268]	; (4042b4 <task_lcd+0x140>)
  4041a6:	ad3a      	add	r5, sp, #232	; 0xe8
  4041a8:	4626      	mov	r6, r4
  4041aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4041ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4041ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4041b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4041b2:	e896 0003 	ldmia.w	r6, {r0, r1}
  4041b6:	e885 0003 	stmia.w	r5, {r0, r1}
		.colorOn = COLOR_TOMATO, .colorOff = COLOR_BLACK,
	.x = ILI9488_LCD_WIDTH/2, .y = 40 };
	
	t_but but1 = {.width = 120, .height = 75, .border = 2, .status= 1, .callback = but1_callback, .image_status = 1,
  4041ba:	ad30      	add	r5, sp, #192	; 0xc0
  4041bc:	f104 0628 	add.w	r6, r4, #40	; 0x28
  4041c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4041c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4041c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4041c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4041c8:	e896 0003 	ldmia.w	r6, {r0, r1}
  4041cc:	e885 0003 	stmia.w	r5, {r0, r1}
		.colorOn = COLOR_CYAN, .colorOff = COLOR_BLACK,
	.x = ILI9488_LCD_WIDTH/2, .y = 140 };
	
	t_but but2 = {.width = 120, .height = 75, .border = 2, .status= 1, .callback = but2_callback, .image_status = 1,
  4041d0:	ad26      	add	r5, sp, #152	; 0x98
  4041d2:	3450      	adds	r4, #80	; 0x50
  4041d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4041d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4041d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4041da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4041dc:	e894 0003 	ldmia.w	r4, {r0, r1}
  4041e0:	e885 0003 	stmia.w	r5, {r0, r1}
		.colorOn = COLOR_SIENNA, .colorOff = COLOR_BLACK,
	.x = ILI9488_LCD_WIDTH/2, .y = 240 };
	
	t_but botoes[] = {but0, but1, but2};
  4041e4:	ac08      	add	r4, sp, #32
  4041e6:	ad3a      	add	r5, sp, #232	; 0xe8
  4041e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4041ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4041ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4041ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4041f0:	e895 0003 	ldmia.w	r5, {r0, r1}
  4041f4:	e884 0003 	stmia.w	r4, {r0, r1}
  4041f8:	ac12      	add	r4, sp, #72	; 0x48
  4041fa:	ad30      	add	r5, sp, #192	; 0xc0
  4041fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4041fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404204:	e895 0003 	ldmia.w	r5, {r0, r1}
  404208:	e884 0003 	stmia.w	r4, {r0, r1}
  40420c:	ac1c      	add	r4, sp, #112	; 0x70
  40420e:	ad26      	add	r5, sp, #152	; 0x98
  404210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404218:	e895 0003 	ldmia.w	r5, {r0, r1}
  40421c:	e884 0003 	stmia.w	r4, {r0, r1}
	for(int i = 0; i < 3; i++){
  404220:	2600      	movs	r6, #0
		draw_button_new(botoes[i]);
  404222:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4042c8 <task_lcd+0x154>
  404226:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  40422a:	ab44      	add	r3, sp, #272	; 0x110
  40422c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  404230:	f1a4 07f0 	sub.w	r7, r4, #240	; 0xf0
  404234:	466d      	mov	r5, sp
  404236:	3ce0      	subs	r4, #224	; 0xe0
  404238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40423a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40423c:	e894 0003 	ldmia.w	r4, {r0, r1}
  404240:	e885 0003 	stmia.w	r5, {r0, r1}
  404244:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  404248:	47c0      	blx	r8
	for(int i = 0; i < 3; i++){
  40424a:	3601      	adds	r6, #1
  40424c:	2e03      	cmp	r6, #3
  40424e:	d1ea      	bne.n	404226 <task_lcd+0xb2>

	// struct local para armazenar msg enviada pela task do mxt
	touchData touch;

	while (true) {
		if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  404250:	ac06      	add	r4, sp, #24
  404252:	4e13      	ldr	r6, [pc, #76]	; (4042a0 <task_lcd+0x12c>)
  404254:	4d18      	ldr	r5, [pc, #96]	; (4042b8 <task_lcd+0x144>)
  404256:	e004      	b.n	404262 <task_lcd+0xee>
			//update_screen(touch.x, touch.y);
			int b = process_touch(botoes, touch, 3);
			if(b >= 0){
				botoes[b].callback(&botoes[b]);
			}
			printf("x:%d y:%d\n", touch.x, touch.y);
  404258:	9a07      	ldr	r2, [sp, #28]
  40425a:	9906      	ldr	r1, [sp, #24]
  40425c:	4817      	ldr	r0, [pc, #92]	; (4042bc <task_lcd+0x148>)
  40425e:	4b18      	ldr	r3, [pc, #96]	; (4042c0 <task_lcd+0x14c>)
  404260:	4798      	blx	r3
		if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  404262:	2300      	movs	r3, #0
  404264:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  404268:	4621      	mov	r1, r4
  40426a:	6830      	ldr	r0, [r6, #0]
  40426c:	47a8      	blx	r5
  40426e:	2800      	cmp	r0, #0
  404270:	d0f7      	beq.n	404262 <task_lcd+0xee>
			int b = process_touch(botoes, touch, 3);
  404272:	2303      	movs	r3, #3
  404274:	e894 0006 	ldmia.w	r4, {r1, r2}
  404278:	a808      	add	r0, sp, #32
  40427a:	4f12      	ldr	r7, [pc, #72]	; (4042c4 <task_lcd+0x150>)
  40427c:	47b8      	blx	r7
			if(b >= 0){
  40427e:	2800      	cmp	r0, #0
  404280:	dbea      	blt.n	404258 <task_lcd+0xe4>
				botoes[b].callback(&botoes[b]);
  404282:	0083      	lsls	r3, r0, #2
  404284:	181a      	adds	r2, r3, r0
  404286:	a944      	add	r1, sp, #272	; 0x110
  404288:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  40428c:	f853 3ce0 	ldr.w	r3, [r3, #-224]
  404290:	a908      	add	r1, sp, #32
  404292:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  404296:	4798      	blx	r3
  404298:	e7de      	b.n	404258 <task_lcd+0xe4>
  40429a:	bf00      	nop
  40429c:	0040266d 	.word	0x0040266d
  4042a0:	2040c870 	.word	0x2040c870
  4042a4:	2040c860 	.word	0x2040c860
  4042a8:	00fcfcfc 	.word	0x00fcfcfc
  4042ac:	00401055 	.word	0x00401055
  4042b0:	00403e35 	.word	0x00403e35
  4042b4:	00407c90 	.word	0x00407c90
  4042b8:	004029cd 	.word	0x004029cd
  4042bc:	00408bd4 	.word	0x00408bd4
  4042c0:	00404cc9 	.word	0x00404cc9
  4042c4:	004040c9 	.word	0x004040c9
  4042c8:	00403f39 	.word	0x00403f39

004042cc <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  4042cc:	b500      	push	{lr}
  4042ce:	b08b      	sub	sp, #44	; 0x2c
    .charlength   = USART_SERIAL_CHAR_LENGTH,
    .paritytype   = USART_SERIAL_PARITY,
    .stopbits     = USART_SERIAL_STOP_BIT
  };

  sysclk_init(); /* Initialize system clocks */
  4042d0:	4b29      	ldr	r3, [pc, #164]	; (404378 <main+0xac>)
  4042d2:	4798      	blx	r3
  board_init();  /* Initialize board */
  4042d4:	4b29      	ldr	r3, [pc, #164]	; (40437c <main+0xb0>)
  4042d6:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4042d8:	4d29      	ldr	r5, [pc, #164]	; (404380 <main+0xb4>)
  4042da:	4b2a      	ldr	r3, [pc, #168]	; (404384 <main+0xb8>)
  4042dc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4042de:	4a2a      	ldr	r2, [pc, #168]	; (404388 <main+0xbc>)
  4042e0:	4b2a      	ldr	r3, [pc, #168]	; (40438c <main+0xc0>)
  4042e2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4042e4:	4a2a      	ldr	r2, [pc, #168]	; (404390 <main+0xc4>)
  4042e6:	4b2b      	ldr	r3, [pc, #172]	; (404394 <main+0xc8>)
  4042e8:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4042ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4042ee:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4042f0:	23c0      	movs	r3, #192	; 0xc0
  4042f2:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4042f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4042f8:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4042fa:	2400      	movs	r4, #0
  4042fc:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4042fe:	9408      	str	r4, [sp, #32]
  404300:	200e      	movs	r0, #14
  404302:	4b25      	ldr	r3, [pc, #148]	; (404398 <main+0xcc>)
  404304:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  404306:	4a25      	ldr	r2, [pc, #148]	; (40439c <main+0xd0>)
  404308:	a904      	add	r1, sp, #16
  40430a:	4628      	mov	r0, r5
  40430c:	4b24      	ldr	r3, [pc, #144]	; (4043a0 <main+0xd4>)
  40430e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  404310:	4628      	mov	r0, r5
  404312:	4b24      	ldr	r3, [pc, #144]	; (4043a4 <main+0xd8>)
  404314:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404316:	4628      	mov	r0, r5
  404318:	4b23      	ldr	r3, [pc, #140]	; (4043a8 <main+0xdc>)
  40431a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40431c:	4e23      	ldr	r6, [pc, #140]	; (4043ac <main+0xe0>)
  40431e:	6833      	ldr	r3, [r6, #0]
  404320:	4621      	mov	r1, r4
  404322:	6898      	ldr	r0, [r3, #8]
  404324:	4d22      	ldr	r5, [pc, #136]	; (4043b0 <main+0xe4>)
  404326:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404328:	6833      	ldr	r3, [r6, #0]
  40432a:	4621      	mov	r1, r4
  40432c:	6858      	ldr	r0, [r3, #4]
  40432e:	47a8      	blx	r5
  
  /* Initialize stdio on USART */
  stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);
  
  /* Create task to handler touch */
  if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  404330:	9403      	str	r4, [sp, #12]
  404332:	9402      	str	r4, [sp, #8]
  404334:	9401      	str	r4, [sp, #4]
  404336:	9400      	str	r4, [sp, #0]
  404338:	4623      	mov	r3, r4
  40433a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40433e:	491d      	ldr	r1, [pc, #116]	; (4043b4 <main+0xe8>)
  404340:	481d      	ldr	r0, [pc, #116]	; (4043b8 <main+0xec>)
  404342:	4c1e      	ldr	r4, [pc, #120]	; (4043bc <main+0xf0>)
  404344:	47a0      	blx	r4
  404346:	2801      	cmp	r0, #1
  404348:	d002      	beq.n	404350 <main+0x84>
    printf("Failed to create test led task\r\n");
  40434a:	481d      	ldr	r0, [pc, #116]	; (4043c0 <main+0xf4>)
  40434c:	4b1d      	ldr	r3, [pc, #116]	; (4043c4 <main+0xf8>)
  40434e:	4798      	blx	r3
  }
  
  /* Create task to handler LCD */
  if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  404350:	2300      	movs	r3, #0
  404352:	9303      	str	r3, [sp, #12]
  404354:	9302      	str	r3, [sp, #8]
  404356:	9301      	str	r3, [sp, #4]
  404358:	9300      	str	r3, [sp, #0]
  40435a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40435e:	491a      	ldr	r1, [pc, #104]	; (4043c8 <main+0xfc>)
  404360:	481a      	ldr	r0, [pc, #104]	; (4043cc <main+0x100>)
  404362:	4c16      	ldr	r4, [pc, #88]	; (4043bc <main+0xf0>)
  404364:	47a0      	blx	r4
  404366:	2801      	cmp	r0, #1
  404368:	d002      	beq.n	404370 <main+0xa4>
    printf("Failed to create test led task\r\n");
  40436a:	4815      	ldr	r0, [pc, #84]	; (4043c0 <main+0xf4>)
  40436c:	4b15      	ldr	r3, [pc, #84]	; (4043c4 <main+0xf8>)
  40436e:	4798      	blx	r3
  }
  
  /* Start the scheduler. */
  vTaskStartScheduler();
  404370:	4b17      	ldr	r3, [pc, #92]	; (4043d0 <main+0x104>)
  404372:	4798      	blx	r3
  404374:	e7fe      	b.n	404374 <main+0xa8>
  404376:	bf00      	nop
  404378:	00400859 	.word	0x00400859
  40437c:	00400ae9 	.word	0x00400ae9
  404380:	40028000 	.word	0x40028000
  404384:	2040c81c 	.word	0x2040c81c
  404388:	00403d31 	.word	0x00403d31
  40438c:	2040c818 	.word	0x2040c818
  404390:	00403c55 	.word	0x00403c55
  404394:	2040c814 	.word	0x2040c814
  404398:	00401815 	.word	0x00401815
  40439c:	08f0d180 	.word	0x08f0d180
  4043a0:	00401c89 	.word	0x00401c89
  4043a4:	00401cdd 	.word	0x00401cdd
  4043a8:	00401ce3 	.word	0x00401ce3
  4043ac:	20400014 	.word	0x20400014
  4043b0:	0040546d 	.word	0x0040546d
  4043b4:	00408ba8 	.word	0x00408ba8
  4043b8:	00403ecd 	.word	0x00403ecd
  4043bc:	00402cad 	.word	0x00402cad
  4043c0:	00408bac 	.word	0x00408bac
  4043c4:	00404cc9 	.word	0x00404cc9
  4043c8:	00408bd0 	.word	0x00408bd0
  4043cc:	00404175 	.word	0x00404175
  4043d0:	00402ee1 	.word	0x00402ee1

004043d4 <__aeabi_drsub>:
  4043d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4043d8:	e002      	b.n	4043e0 <__adddf3>
  4043da:	bf00      	nop

004043dc <__aeabi_dsub>:
  4043dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004043e0 <__adddf3>:
  4043e0:	b530      	push	{r4, r5, lr}
  4043e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4043e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4043ea:	ea94 0f05 	teq	r4, r5
  4043ee:	bf08      	it	eq
  4043f0:	ea90 0f02 	teqeq	r0, r2
  4043f4:	bf1f      	itttt	ne
  4043f6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4043fa:	ea55 0c02 	orrsne.w	ip, r5, r2
  4043fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404406:	f000 80e2 	beq.w	4045ce <__adddf3+0x1ee>
  40440a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40440e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404412:	bfb8      	it	lt
  404414:	426d      	neglt	r5, r5
  404416:	dd0c      	ble.n	404432 <__adddf3+0x52>
  404418:	442c      	add	r4, r5
  40441a:	ea80 0202 	eor.w	r2, r0, r2
  40441e:	ea81 0303 	eor.w	r3, r1, r3
  404422:	ea82 0000 	eor.w	r0, r2, r0
  404426:	ea83 0101 	eor.w	r1, r3, r1
  40442a:	ea80 0202 	eor.w	r2, r0, r2
  40442e:	ea81 0303 	eor.w	r3, r1, r3
  404432:	2d36      	cmp	r5, #54	; 0x36
  404434:	bf88      	it	hi
  404436:	bd30      	pophi	{r4, r5, pc}
  404438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40443c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404448:	d002      	beq.n	404450 <__adddf3+0x70>
  40444a:	4240      	negs	r0, r0
  40444c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404454:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40445c:	d002      	beq.n	404464 <__adddf3+0x84>
  40445e:	4252      	negs	r2, r2
  404460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404464:	ea94 0f05 	teq	r4, r5
  404468:	f000 80a7 	beq.w	4045ba <__adddf3+0x1da>
  40446c:	f1a4 0401 	sub.w	r4, r4, #1
  404470:	f1d5 0e20 	rsbs	lr, r5, #32
  404474:	db0d      	blt.n	404492 <__adddf3+0xb2>
  404476:	fa02 fc0e 	lsl.w	ip, r2, lr
  40447a:	fa22 f205 	lsr.w	r2, r2, r5
  40447e:	1880      	adds	r0, r0, r2
  404480:	f141 0100 	adc.w	r1, r1, #0
  404484:	fa03 f20e 	lsl.w	r2, r3, lr
  404488:	1880      	adds	r0, r0, r2
  40448a:	fa43 f305 	asr.w	r3, r3, r5
  40448e:	4159      	adcs	r1, r3
  404490:	e00e      	b.n	4044b0 <__adddf3+0xd0>
  404492:	f1a5 0520 	sub.w	r5, r5, #32
  404496:	f10e 0e20 	add.w	lr, lr, #32
  40449a:	2a01      	cmp	r2, #1
  40449c:	fa03 fc0e 	lsl.w	ip, r3, lr
  4044a0:	bf28      	it	cs
  4044a2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4044a6:	fa43 f305 	asr.w	r3, r3, r5
  4044aa:	18c0      	adds	r0, r0, r3
  4044ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4044b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4044b4:	d507      	bpl.n	4044c6 <__adddf3+0xe6>
  4044b6:	f04f 0e00 	mov.w	lr, #0
  4044ba:	f1dc 0c00 	rsbs	ip, ip, #0
  4044be:	eb7e 0000 	sbcs.w	r0, lr, r0
  4044c2:	eb6e 0101 	sbc.w	r1, lr, r1
  4044c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4044ca:	d31b      	bcc.n	404504 <__adddf3+0x124>
  4044cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4044d0:	d30c      	bcc.n	4044ec <__adddf3+0x10c>
  4044d2:	0849      	lsrs	r1, r1, #1
  4044d4:	ea5f 0030 	movs.w	r0, r0, rrx
  4044d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4044dc:	f104 0401 	add.w	r4, r4, #1
  4044e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4044e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4044e8:	f080 809a 	bcs.w	404620 <__adddf3+0x240>
  4044ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4044f0:	bf08      	it	eq
  4044f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4044f6:	f150 0000 	adcs.w	r0, r0, #0
  4044fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4044fe:	ea41 0105 	orr.w	r1, r1, r5
  404502:	bd30      	pop	{r4, r5, pc}
  404504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404508:	4140      	adcs	r0, r0
  40450a:	eb41 0101 	adc.w	r1, r1, r1
  40450e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404512:	f1a4 0401 	sub.w	r4, r4, #1
  404516:	d1e9      	bne.n	4044ec <__adddf3+0x10c>
  404518:	f091 0f00 	teq	r1, #0
  40451c:	bf04      	itt	eq
  40451e:	4601      	moveq	r1, r0
  404520:	2000      	moveq	r0, #0
  404522:	fab1 f381 	clz	r3, r1
  404526:	bf08      	it	eq
  404528:	3320      	addeq	r3, #32
  40452a:	f1a3 030b 	sub.w	r3, r3, #11
  40452e:	f1b3 0220 	subs.w	r2, r3, #32
  404532:	da0c      	bge.n	40454e <__adddf3+0x16e>
  404534:	320c      	adds	r2, #12
  404536:	dd08      	ble.n	40454a <__adddf3+0x16a>
  404538:	f102 0c14 	add.w	ip, r2, #20
  40453c:	f1c2 020c 	rsb	r2, r2, #12
  404540:	fa01 f00c 	lsl.w	r0, r1, ip
  404544:	fa21 f102 	lsr.w	r1, r1, r2
  404548:	e00c      	b.n	404564 <__adddf3+0x184>
  40454a:	f102 0214 	add.w	r2, r2, #20
  40454e:	bfd8      	it	le
  404550:	f1c2 0c20 	rsble	ip, r2, #32
  404554:	fa01 f102 	lsl.w	r1, r1, r2
  404558:	fa20 fc0c 	lsr.w	ip, r0, ip
  40455c:	bfdc      	itt	le
  40455e:	ea41 010c 	orrle.w	r1, r1, ip
  404562:	4090      	lslle	r0, r2
  404564:	1ae4      	subs	r4, r4, r3
  404566:	bfa2      	ittt	ge
  404568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40456c:	4329      	orrge	r1, r5
  40456e:	bd30      	popge	{r4, r5, pc}
  404570:	ea6f 0404 	mvn.w	r4, r4
  404574:	3c1f      	subs	r4, #31
  404576:	da1c      	bge.n	4045b2 <__adddf3+0x1d2>
  404578:	340c      	adds	r4, #12
  40457a:	dc0e      	bgt.n	40459a <__adddf3+0x1ba>
  40457c:	f104 0414 	add.w	r4, r4, #20
  404580:	f1c4 0220 	rsb	r2, r4, #32
  404584:	fa20 f004 	lsr.w	r0, r0, r4
  404588:	fa01 f302 	lsl.w	r3, r1, r2
  40458c:	ea40 0003 	orr.w	r0, r0, r3
  404590:	fa21 f304 	lsr.w	r3, r1, r4
  404594:	ea45 0103 	orr.w	r1, r5, r3
  404598:	bd30      	pop	{r4, r5, pc}
  40459a:	f1c4 040c 	rsb	r4, r4, #12
  40459e:	f1c4 0220 	rsb	r2, r4, #32
  4045a2:	fa20 f002 	lsr.w	r0, r0, r2
  4045a6:	fa01 f304 	lsl.w	r3, r1, r4
  4045aa:	ea40 0003 	orr.w	r0, r0, r3
  4045ae:	4629      	mov	r1, r5
  4045b0:	bd30      	pop	{r4, r5, pc}
  4045b2:	fa21 f004 	lsr.w	r0, r1, r4
  4045b6:	4629      	mov	r1, r5
  4045b8:	bd30      	pop	{r4, r5, pc}
  4045ba:	f094 0f00 	teq	r4, #0
  4045be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4045c2:	bf06      	itte	eq
  4045c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4045c8:	3401      	addeq	r4, #1
  4045ca:	3d01      	subne	r5, #1
  4045cc:	e74e      	b.n	40446c <__adddf3+0x8c>
  4045ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4045d2:	bf18      	it	ne
  4045d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4045d8:	d029      	beq.n	40462e <__adddf3+0x24e>
  4045da:	ea94 0f05 	teq	r4, r5
  4045de:	bf08      	it	eq
  4045e0:	ea90 0f02 	teqeq	r0, r2
  4045e4:	d005      	beq.n	4045f2 <__adddf3+0x212>
  4045e6:	ea54 0c00 	orrs.w	ip, r4, r0
  4045ea:	bf04      	itt	eq
  4045ec:	4619      	moveq	r1, r3
  4045ee:	4610      	moveq	r0, r2
  4045f0:	bd30      	pop	{r4, r5, pc}
  4045f2:	ea91 0f03 	teq	r1, r3
  4045f6:	bf1e      	ittt	ne
  4045f8:	2100      	movne	r1, #0
  4045fa:	2000      	movne	r0, #0
  4045fc:	bd30      	popne	{r4, r5, pc}
  4045fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404602:	d105      	bne.n	404610 <__adddf3+0x230>
  404604:	0040      	lsls	r0, r0, #1
  404606:	4149      	adcs	r1, r1
  404608:	bf28      	it	cs
  40460a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40460e:	bd30      	pop	{r4, r5, pc}
  404610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404614:	bf3c      	itt	cc
  404616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40461a:	bd30      	popcc	{r4, r5, pc}
  40461c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404628:	f04f 0000 	mov.w	r0, #0
  40462c:	bd30      	pop	{r4, r5, pc}
  40462e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404632:	bf1a      	itte	ne
  404634:	4619      	movne	r1, r3
  404636:	4610      	movne	r0, r2
  404638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40463c:	bf1c      	itt	ne
  40463e:	460b      	movne	r3, r1
  404640:	4602      	movne	r2, r0
  404642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404646:	bf06      	itte	eq
  404648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40464c:	ea91 0f03 	teqeq	r1, r3
  404650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404654:	bd30      	pop	{r4, r5, pc}
  404656:	bf00      	nop

00404658 <__aeabi_ui2d>:
  404658:	f090 0f00 	teq	r0, #0
  40465c:	bf04      	itt	eq
  40465e:	2100      	moveq	r1, #0
  404660:	4770      	bxeq	lr
  404662:	b530      	push	{r4, r5, lr}
  404664:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404668:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40466c:	f04f 0500 	mov.w	r5, #0
  404670:	f04f 0100 	mov.w	r1, #0
  404674:	e750      	b.n	404518 <__adddf3+0x138>
  404676:	bf00      	nop

00404678 <__aeabi_i2d>:
  404678:	f090 0f00 	teq	r0, #0
  40467c:	bf04      	itt	eq
  40467e:	2100      	moveq	r1, #0
  404680:	4770      	bxeq	lr
  404682:	b530      	push	{r4, r5, lr}
  404684:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404688:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40468c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404690:	bf48      	it	mi
  404692:	4240      	negmi	r0, r0
  404694:	f04f 0100 	mov.w	r1, #0
  404698:	e73e      	b.n	404518 <__adddf3+0x138>
  40469a:	bf00      	nop

0040469c <__aeabi_f2d>:
  40469c:	0042      	lsls	r2, r0, #1
  40469e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4046a2:	ea4f 0131 	mov.w	r1, r1, rrx
  4046a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4046aa:	bf1f      	itttt	ne
  4046ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4046b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4046b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4046b8:	4770      	bxne	lr
  4046ba:	f092 0f00 	teq	r2, #0
  4046be:	bf14      	ite	ne
  4046c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4046c4:	4770      	bxeq	lr
  4046c6:	b530      	push	{r4, r5, lr}
  4046c8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4046cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4046d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4046d4:	e720      	b.n	404518 <__adddf3+0x138>
  4046d6:	bf00      	nop

004046d8 <__aeabi_ul2d>:
  4046d8:	ea50 0201 	orrs.w	r2, r0, r1
  4046dc:	bf08      	it	eq
  4046de:	4770      	bxeq	lr
  4046e0:	b530      	push	{r4, r5, lr}
  4046e2:	f04f 0500 	mov.w	r5, #0
  4046e6:	e00a      	b.n	4046fe <__aeabi_l2d+0x16>

004046e8 <__aeabi_l2d>:
  4046e8:	ea50 0201 	orrs.w	r2, r0, r1
  4046ec:	bf08      	it	eq
  4046ee:	4770      	bxeq	lr
  4046f0:	b530      	push	{r4, r5, lr}
  4046f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4046f6:	d502      	bpl.n	4046fe <__aeabi_l2d+0x16>
  4046f8:	4240      	negs	r0, r0
  4046fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4046fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404702:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404706:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40470a:	f43f aedc 	beq.w	4044c6 <__adddf3+0xe6>
  40470e:	f04f 0203 	mov.w	r2, #3
  404712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404716:	bf18      	it	ne
  404718:	3203      	addne	r2, #3
  40471a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40471e:	bf18      	it	ne
  404720:	3203      	addne	r2, #3
  404722:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404726:	f1c2 0320 	rsb	r3, r2, #32
  40472a:	fa00 fc03 	lsl.w	ip, r0, r3
  40472e:	fa20 f002 	lsr.w	r0, r0, r2
  404732:	fa01 fe03 	lsl.w	lr, r1, r3
  404736:	ea40 000e 	orr.w	r0, r0, lr
  40473a:	fa21 f102 	lsr.w	r1, r1, r2
  40473e:	4414      	add	r4, r2
  404740:	e6c1      	b.n	4044c6 <__adddf3+0xe6>
  404742:	bf00      	nop

00404744 <__aeabi_dmul>:
  404744:	b570      	push	{r4, r5, r6, lr}
  404746:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40474a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40474e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404752:	bf1d      	ittte	ne
  404754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404758:	ea94 0f0c 	teqne	r4, ip
  40475c:	ea95 0f0c 	teqne	r5, ip
  404760:	f000 f8de 	bleq	404920 <__aeabi_dmul+0x1dc>
  404764:	442c      	add	r4, r5
  404766:	ea81 0603 	eor.w	r6, r1, r3
  40476a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40476e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404772:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404776:	bf18      	it	ne
  404778:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40477c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404784:	d038      	beq.n	4047f8 <__aeabi_dmul+0xb4>
  404786:	fba0 ce02 	umull	ip, lr, r0, r2
  40478a:	f04f 0500 	mov.w	r5, #0
  40478e:	fbe1 e502 	umlal	lr, r5, r1, r2
  404792:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404796:	fbe0 e503 	umlal	lr, r5, r0, r3
  40479a:	f04f 0600 	mov.w	r6, #0
  40479e:	fbe1 5603 	umlal	r5, r6, r1, r3
  4047a2:	f09c 0f00 	teq	ip, #0
  4047a6:	bf18      	it	ne
  4047a8:	f04e 0e01 	orrne.w	lr, lr, #1
  4047ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4047b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4047b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4047b8:	d204      	bcs.n	4047c4 <__aeabi_dmul+0x80>
  4047ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4047be:	416d      	adcs	r5, r5
  4047c0:	eb46 0606 	adc.w	r6, r6, r6
  4047c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4047c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4047cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4047d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4047d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4047d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4047dc:	bf88      	it	hi
  4047de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4047e2:	d81e      	bhi.n	404822 <__aeabi_dmul+0xde>
  4047e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4047e8:	bf08      	it	eq
  4047ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4047ee:	f150 0000 	adcs.w	r0, r0, #0
  4047f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4047f6:	bd70      	pop	{r4, r5, r6, pc}
  4047f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4047fc:	ea46 0101 	orr.w	r1, r6, r1
  404800:	ea40 0002 	orr.w	r0, r0, r2
  404804:	ea81 0103 	eor.w	r1, r1, r3
  404808:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40480c:	bfc2      	ittt	gt
  40480e:	ebd4 050c 	rsbsgt	r5, r4, ip
  404812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404816:	bd70      	popgt	{r4, r5, r6, pc}
  404818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40481c:	f04f 0e00 	mov.w	lr, #0
  404820:	3c01      	subs	r4, #1
  404822:	f300 80ab 	bgt.w	40497c <__aeabi_dmul+0x238>
  404826:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40482a:	bfde      	ittt	le
  40482c:	2000      	movle	r0, #0
  40482e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  404832:	bd70      	pople	{r4, r5, r6, pc}
  404834:	f1c4 0400 	rsb	r4, r4, #0
  404838:	3c20      	subs	r4, #32
  40483a:	da35      	bge.n	4048a8 <__aeabi_dmul+0x164>
  40483c:	340c      	adds	r4, #12
  40483e:	dc1b      	bgt.n	404878 <__aeabi_dmul+0x134>
  404840:	f104 0414 	add.w	r4, r4, #20
  404844:	f1c4 0520 	rsb	r5, r4, #32
  404848:	fa00 f305 	lsl.w	r3, r0, r5
  40484c:	fa20 f004 	lsr.w	r0, r0, r4
  404850:	fa01 f205 	lsl.w	r2, r1, r5
  404854:	ea40 0002 	orr.w	r0, r0, r2
  404858:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40485c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404860:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404864:	fa21 f604 	lsr.w	r6, r1, r4
  404868:	eb42 0106 	adc.w	r1, r2, r6
  40486c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404870:	bf08      	it	eq
  404872:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404876:	bd70      	pop	{r4, r5, r6, pc}
  404878:	f1c4 040c 	rsb	r4, r4, #12
  40487c:	f1c4 0520 	rsb	r5, r4, #32
  404880:	fa00 f304 	lsl.w	r3, r0, r4
  404884:	fa20 f005 	lsr.w	r0, r0, r5
  404888:	fa01 f204 	lsl.w	r2, r1, r4
  40488c:	ea40 0002 	orr.w	r0, r0, r2
  404890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404894:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404898:	f141 0100 	adc.w	r1, r1, #0
  40489c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4048a0:	bf08      	it	eq
  4048a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4048a6:	bd70      	pop	{r4, r5, r6, pc}
  4048a8:	f1c4 0520 	rsb	r5, r4, #32
  4048ac:	fa00 f205 	lsl.w	r2, r0, r5
  4048b0:	ea4e 0e02 	orr.w	lr, lr, r2
  4048b4:	fa20 f304 	lsr.w	r3, r0, r4
  4048b8:	fa01 f205 	lsl.w	r2, r1, r5
  4048bc:	ea43 0302 	orr.w	r3, r3, r2
  4048c0:	fa21 f004 	lsr.w	r0, r1, r4
  4048c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4048c8:	fa21 f204 	lsr.w	r2, r1, r4
  4048cc:	ea20 0002 	bic.w	r0, r0, r2
  4048d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4048d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4048d8:	bf08      	it	eq
  4048da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4048de:	bd70      	pop	{r4, r5, r6, pc}
  4048e0:	f094 0f00 	teq	r4, #0
  4048e4:	d10f      	bne.n	404906 <__aeabi_dmul+0x1c2>
  4048e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4048ea:	0040      	lsls	r0, r0, #1
  4048ec:	eb41 0101 	adc.w	r1, r1, r1
  4048f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4048f4:	bf08      	it	eq
  4048f6:	3c01      	subeq	r4, #1
  4048f8:	d0f7      	beq.n	4048ea <__aeabi_dmul+0x1a6>
  4048fa:	ea41 0106 	orr.w	r1, r1, r6
  4048fe:	f095 0f00 	teq	r5, #0
  404902:	bf18      	it	ne
  404904:	4770      	bxne	lr
  404906:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40490a:	0052      	lsls	r2, r2, #1
  40490c:	eb43 0303 	adc.w	r3, r3, r3
  404910:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404914:	bf08      	it	eq
  404916:	3d01      	subeq	r5, #1
  404918:	d0f7      	beq.n	40490a <__aeabi_dmul+0x1c6>
  40491a:	ea43 0306 	orr.w	r3, r3, r6
  40491e:	4770      	bx	lr
  404920:	ea94 0f0c 	teq	r4, ip
  404924:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404928:	bf18      	it	ne
  40492a:	ea95 0f0c 	teqne	r5, ip
  40492e:	d00c      	beq.n	40494a <__aeabi_dmul+0x206>
  404930:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404934:	bf18      	it	ne
  404936:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40493a:	d1d1      	bne.n	4048e0 <__aeabi_dmul+0x19c>
  40493c:	ea81 0103 	eor.w	r1, r1, r3
  404940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404944:	f04f 0000 	mov.w	r0, #0
  404948:	bd70      	pop	{r4, r5, r6, pc}
  40494a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40494e:	bf06      	itte	eq
  404950:	4610      	moveq	r0, r2
  404952:	4619      	moveq	r1, r3
  404954:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404958:	d019      	beq.n	40498e <__aeabi_dmul+0x24a>
  40495a:	ea94 0f0c 	teq	r4, ip
  40495e:	d102      	bne.n	404966 <__aeabi_dmul+0x222>
  404960:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404964:	d113      	bne.n	40498e <__aeabi_dmul+0x24a>
  404966:	ea95 0f0c 	teq	r5, ip
  40496a:	d105      	bne.n	404978 <__aeabi_dmul+0x234>
  40496c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404970:	bf1c      	itt	ne
  404972:	4610      	movne	r0, r2
  404974:	4619      	movne	r1, r3
  404976:	d10a      	bne.n	40498e <__aeabi_dmul+0x24a>
  404978:	ea81 0103 	eor.w	r1, r1, r3
  40497c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404980:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404984:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404988:	f04f 0000 	mov.w	r0, #0
  40498c:	bd70      	pop	{r4, r5, r6, pc}
  40498e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404992:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404996:	bd70      	pop	{r4, r5, r6, pc}

00404998 <__aeabi_ddiv>:
  404998:	b570      	push	{r4, r5, r6, lr}
  40499a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40499e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4049a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4049a6:	bf1d      	ittte	ne
  4049a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4049ac:	ea94 0f0c 	teqne	r4, ip
  4049b0:	ea95 0f0c 	teqne	r5, ip
  4049b4:	f000 f8a7 	bleq	404b06 <__aeabi_ddiv+0x16e>
  4049b8:	eba4 0405 	sub.w	r4, r4, r5
  4049bc:	ea81 0e03 	eor.w	lr, r1, r3
  4049c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4049c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4049c8:	f000 8088 	beq.w	404adc <__aeabi_ddiv+0x144>
  4049cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4049d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4049d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4049d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4049dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4049e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4049e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4049e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4049ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4049f0:	429d      	cmp	r5, r3
  4049f2:	bf08      	it	eq
  4049f4:	4296      	cmpeq	r6, r2
  4049f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4049fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4049fe:	d202      	bcs.n	404a06 <__aeabi_ddiv+0x6e>
  404a00:	085b      	lsrs	r3, r3, #1
  404a02:	ea4f 0232 	mov.w	r2, r2, rrx
  404a06:	1ab6      	subs	r6, r6, r2
  404a08:	eb65 0503 	sbc.w	r5, r5, r3
  404a0c:	085b      	lsrs	r3, r3, #1
  404a0e:	ea4f 0232 	mov.w	r2, r2, rrx
  404a12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404a16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404a1a:	ebb6 0e02 	subs.w	lr, r6, r2
  404a1e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404a22:	bf22      	ittt	cs
  404a24:	1ab6      	subcs	r6, r6, r2
  404a26:	4675      	movcs	r5, lr
  404a28:	ea40 000c 	orrcs.w	r0, r0, ip
  404a2c:	085b      	lsrs	r3, r3, #1
  404a2e:	ea4f 0232 	mov.w	r2, r2, rrx
  404a32:	ebb6 0e02 	subs.w	lr, r6, r2
  404a36:	eb75 0e03 	sbcs.w	lr, r5, r3
  404a3a:	bf22      	ittt	cs
  404a3c:	1ab6      	subcs	r6, r6, r2
  404a3e:	4675      	movcs	r5, lr
  404a40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404a44:	085b      	lsrs	r3, r3, #1
  404a46:	ea4f 0232 	mov.w	r2, r2, rrx
  404a4a:	ebb6 0e02 	subs.w	lr, r6, r2
  404a4e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404a52:	bf22      	ittt	cs
  404a54:	1ab6      	subcs	r6, r6, r2
  404a56:	4675      	movcs	r5, lr
  404a58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404a5c:	085b      	lsrs	r3, r3, #1
  404a5e:	ea4f 0232 	mov.w	r2, r2, rrx
  404a62:	ebb6 0e02 	subs.w	lr, r6, r2
  404a66:	eb75 0e03 	sbcs.w	lr, r5, r3
  404a6a:	bf22      	ittt	cs
  404a6c:	1ab6      	subcs	r6, r6, r2
  404a6e:	4675      	movcs	r5, lr
  404a70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404a74:	ea55 0e06 	orrs.w	lr, r5, r6
  404a78:	d018      	beq.n	404aac <__aeabi_ddiv+0x114>
  404a7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404a7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404a82:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404a86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404a8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404a8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404a92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404a96:	d1c0      	bne.n	404a1a <__aeabi_ddiv+0x82>
  404a98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404a9c:	d10b      	bne.n	404ab6 <__aeabi_ddiv+0x11e>
  404a9e:	ea41 0100 	orr.w	r1, r1, r0
  404aa2:	f04f 0000 	mov.w	r0, #0
  404aa6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404aaa:	e7b6      	b.n	404a1a <__aeabi_ddiv+0x82>
  404aac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404ab0:	bf04      	itt	eq
  404ab2:	4301      	orreq	r1, r0
  404ab4:	2000      	moveq	r0, #0
  404ab6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404aba:	bf88      	it	hi
  404abc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404ac0:	f63f aeaf 	bhi.w	404822 <__aeabi_dmul+0xde>
  404ac4:	ebb5 0c03 	subs.w	ip, r5, r3
  404ac8:	bf04      	itt	eq
  404aca:	ebb6 0c02 	subseq.w	ip, r6, r2
  404ace:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404ad2:	f150 0000 	adcs.w	r0, r0, #0
  404ad6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404ada:	bd70      	pop	{r4, r5, r6, pc}
  404adc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404ae0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404ae4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404ae8:	bfc2      	ittt	gt
  404aea:	ebd4 050c 	rsbsgt	r5, r4, ip
  404aee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404af2:	bd70      	popgt	{r4, r5, r6, pc}
  404af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404af8:	f04f 0e00 	mov.w	lr, #0
  404afc:	3c01      	subs	r4, #1
  404afe:	e690      	b.n	404822 <__aeabi_dmul+0xde>
  404b00:	ea45 0e06 	orr.w	lr, r5, r6
  404b04:	e68d      	b.n	404822 <__aeabi_dmul+0xde>
  404b06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404b0a:	ea94 0f0c 	teq	r4, ip
  404b0e:	bf08      	it	eq
  404b10:	ea95 0f0c 	teqeq	r5, ip
  404b14:	f43f af3b 	beq.w	40498e <__aeabi_dmul+0x24a>
  404b18:	ea94 0f0c 	teq	r4, ip
  404b1c:	d10a      	bne.n	404b34 <__aeabi_ddiv+0x19c>
  404b1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404b22:	f47f af34 	bne.w	40498e <__aeabi_dmul+0x24a>
  404b26:	ea95 0f0c 	teq	r5, ip
  404b2a:	f47f af25 	bne.w	404978 <__aeabi_dmul+0x234>
  404b2e:	4610      	mov	r0, r2
  404b30:	4619      	mov	r1, r3
  404b32:	e72c      	b.n	40498e <__aeabi_dmul+0x24a>
  404b34:	ea95 0f0c 	teq	r5, ip
  404b38:	d106      	bne.n	404b48 <__aeabi_ddiv+0x1b0>
  404b3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404b3e:	f43f aefd 	beq.w	40493c <__aeabi_dmul+0x1f8>
  404b42:	4610      	mov	r0, r2
  404b44:	4619      	mov	r1, r3
  404b46:	e722      	b.n	40498e <__aeabi_dmul+0x24a>
  404b48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404b4c:	bf18      	it	ne
  404b4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404b52:	f47f aec5 	bne.w	4048e0 <__aeabi_dmul+0x19c>
  404b56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404b5a:	f47f af0d 	bne.w	404978 <__aeabi_dmul+0x234>
  404b5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404b62:	f47f aeeb 	bne.w	40493c <__aeabi_dmul+0x1f8>
  404b66:	e712      	b.n	40498e <__aeabi_dmul+0x24a>

00404b68 <__gedf2>:
  404b68:	f04f 3cff 	mov.w	ip, #4294967295
  404b6c:	e006      	b.n	404b7c <__cmpdf2+0x4>
  404b6e:	bf00      	nop

00404b70 <__ledf2>:
  404b70:	f04f 0c01 	mov.w	ip, #1
  404b74:	e002      	b.n	404b7c <__cmpdf2+0x4>
  404b76:	bf00      	nop

00404b78 <__cmpdf2>:
  404b78:	f04f 0c01 	mov.w	ip, #1
  404b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
  404b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404b88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404b8c:	bf18      	it	ne
  404b8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404b92:	d01b      	beq.n	404bcc <__cmpdf2+0x54>
  404b94:	b001      	add	sp, #4
  404b96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  404b9a:	bf0c      	ite	eq
  404b9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404ba0:	ea91 0f03 	teqne	r1, r3
  404ba4:	bf02      	ittt	eq
  404ba6:	ea90 0f02 	teqeq	r0, r2
  404baa:	2000      	moveq	r0, #0
  404bac:	4770      	bxeq	lr
  404bae:	f110 0f00 	cmn.w	r0, #0
  404bb2:	ea91 0f03 	teq	r1, r3
  404bb6:	bf58      	it	pl
  404bb8:	4299      	cmppl	r1, r3
  404bba:	bf08      	it	eq
  404bbc:	4290      	cmpeq	r0, r2
  404bbe:	bf2c      	ite	cs
  404bc0:	17d8      	asrcs	r0, r3, #31
  404bc2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  404bc6:	f040 0001 	orr.w	r0, r0, #1
  404bca:	4770      	bx	lr
  404bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404bd4:	d102      	bne.n	404bdc <__cmpdf2+0x64>
  404bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404bda:	d107      	bne.n	404bec <__cmpdf2+0x74>
  404bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404be4:	d1d6      	bne.n	404b94 <__cmpdf2+0x1c>
  404be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404bea:	d0d3      	beq.n	404b94 <__cmpdf2+0x1c>
  404bec:	f85d 0b04 	ldr.w	r0, [sp], #4
  404bf0:	4770      	bx	lr
  404bf2:	bf00      	nop

00404bf4 <__aeabi_cdrcmple>:
  404bf4:	4684      	mov	ip, r0
  404bf6:	4610      	mov	r0, r2
  404bf8:	4662      	mov	r2, ip
  404bfa:	468c      	mov	ip, r1
  404bfc:	4619      	mov	r1, r3
  404bfe:	4663      	mov	r3, ip
  404c00:	e000      	b.n	404c04 <__aeabi_cdcmpeq>
  404c02:	bf00      	nop

00404c04 <__aeabi_cdcmpeq>:
  404c04:	b501      	push	{r0, lr}
  404c06:	f7ff ffb7 	bl	404b78 <__cmpdf2>
  404c0a:	2800      	cmp	r0, #0
  404c0c:	bf48      	it	mi
  404c0e:	f110 0f00 	cmnmi.w	r0, #0
  404c12:	bd01      	pop	{r0, pc}

00404c14 <__aeabi_dcmpeq>:
  404c14:	f84d ed08 	str.w	lr, [sp, #-8]!
  404c18:	f7ff fff4 	bl	404c04 <__aeabi_cdcmpeq>
  404c1c:	bf0c      	ite	eq
  404c1e:	2001      	moveq	r0, #1
  404c20:	2000      	movne	r0, #0
  404c22:	f85d fb08 	ldr.w	pc, [sp], #8
  404c26:	bf00      	nop

00404c28 <__aeabi_dcmplt>:
  404c28:	f84d ed08 	str.w	lr, [sp, #-8]!
  404c2c:	f7ff ffea 	bl	404c04 <__aeabi_cdcmpeq>
  404c30:	bf34      	ite	cc
  404c32:	2001      	movcc	r0, #1
  404c34:	2000      	movcs	r0, #0
  404c36:	f85d fb08 	ldr.w	pc, [sp], #8
  404c3a:	bf00      	nop

00404c3c <__aeabi_dcmple>:
  404c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404c40:	f7ff ffe0 	bl	404c04 <__aeabi_cdcmpeq>
  404c44:	bf94      	ite	ls
  404c46:	2001      	movls	r0, #1
  404c48:	2000      	movhi	r0, #0
  404c4a:	f85d fb08 	ldr.w	pc, [sp], #8
  404c4e:	bf00      	nop

00404c50 <__aeabi_dcmpge>:
  404c50:	f84d ed08 	str.w	lr, [sp, #-8]!
  404c54:	f7ff ffce 	bl	404bf4 <__aeabi_cdrcmple>
  404c58:	bf94      	ite	ls
  404c5a:	2001      	movls	r0, #1
  404c5c:	2000      	movhi	r0, #0
  404c5e:	f85d fb08 	ldr.w	pc, [sp], #8
  404c62:	bf00      	nop

00404c64 <__aeabi_dcmpgt>:
  404c64:	f84d ed08 	str.w	lr, [sp, #-8]!
  404c68:	f7ff ffc4 	bl	404bf4 <__aeabi_cdrcmple>
  404c6c:	bf34      	ite	cc
  404c6e:	2001      	movcc	r0, #1
  404c70:	2000      	movcs	r0, #0
  404c72:	f85d fb08 	ldr.w	pc, [sp], #8
  404c76:	bf00      	nop

00404c78 <__libc_init_array>:
  404c78:	b570      	push	{r4, r5, r6, lr}
  404c7a:	4e0f      	ldr	r6, [pc, #60]	; (404cb8 <__libc_init_array+0x40>)
  404c7c:	4d0f      	ldr	r5, [pc, #60]	; (404cbc <__libc_init_array+0x44>)
  404c7e:	1b76      	subs	r6, r6, r5
  404c80:	10b6      	asrs	r6, r6, #2
  404c82:	bf18      	it	ne
  404c84:	2400      	movne	r4, #0
  404c86:	d005      	beq.n	404c94 <__libc_init_array+0x1c>
  404c88:	3401      	adds	r4, #1
  404c8a:	f855 3b04 	ldr.w	r3, [r5], #4
  404c8e:	4798      	blx	r3
  404c90:	42a6      	cmp	r6, r4
  404c92:	d1f9      	bne.n	404c88 <__libc_init_array+0x10>
  404c94:	4e0a      	ldr	r6, [pc, #40]	; (404cc0 <__libc_init_array+0x48>)
  404c96:	4d0b      	ldr	r5, [pc, #44]	; (404cc4 <__libc_init_array+0x4c>)
  404c98:	1b76      	subs	r6, r6, r5
  404c9a:	f004 f861 	bl	408d60 <_init>
  404c9e:	10b6      	asrs	r6, r6, #2
  404ca0:	bf18      	it	ne
  404ca2:	2400      	movne	r4, #0
  404ca4:	d006      	beq.n	404cb4 <__libc_init_array+0x3c>
  404ca6:	3401      	adds	r4, #1
  404ca8:	f855 3b04 	ldr.w	r3, [r5], #4
  404cac:	4798      	blx	r3
  404cae:	42a6      	cmp	r6, r4
  404cb0:	d1f9      	bne.n	404ca6 <__libc_init_array+0x2e>
  404cb2:	bd70      	pop	{r4, r5, r6, pc}
  404cb4:	bd70      	pop	{r4, r5, r6, pc}
  404cb6:	bf00      	nop
  404cb8:	00408d6c 	.word	0x00408d6c
  404cbc:	00408d6c 	.word	0x00408d6c
  404cc0:	00408d74 	.word	0x00408d74
  404cc4:	00408d6c 	.word	0x00408d6c

00404cc8 <iprintf>:
  404cc8:	b40f      	push	{r0, r1, r2, r3}
  404cca:	b500      	push	{lr}
  404ccc:	4907      	ldr	r1, [pc, #28]	; (404cec <iprintf+0x24>)
  404cce:	b083      	sub	sp, #12
  404cd0:	ab04      	add	r3, sp, #16
  404cd2:	6808      	ldr	r0, [r1, #0]
  404cd4:	f853 2b04 	ldr.w	r2, [r3], #4
  404cd8:	6881      	ldr	r1, [r0, #8]
  404cda:	9301      	str	r3, [sp, #4]
  404cdc:	f000 fd5e 	bl	40579c <_vfiprintf_r>
  404ce0:	b003      	add	sp, #12
  404ce2:	f85d eb04 	ldr.w	lr, [sp], #4
  404ce6:	b004      	add	sp, #16
  404ce8:	4770      	bx	lr
  404cea:	bf00      	nop
  404cec:	20400014 	.word	0x20400014

00404cf0 <malloc>:
  404cf0:	4b02      	ldr	r3, [pc, #8]	; (404cfc <malloc+0xc>)
  404cf2:	4601      	mov	r1, r0
  404cf4:	6818      	ldr	r0, [r3, #0]
  404cf6:	f000 b803 	b.w	404d00 <_malloc_r>
  404cfa:	bf00      	nop
  404cfc:	20400014 	.word	0x20400014

00404d00 <_malloc_r>:
  404d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d04:	f101 060b 	add.w	r6, r1, #11
  404d08:	2e16      	cmp	r6, #22
  404d0a:	b083      	sub	sp, #12
  404d0c:	4605      	mov	r5, r0
  404d0e:	f240 809e 	bls.w	404e4e <_malloc_r+0x14e>
  404d12:	f036 0607 	bics.w	r6, r6, #7
  404d16:	f100 80bd 	bmi.w	404e94 <_malloc_r+0x194>
  404d1a:	42b1      	cmp	r1, r6
  404d1c:	f200 80ba 	bhi.w	404e94 <_malloc_r+0x194>
  404d20:	f000 fb86 	bl	405430 <__malloc_lock>
  404d24:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404d28:	f0c0 8293 	bcc.w	405252 <_malloc_r+0x552>
  404d2c:	0a73      	lsrs	r3, r6, #9
  404d2e:	f000 80b8 	beq.w	404ea2 <_malloc_r+0x1a2>
  404d32:	2b04      	cmp	r3, #4
  404d34:	f200 8179 	bhi.w	40502a <_malloc_r+0x32a>
  404d38:	09b3      	lsrs	r3, r6, #6
  404d3a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404d3e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404d42:	00c3      	lsls	r3, r0, #3
  404d44:	4fbf      	ldr	r7, [pc, #764]	; (405044 <_malloc_r+0x344>)
  404d46:	443b      	add	r3, r7
  404d48:	f1a3 0108 	sub.w	r1, r3, #8
  404d4c:	685c      	ldr	r4, [r3, #4]
  404d4e:	42a1      	cmp	r1, r4
  404d50:	d106      	bne.n	404d60 <_malloc_r+0x60>
  404d52:	e00c      	b.n	404d6e <_malloc_r+0x6e>
  404d54:	2a00      	cmp	r2, #0
  404d56:	f280 80aa 	bge.w	404eae <_malloc_r+0x1ae>
  404d5a:	68e4      	ldr	r4, [r4, #12]
  404d5c:	42a1      	cmp	r1, r4
  404d5e:	d006      	beq.n	404d6e <_malloc_r+0x6e>
  404d60:	6863      	ldr	r3, [r4, #4]
  404d62:	f023 0303 	bic.w	r3, r3, #3
  404d66:	1b9a      	subs	r2, r3, r6
  404d68:	2a0f      	cmp	r2, #15
  404d6a:	ddf3      	ble.n	404d54 <_malloc_r+0x54>
  404d6c:	4670      	mov	r0, lr
  404d6e:	693c      	ldr	r4, [r7, #16]
  404d70:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405058 <_malloc_r+0x358>
  404d74:	4574      	cmp	r4, lr
  404d76:	f000 81ab 	beq.w	4050d0 <_malloc_r+0x3d0>
  404d7a:	6863      	ldr	r3, [r4, #4]
  404d7c:	f023 0303 	bic.w	r3, r3, #3
  404d80:	1b9a      	subs	r2, r3, r6
  404d82:	2a0f      	cmp	r2, #15
  404d84:	f300 8190 	bgt.w	4050a8 <_malloc_r+0x3a8>
  404d88:	2a00      	cmp	r2, #0
  404d8a:	f8c7 e014 	str.w	lr, [r7, #20]
  404d8e:	f8c7 e010 	str.w	lr, [r7, #16]
  404d92:	f280 809d 	bge.w	404ed0 <_malloc_r+0x1d0>
  404d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404d9a:	f080 8161 	bcs.w	405060 <_malloc_r+0x360>
  404d9e:	08db      	lsrs	r3, r3, #3
  404da0:	f103 0c01 	add.w	ip, r3, #1
  404da4:	1099      	asrs	r1, r3, #2
  404da6:	687a      	ldr	r2, [r7, #4]
  404da8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404dac:	f8c4 8008 	str.w	r8, [r4, #8]
  404db0:	2301      	movs	r3, #1
  404db2:	408b      	lsls	r3, r1
  404db4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404db8:	4313      	orrs	r3, r2
  404dba:	3908      	subs	r1, #8
  404dbc:	60e1      	str	r1, [r4, #12]
  404dbe:	607b      	str	r3, [r7, #4]
  404dc0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404dc4:	f8c8 400c 	str.w	r4, [r8, #12]
  404dc8:	1082      	asrs	r2, r0, #2
  404dca:	2401      	movs	r4, #1
  404dcc:	4094      	lsls	r4, r2
  404dce:	429c      	cmp	r4, r3
  404dd0:	f200 808b 	bhi.w	404eea <_malloc_r+0x1ea>
  404dd4:	421c      	tst	r4, r3
  404dd6:	d106      	bne.n	404de6 <_malloc_r+0xe6>
  404dd8:	f020 0003 	bic.w	r0, r0, #3
  404ddc:	0064      	lsls	r4, r4, #1
  404dde:	421c      	tst	r4, r3
  404de0:	f100 0004 	add.w	r0, r0, #4
  404de4:	d0fa      	beq.n	404ddc <_malloc_r+0xdc>
  404de6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404dea:	46cc      	mov	ip, r9
  404dec:	4680      	mov	r8, r0
  404dee:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404df2:	459c      	cmp	ip, r3
  404df4:	d107      	bne.n	404e06 <_malloc_r+0x106>
  404df6:	e16d      	b.n	4050d4 <_malloc_r+0x3d4>
  404df8:	2a00      	cmp	r2, #0
  404dfa:	f280 817b 	bge.w	4050f4 <_malloc_r+0x3f4>
  404dfe:	68db      	ldr	r3, [r3, #12]
  404e00:	459c      	cmp	ip, r3
  404e02:	f000 8167 	beq.w	4050d4 <_malloc_r+0x3d4>
  404e06:	6859      	ldr	r1, [r3, #4]
  404e08:	f021 0103 	bic.w	r1, r1, #3
  404e0c:	1b8a      	subs	r2, r1, r6
  404e0e:	2a0f      	cmp	r2, #15
  404e10:	ddf2      	ble.n	404df8 <_malloc_r+0xf8>
  404e12:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404e16:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404e1a:	9300      	str	r3, [sp, #0]
  404e1c:	199c      	adds	r4, r3, r6
  404e1e:	4628      	mov	r0, r5
  404e20:	f046 0601 	orr.w	r6, r6, #1
  404e24:	f042 0501 	orr.w	r5, r2, #1
  404e28:	605e      	str	r6, [r3, #4]
  404e2a:	f8c8 c00c 	str.w	ip, [r8, #12]
  404e2e:	f8cc 8008 	str.w	r8, [ip, #8]
  404e32:	617c      	str	r4, [r7, #20]
  404e34:	613c      	str	r4, [r7, #16]
  404e36:	f8c4 e00c 	str.w	lr, [r4, #12]
  404e3a:	f8c4 e008 	str.w	lr, [r4, #8]
  404e3e:	6065      	str	r5, [r4, #4]
  404e40:	505a      	str	r2, [r3, r1]
  404e42:	f000 fafb 	bl	40543c <__malloc_unlock>
  404e46:	9b00      	ldr	r3, [sp, #0]
  404e48:	f103 0408 	add.w	r4, r3, #8
  404e4c:	e01e      	b.n	404e8c <_malloc_r+0x18c>
  404e4e:	2910      	cmp	r1, #16
  404e50:	d820      	bhi.n	404e94 <_malloc_r+0x194>
  404e52:	f000 faed 	bl	405430 <__malloc_lock>
  404e56:	2610      	movs	r6, #16
  404e58:	2318      	movs	r3, #24
  404e5a:	2002      	movs	r0, #2
  404e5c:	4f79      	ldr	r7, [pc, #484]	; (405044 <_malloc_r+0x344>)
  404e5e:	443b      	add	r3, r7
  404e60:	f1a3 0208 	sub.w	r2, r3, #8
  404e64:	685c      	ldr	r4, [r3, #4]
  404e66:	4294      	cmp	r4, r2
  404e68:	f000 813d 	beq.w	4050e6 <_malloc_r+0x3e6>
  404e6c:	6863      	ldr	r3, [r4, #4]
  404e6e:	68e1      	ldr	r1, [r4, #12]
  404e70:	68a6      	ldr	r6, [r4, #8]
  404e72:	f023 0303 	bic.w	r3, r3, #3
  404e76:	4423      	add	r3, r4
  404e78:	4628      	mov	r0, r5
  404e7a:	685a      	ldr	r2, [r3, #4]
  404e7c:	60f1      	str	r1, [r6, #12]
  404e7e:	f042 0201 	orr.w	r2, r2, #1
  404e82:	608e      	str	r6, [r1, #8]
  404e84:	605a      	str	r2, [r3, #4]
  404e86:	f000 fad9 	bl	40543c <__malloc_unlock>
  404e8a:	3408      	adds	r4, #8
  404e8c:	4620      	mov	r0, r4
  404e8e:	b003      	add	sp, #12
  404e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e94:	2400      	movs	r4, #0
  404e96:	230c      	movs	r3, #12
  404e98:	4620      	mov	r0, r4
  404e9a:	602b      	str	r3, [r5, #0]
  404e9c:	b003      	add	sp, #12
  404e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ea2:	2040      	movs	r0, #64	; 0x40
  404ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
  404ea8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404eac:	e74a      	b.n	404d44 <_malloc_r+0x44>
  404eae:	4423      	add	r3, r4
  404eb0:	68e1      	ldr	r1, [r4, #12]
  404eb2:	685a      	ldr	r2, [r3, #4]
  404eb4:	68a6      	ldr	r6, [r4, #8]
  404eb6:	f042 0201 	orr.w	r2, r2, #1
  404eba:	60f1      	str	r1, [r6, #12]
  404ebc:	4628      	mov	r0, r5
  404ebe:	608e      	str	r6, [r1, #8]
  404ec0:	605a      	str	r2, [r3, #4]
  404ec2:	f000 fabb 	bl	40543c <__malloc_unlock>
  404ec6:	3408      	adds	r4, #8
  404ec8:	4620      	mov	r0, r4
  404eca:	b003      	add	sp, #12
  404ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ed0:	4423      	add	r3, r4
  404ed2:	4628      	mov	r0, r5
  404ed4:	685a      	ldr	r2, [r3, #4]
  404ed6:	f042 0201 	orr.w	r2, r2, #1
  404eda:	605a      	str	r2, [r3, #4]
  404edc:	f000 faae 	bl	40543c <__malloc_unlock>
  404ee0:	3408      	adds	r4, #8
  404ee2:	4620      	mov	r0, r4
  404ee4:	b003      	add	sp, #12
  404ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404eea:	68bc      	ldr	r4, [r7, #8]
  404eec:	6863      	ldr	r3, [r4, #4]
  404eee:	f023 0803 	bic.w	r8, r3, #3
  404ef2:	45b0      	cmp	r8, r6
  404ef4:	d304      	bcc.n	404f00 <_malloc_r+0x200>
  404ef6:	eba8 0306 	sub.w	r3, r8, r6
  404efa:	2b0f      	cmp	r3, #15
  404efc:	f300 8085 	bgt.w	40500a <_malloc_r+0x30a>
  404f00:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40505c <_malloc_r+0x35c>
  404f04:	4b50      	ldr	r3, [pc, #320]	; (405048 <_malloc_r+0x348>)
  404f06:	f8d9 2000 	ldr.w	r2, [r9]
  404f0a:	681b      	ldr	r3, [r3, #0]
  404f0c:	3201      	adds	r2, #1
  404f0e:	4433      	add	r3, r6
  404f10:	eb04 0a08 	add.w	sl, r4, r8
  404f14:	f000 8155 	beq.w	4051c2 <_malloc_r+0x4c2>
  404f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404f1c:	330f      	adds	r3, #15
  404f1e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404f22:	f02b 0b0f 	bic.w	fp, fp, #15
  404f26:	4659      	mov	r1, fp
  404f28:	4628      	mov	r0, r5
  404f2a:	f000 fa8d 	bl	405448 <_sbrk_r>
  404f2e:	1c41      	adds	r1, r0, #1
  404f30:	4602      	mov	r2, r0
  404f32:	f000 80fc 	beq.w	40512e <_malloc_r+0x42e>
  404f36:	4582      	cmp	sl, r0
  404f38:	f200 80f7 	bhi.w	40512a <_malloc_r+0x42a>
  404f3c:	4b43      	ldr	r3, [pc, #268]	; (40504c <_malloc_r+0x34c>)
  404f3e:	6819      	ldr	r1, [r3, #0]
  404f40:	4459      	add	r1, fp
  404f42:	6019      	str	r1, [r3, #0]
  404f44:	f000 814d 	beq.w	4051e2 <_malloc_r+0x4e2>
  404f48:	f8d9 0000 	ldr.w	r0, [r9]
  404f4c:	3001      	adds	r0, #1
  404f4e:	bf1b      	ittet	ne
  404f50:	eba2 0a0a 	subne.w	sl, r2, sl
  404f54:	4451      	addne	r1, sl
  404f56:	f8c9 2000 	streq.w	r2, [r9]
  404f5a:	6019      	strne	r1, [r3, #0]
  404f5c:	f012 0107 	ands.w	r1, r2, #7
  404f60:	f000 8115 	beq.w	40518e <_malloc_r+0x48e>
  404f64:	f1c1 0008 	rsb	r0, r1, #8
  404f68:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404f6c:	4402      	add	r2, r0
  404f6e:	3108      	adds	r1, #8
  404f70:	eb02 090b 	add.w	r9, r2, fp
  404f74:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404f78:	eba1 0909 	sub.w	r9, r1, r9
  404f7c:	4649      	mov	r1, r9
  404f7e:	4628      	mov	r0, r5
  404f80:	9301      	str	r3, [sp, #4]
  404f82:	9200      	str	r2, [sp, #0]
  404f84:	f000 fa60 	bl	405448 <_sbrk_r>
  404f88:	1c43      	adds	r3, r0, #1
  404f8a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404f8e:	f000 8143 	beq.w	405218 <_malloc_r+0x518>
  404f92:	1a80      	subs	r0, r0, r2
  404f94:	4448      	add	r0, r9
  404f96:	f040 0001 	orr.w	r0, r0, #1
  404f9a:	6819      	ldr	r1, [r3, #0]
  404f9c:	60ba      	str	r2, [r7, #8]
  404f9e:	4449      	add	r1, r9
  404fa0:	42bc      	cmp	r4, r7
  404fa2:	6050      	str	r0, [r2, #4]
  404fa4:	6019      	str	r1, [r3, #0]
  404fa6:	d017      	beq.n	404fd8 <_malloc_r+0x2d8>
  404fa8:	f1b8 0f0f 	cmp.w	r8, #15
  404fac:	f240 80fb 	bls.w	4051a6 <_malloc_r+0x4a6>
  404fb0:	6860      	ldr	r0, [r4, #4]
  404fb2:	f1a8 020c 	sub.w	r2, r8, #12
  404fb6:	f022 0207 	bic.w	r2, r2, #7
  404fba:	eb04 0e02 	add.w	lr, r4, r2
  404fbe:	f000 0001 	and.w	r0, r0, #1
  404fc2:	f04f 0c05 	mov.w	ip, #5
  404fc6:	4310      	orrs	r0, r2
  404fc8:	2a0f      	cmp	r2, #15
  404fca:	6060      	str	r0, [r4, #4]
  404fcc:	f8ce c004 	str.w	ip, [lr, #4]
  404fd0:	f8ce c008 	str.w	ip, [lr, #8]
  404fd4:	f200 8117 	bhi.w	405206 <_malloc_r+0x506>
  404fd8:	4b1d      	ldr	r3, [pc, #116]	; (405050 <_malloc_r+0x350>)
  404fda:	68bc      	ldr	r4, [r7, #8]
  404fdc:	681a      	ldr	r2, [r3, #0]
  404fde:	4291      	cmp	r1, r2
  404fe0:	bf88      	it	hi
  404fe2:	6019      	strhi	r1, [r3, #0]
  404fe4:	4b1b      	ldr	r3, [pc, #108]	; (405054 <_malloc_r+0x354>)
  404fe6:	681a      	ldr	r2, [r3, #0]
  404fe8:	4291      	cmp	r1, r2
  404fea:	6862      	ldr	r2, [r4, #4]
  404fec:	bf88      	it	hi
  404fee:	6019      	strhi	r1, [r3, #0]
  404ff0:	f022 0203 	bic.w	r2, r2, #3
  404ff4:	4296      	cmp	r6, r2
  404ff6:	eba2 0306 	sub.w	r3, r2, r6
  404ffa:	d801      	bhi.n	405000 <_malloc_r+0x300>
  404ffc:	2b0f      	cmp	r3, #15
  404ffe:	dc04      	bgt.n	40500a <_malloc_r+0x30a>
  405000:	4628      	mov	r0, r5
  405002:	f000 fa1b 	bl	40543c <__malloc_unlock>
  405006:	2400      	movs	r4, #0
  405008:	e740      	b.n	404e8c <_malloc_r+0x18c>
  40500a:	19a2      	adds	r2, r4, r6
  40500c:	f043 0301 	orr.w	r3, r3, #1
  405010:	f046 0601 	orr.w	r6, r6, #1
  405014:	6066      	str	r6, [r4, #4]
  405016:	4628      	mov	r0, r5
  405018:	60ba      	str	r2, [r7, #8]
  40501a:	6053      	str	r3, [r2, #4]
  40501c:	f000 fa0e 	bl	40543c <__malloc_unlock>
  405020:	3408      	adds	r4, #8
  405022:	4620      	mov	r0, r4
  405024:	b003      	add	sp, #12
  405026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40502a:	2b14      	cmp	r3, #20
  40502c:	d971      	bls.n	405112 <_malloc_r+0x412>
  40502e:	2b54      	cmp	r3, #84	; 0x54
  405030:	f200 80a3 	bhi.w	40517a <_malloc_r+0x47a>
  405034:	0b33      	lsrs	r3, r6, #12
  405036:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40503a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40503e:	00c3      	lsls	r3, r0, #3
  405040:	e680      	b.n	404d44 <_malloc_r+0x44>
  405042:	bf00      	nop
  405044:	20400440 	.word	0x20400440
  405048:	2040c790 	.word	0x2040c790
  40504c:	2040c760 	.word	0x2040c760
  405050:	2040c788 	.word	0x2040c788
  405054:	2040c78c 	.word	0x2040c78c
  405058:	20400448 	.word	0x20400448
  40505c:	20400848 	.word	0x20400848
  405060:	0a5a      	lsrs	r2, r3, #9
  405062:	2a04      	cmp	r2, #4
  405064:	d95b      	bls.n	40511e <_malloc_r+0x41e>
  405066:	2a14      	cmp	r2, #20
  405068:	f200 80ae 	bhi.w	4051c8 <_malloc_r+0x4c8>
  40506c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405070:	00c9      	lsls	r1, r1, #3
  405072:	325b      	adds	r2, #91	; 0x5b
  405074:	eb07 0c01 	add.w	ip, r7, r1
  405078:	5879      	ldr	r1, [r7, r1]
  40507a:	f1ac 0c08 	sub.w	ip, ip, #8
  40507e:	458c      	cmp	ip, r1
  405080:	f000 8088 	beq.w	405194 <_malloc_r+0x494>
  405084:	684a      	ldr	r2, [r1, #4]
  405086:	f022 0203 	bic.w	r2, r2, #3
  40508a:	4293      	cmp	r3, r2
  40508c:	d273      	bcs.n	405176 <_malloc_r+0x476>
  40508e:	6889      	ldr	r1, [r1, #8]
  405090:	458c      	cmp	ip, r1
  405092:	d1f7      	bne.n	405084 <_malloc_r+0x384>
  405094:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405098:	687b      	ldr	r3, [r7, #4]
  40509a:	60e2      	str	r2, [r4, #12]
  40509c:	f8c4 c008 	str.w	ip, [r4, #8]
  4050a0:	6094      	str	r4, [r2, #8]
  4050a2:	f8cc 400c 	str.w	r4, [ip, #12]
  4050a6:	e68f      	b.n	404dc8 <_malloc_r+0xc8>
  4050a8:	19a1      	adds	r1, r4, r6
  4050aa:	f046 0c01 	orr.w	ip, r6, #1
  4050ae:	f042 0601 	orr.w	r6, r2, #1
  4050b2:	f8c4 c004 	str.w	ip, [r4, #4]
  4050b6:	4628      	mov	r0, r5
  4050b8:	6179      	str	r1, [r7, #20]
  4050ba:	6139      	str	r1, [r7, #16]
  4050bc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4050c0:	f8c1 e008 	str.w	lr, [r1, #8]
  4050c4:	604e      	str	r6, [r1, #4]
  4050c6:	50e2      	str	r2, [r4, r3]
  4050c8:	f000 f9b8 	bl	40543c <__malloc_unlock>
  4050cc:	3408      	adds	r4, #8
  4050ce:	e6dd      	b.n	404e8c <_malloc_r+0x18c>
  4050d0:	687b      	ldr	r3, [r7, #4]
  4050d2:	e679      	b.n	404dc8 <_malloc_r+0xc8>
  4050d4:	f108 0801 	add.w	r8, r8, #1
  4050d8:	f018 0f03 	tst.w	r8, #3
  4050dc:	f10c 0c08 	add.w	ip, ip, #8
  4050e0:	f47f ae85 	bne.w	404dee <_malloc_r+0xee>
  4050e4:	e02d      	b.n	405142 <_malloc_r+0x442>
  4050e6:	68dc      	ldr	r4, [r3, #12]
  4050e8:	42a3      	cmp	r3, r4
  4050ea:	bf08      	it	eq
  4050ec:	3002      	addeq	r0, #2
  4050ee:	f43f ae3e 	beq.w	404d6e <_malloc_r+0x6e>
  4050f2:	e6bb      	b.n	404e6c <_malloc_r+0x16c>
  4050f4:	4419      	add	r1, r3
  4050f6:	461c      	mov	r4, r3
  4050f8:	684a      	ldr	r2, [r1, #4]
  4050fa:	68db      	ldr	r3, [r3, #12]
  4050fc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405100:	f042 0201 	orr.w	r2, r2, #1
  405104:	604a      	str	r2, [r1, #4]
  405106:	4628      	mov	r0, r5
  405108:	60f3      	str	r3, [r6, #12]
  40510a:	609e      	str	r6, [r3, #8]
  40510c:	f000 f996 	bl	40543c <__malloc_unlock>
  405110:	e6bc      	b.n	404e8c <_malloc_r+0x18c>
  405112:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405116:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40511a:	00c3      	lsls	r3, r0, #3
  40511c:	e612      	b.n	404d44 <_malloc_r+0x44>
  40511e:	099a      	lsrs	r2, r3, #6
  405120:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405124:	00c9      	lsls	r1, r1, #3
  405126:	3238      	adds	r2, #56	; 0x38
  405128:	e7a4      	b.n	405074 <_malloc_r+0x374>
  40512a:	42bc      	cmp	r4, r7
  40512c:	d054      	beq.n	4051d8 <_malloc_r+0x4d8>
  40512e:	68bc      	ldr	r4, [r7, #8]
  405130:	6862      	ldr	r2, [r4, #4]
  405132:	f022 0203 	bic.w	r2, r2, #3
  405136:	e75d      	b.n	404ff4 <_malloc_r+0x2f4>
  405138:	f859 3908 	ldr.w	r3, [r9], #-8
  40513c:	4599      	cmp	r9, r3
  40513e:	f040 8086 	bne.w	40524e <_malloc_r+0x54e>
  405142:	f010 0f03 	tst.w	r0, #3
  405146:	f100 30ff 	add.w	r0, r0, #4294967295
  40514a:	d1f5      	bne.n	405138 <_malloc_r+0x438>
  40514c:	687b      	ldr	r3, [r7, #4]
  40514e:	ea23 0304 	bic.w	r3, r3, r4
  405152:	607b      	str	r3, [r7, #4]
  405154:	0064      	lsls	r4, r4, #1
  405156:	429c      	cmp	r4, r3
  405158:	f63f aec7 	bhi.w	404eea <_malloc_r+0x1ea>
  40515c:	2c00      	cmp	r4, #0
  40515e:	f43f aec4 	beq.w	404eea <_malloc_r+0x1ea>
  405162:	421c      	tst	r4, r3
  405164:	4640      	mov	r0, r8
  405166:	f47f ae3e 	bne.w	404de6 <_malloc_r+0xe6>
  40516a:	0064      	lsls	r4, r4, #1
  40516c:	421c      	tst	r4, r3
  40516e:	f100 0004 	add.w	r0, r0, #4
  405172:	d0fa      	beq.n	40516a <_malloc_r+0x46a>
  405174:	e637      	b.n	404de6 <_malloc_r+0xe6>
  405176:	468c      	mov	ip, r1
  405178:	e78c      	b.n	405094 <_malloc_r+0x394>
  40517a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40517e:	d815      	bhi.n	4051ac <_malloc_r+0x4ac>
  405180:	0bf3      	lsrs	r3, r6, #15
  405182:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405186:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40518a:	00c3      	lsls	r3, r0, #3
  40518c:	e5da      	b.n	404d44 <_malloc_r+0x44>
  40518e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405192:	e6ed      	b.n	404f70 <_malloc_r+0x270>
  405194:	687b      	ldr	r3, [r7, #4]
  405196:	1092      	asrs	r2, r2, #2
  405198:	2101      	movs	r1, #1
  40519a:	fa01 f202 	lsl.w	r2, r1, r2
  40519e:	4313      	orrs	r3, r2
  4051a0:	607b      	str	r3, [r7, #4]
  4051a2:	4662      	mov	r2, ip
  4051a4:	e779      	b.n	40509a <_malloc_r+0x39a>
  4051a6:	2301      	movs	r3, #1
  4051a8:	6053      	str	r3, [r2, #4]
  4051aa:	e729      	b.n	405000 <_malloc_r+0x300>
  4051ac:	f240 5254 	movw	r2, #1364	; 0x554
  4051b0:	4293      	cmp	r3, r2
  4051b2:	d822      	bhi.n	4051fa <_malloc_r+0x4fa>
  4051b4:	0cb3      	lsrs	r3, r6, #18
  4051b6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4051ba:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4051be:	00c3      	lsls	r3, r0, #3
  4051c0:	e5c0      	b.n	404d44 <_malloc_r+0x44>
  4051c2:	f103 0b10 	add.w	fp, r3, #16
  4051c6:	e6ae      	b.n	404f26 <_malloc_r+0x226>
  4051c8:	2a54      	cmp	r2, #84	; 0x54
  4051ca:	d829      	bhi.n	405220 <_malloc_r+0x520>
  4051cc:	0b1a      	lsrs	r2, r3, #12
  4051ce:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4051d2:	00c9      	lsls	r1, r1, #3
  4051d4:	326e      	adds	r2, #110	; 0x6e
  4051d6:	e74d      	b.n	405074 <_malloc_r+0x374>
  4051d8:	4b20      	ldr	r3, [pc, #128]	; (40525c <_malloc_r+0x55c>)
  4051da:	6819      	ldr	r1, [r3, #0]
  4051dc:	4459      	add	r1, fp
  4051de:	6019      	str	r1, [r3, #0]
  4051e0:	e6b2      	b.n	404f48 <_malloc_r+0x248>
  4051e2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4051e6:	2800      	cmp	r0, #0
  4051e8:	f47f aeae 	bne.w	404f48 <_malloc_r+0x248>
  4051ec:	eb08 030b 	add.w	r3, r8, fp
  4051f0:	68ba      	ldr	r2, [r7, #8]
  4051f2:	f043 0301 	orr.w	r3, r3, #1
  4051f6:	6053      	str	r3, [r2, #4]
  4051f8:	e6ee      	b.n	404fd8 <_malloc_r+0x2d8>
  4051fa:	207f      	movs	r0, #127	; 0x7f
  4051fc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405200:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405204:	e59e      	b.n	404d44 <_malloc_r+0x44>
  405206:	f104 0108 	add.w	r1, r4, #8
  40520a:	4628      	mov	r0, r5
  40520c:	9300      	str	r3, [sp, #0]
  40520e:	f001 fbe1 	bl	4069d4 <_free_r>
  405212:	9b00      	ldr	r3, [sp, #0]
  405214:	6819      	ldr	r1, [r3, #0]
  405216:	e6df      	b.n	404fd8 <_malloc_r+0x2d8>
  405218:	2001      	movs	r0, #1
  40521a:	f04f 0900 	mov.w	r9, #0
  40521e:	e6bc      	b.n	404f9a <_malloc_r+0x29a>
  405220:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405224:	d805      	bhi.n	405232 <_malloc_r+0x532>
  405226:	0bda      	lsrs	r2, r3, #15
  405228:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40522c:	00c9      	lsls	r1, r1, #3
  40522e:	3277      	adds	r2, #119	; 0x77
  405230:	e720      	b.n	405074 <_malloc_r+0x374>
  405232:	f240 5154 	movw	r1, #1364	; 0x554
  405236:	428a      	cmp	r2, r1
  405238:	d805      	bhi.n	405246 <_malloc_r+0x546>
  40523a:	0c9a      	lsrs	r2, r3, #18
  40523c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405240:	00c9      	lsls	r1, r1, #3
  405242:	327c      	adds	r2, #124	; 0x7c
  405244:	e716      	b.n	405074 <_malloc_r+0x374>
  405246:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40524a:	227e      	movs	r2, #126	; 0x7e
  40524c:	e712      	b.n	405074 <_malloc_r+0x374>
  40524e:	687b      	ldr	r3, [r7, #4]
  405250:	e780      	b.n	405154 <_malloc_r+0x454>
  405252:	08f0      	lsrs	r0, r6, #3
  405254:	f106 0308 	add.w	r3, r6, #8
  405258:	e600      	b.n	404e5c <_malloc_r+0x15c>
  40525a:	bf00      	nop
  40525c:	2040c760 	.word	0x2040c760

00405260 <memcpy>:
  405260:	4684      	mov	ip, r0
  405262:	ea41 0300 	orr.w	r3, r1, r0
  405266:	f013 0303 	ands.w	r3, r3, #3
  40526a:	d16d      	bne.n	405348 <memcpy+0xe8>
  40526c:	3a40      	subs	r2, #64	; 0x40
  40526e:	d341      	bcc.n	4052f4 <memcpy+0x94>
  405270:	f851 3b04 	ldr.w	r3, [r1], #4
  405274:	f840 3b04 	str.w	r3, [r0], #4
  405278:	f851 3b04 	ldr.w	r3, [r1], #4
  40527c:	f840 3b04 	str.w	r3, [r0], #4
  405280:	f851 3b04 	ldr.w	r3, [r1], #4
  405284:	f840 3b04 	str.w	r3, [r0], #4
  405288:	f851 3b04 	ldr.w	r3, [r1], #4
  40528c:	f840 3b04 	str.w	r3, [r0], #4
  405290:	f851 3b04 	ldr.w	r3, [r1], #4
  405294:	f840 3b04 	str.w	r3, [r0], #4
  405298:	f851 3b04 	ldr.w	r3, [r1], #4
  40529c:	f840 3b04 	str.w	r3, [r0], #4
  4052a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4052a4:	f840 3b04 	str.w	r3, [r0], #4
  4052a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4052ac:	f840 3b04 	str.w	r3, [r0], #4
  4052b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4052b4:	f840 3b04 	str.w	r3, [r0], #4
  4052b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4052bc:	f840 3b04 	str.w	r3, [r0], #4
  4052c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4052c4:	f840 3b04 	str.w	r3, [r0], #4
  4052c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4052cc:	f840 3b04 	str.w	r3, [r0], #4
  4052d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4052d4:	f840 3b04 	str.w	r3, [r0], #4
  4052d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4052dc:	f840 3b04 	str.w	r3, [r0], #4
  4052e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4052e4:	f840 3b04 	str.w	r3, [r0], #4
  4052e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4052ec:	f840 3b04 	str.w	r3, [r0], #4
  4052f0:	3a40      	subs	r2, #64	; 0x40
  4052f2:	d2bd      	bcs.n	405270 <memcpy+0x10>
  4052f4:	3230      	adds	r2, #48	; 0x30
  4052f6:	d311      	bcc.n	40531c <memcpy+0xbc>
  4052f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4052fc:	f840 3b04 	str.w	r3, [r0], #4
  405300:	f851 3b04 	ldr.w	r3, [r1], #4
  405304:	f840 3b04 	str.w	r3, [r0], #4
  405308:	f851 3b04 	ldr.w	r3, [r1], #4
  40530c:	f840 3b04 	str.w	r3, [r0], #4
  405310:	f851 3b04 	ldr.w	r3, [r1], #4
  405314:	f840 3b04 	str.w	r3, [r0], #4
  405318:	3a10      	subs	r2, #16
  40531a:	d2ed      	bcs.n	4052f8 <memcpy+0x98>
  40531c:	320c      	adds	r2, #12
  40531e:	d305      	bcc.n	40532c <memcpy+0xcc>
  405320:	f851 3b04 	ldr.w	r3, [r1], #4
  405324:	f840 3b04 	str.w	r3, [r0], #4
  405328:	3a04      	subs	r2, #4
  40532a:	d2f9      	bcs.n	405320 <memcpy+0xc0>
  40532c:	3204      	adds	r2, #4
  40532e:	d008      	beq.n	405342 <memcpy+0xe2>
  405330:	07d2      	lsls	r2, r2, #31
  405332:	bf1c      	itt	ne
  405334:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405338:	f800 3b01 	strbne.w	r3, [r0], #1
  40533c:	d301      	bcc.n	405342 <memcpy+0xe2>
  40533e:	880b      	ldrh	r3, [r1, #0]
  405340:	8003      	strh	r3, [r0, #0]
  405342:	4660      	mov	r0, ip
  405344:	4770      	bx	lr
  405346:	bf00      	nop
  405348:	2a08      	cmp	r2, #8
  40534a:	d313      	bcc.n	405374 <memcpy+0x114>
  40534c:	078b      	lsls	r3, r1, #30
  40534e:	d08d      	beq.n	40526c <memcpy+0xc>
  405350:	f010 0303 	ands.w	r3, r0, #3
  405354:	d08a      	beq.n	40526c <memcpy+0xc>
  405356:	f1c3 0304 	rsb	r3, r3, #4
  40535a:	1ad2      	subs	r2, r2, r3
  40535c:	07db      	lsls	r3, r3, #31
  40535e:	bf1c      	itt	ne
  405360:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405364:	f800 3b01 	strbne.w	r3, [r0], #1
  405368:	d380      	bcc.n	40526c <memcpy+0xc>
  40536a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40536e:	f820 3b02 	strh.w	r3, [r0], #2
  405372:	e77b      	b.n	40526c <memcpy+0xc>
  405374:	3a04      	subs	r2, #4
  405376:	d3d9      	bcc.n	40532c <memcpy+0xcc>
  405378:	3a01      	subs	r2, #1
  40537a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40537e:	f800 3b01 	strb.w	r3, [r0], #1
  405382:	d2f9      	bcs.n	405378 <memcpy+0x118>
  405384:	780b      	ldrb	r3, [r1, #0]
  405386:	7003      	strb	r3, [r0, #0]
  405388:	784b      	ldrb	r3, [r1, #1]
  40538a:	7043      	strb	r3, [r0, #1]
  40538c:	788b      	ldrb	r3, [r1, #2]
  40538e:	7083      	strb	r3, [r0, #2]
  405390:	4660      	mov	r0, ip
  405392:	4770      	bx	lr

00405394 <memset>:
  405394:	b470      	push	{r4, r5, r6}
  405396:	0786      	lsls	r6, r0, #30
  405398:	d046      	beq.n	405428 <memset+0x94>
  40539a:	1e54      	subs	r4, r2, #1
  40539c:	2a00      	cmp	r2, #0
  40539e:	d041      	beq.n	405424 <memset+0x90>
  4053a0:	b2ca      	uxtb	r2, r1
  4053a2:	4603      	mov	r3, r0
  4053a4:	e002      	b.n	4053ac <memset+0x18>
  4053a6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4053aa:	d33b      	bcc.n	405424 <memset+0x90>
  4053ac:	f803 2b01 	strb.w	r2, [r3], #1
  4053b0:	079d      	lsls	r5, r3, #30
  4053b2:	d1f8      	bne.n	4053a6 <memset+0x12>
  4053b4:	2c03      	cmp	r4, #3
  4053b6:	d92e      	bls.n	405416 <memset+0x82>
  4053b8:	b2cd      	uxtb	r5, r1
  4053ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4053be:	2c0f      	cmp	r4, #15
  4053c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4053c4:	d919      	bls.n	4053fa <memset+0x66>
  4053c6:	f103 0210 	add.w	r2, r3, #16
  4053ca:	4626      	mov	r6, r4
  4053cc:	3e10      	subs	r6, #16
  4053ce:	2e0f      	cmp	r6, #15
  4053d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4053d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4053d8:	f842 5c08 	str.w	r5, [r2, #-8]
  4053dc:	f842 5c04 	str.w	r5, [r2, #-4]
  4053e0:	f102 0210 	add.w	r2, r2, #16
  4053e4:	d8f2      	bhi.n	4053cc <memset+0x38>
  4053e6:	f1a4 0210 	sub.w	r2, r4, #16
  4053ea:	f022 020f 	bic.w	r2, r2, #15
  4053ee:	f004 040f 	and.w	r4, r4, #15
  4053f2:	3210      	adds	r2, #16
  4053f4:	2c03      	cmp	r4, #3
  4053f6:	4413      	add	r3, r2
  4053f8:	d90d      	bls.n	405416 <memset+0x82>
  4053fa:	461e      	mov	r6, r3
  4053fc:	4622      	mov	r2, r4
  4053fe:	3a04      	subs	r2, #4
  405400:	2a03      	cmp	r2, #3
  405402:	f846 5b04 	str.w	r5, [r6], #4
  405406:	d8fa      	bhi.n	4053fe <memset+0x6a>
  405408:	1f22      	subs	r2, r4, #4
  40540a:	f022 0203 	bic.w	r2, r2, #3
  40540e:	3204      	adds	r2, #4
  405410:	4413      	add	r3, r2
  405412:	f004 0403 	and.w	r4, r4, #3
  405416:	b12c      	cbz	r4, 405424 <memset+0x90>
  405418:	b2c9      	uxtb	r1, r1
  40541a:	441c      	add	r4, r3
  40541c:	f803 1b01 	strb.w	r1, [r3], #1
  405420:	429c      	cmp	r4, r3
  405422:	d1fb      	bne.n	40541c <memset+0x88>
  405424:	bc70      	pop	{r4, r5, r6}
  405426:	4770      	bx	lr
  405428:	4614      	mov	r4, r2
  40542a:	4603      	mov	r3, r0
  40542c:	e7c2      	b.n	4053b4 <memset+0x20>
  40542e:	bf00      	nop

00405430 <__malloc_lock>:
  405430:	4801      	ldr	r0, [pc, #4]	; (405438 <__malloc_lock+0x8>)
  405432:	f001 bd69 	b.w	406f08 <__retarget_lock_acquire_recursive>
  405436:	bf00      	nop
  405438:	2040c884 	.word	0x2040c884

0040543c <__malloc_unlock>:
  40543c:	4801      	ldr	r0, [pc, #4]	; (405444 <__malloc_unlock+0x8>)
  40543e:	f001 bd65 	b.w	406f0c <__retarget_lock_release_recursive>
  405442:	bf00      	nop
  405444:	2040c884 	.word	0x2040c884

00405448 <_sbrk_r>:
  405448:	b538      	push	{r3, r4, r5, lr}
  40544a:	4c07      	ldr	r4, [pc, #28]	; (405468 <_sbrk_r+0x20>)
  40544c:	2300      	movs	r3, #0
  40544e:	4605      	mov	r5, r0
  405450:	4608      	mov	r0, r1
  405452:	6023      	str	r3, [r4, #0]
  405454:	f7fc fd90 	bl	401f78 <_sbrk>
  405458:	1c43      	adds	r3, r0, #1
  40545a:	d000      	beq.n	40545e <_sbrk_r+0x16>
  40545c:	bd38      	pop	{r3, r4, r5, pc}
  40545e:	6823      	ldr	r3, [r4, #0]
  405460:	2b00      	cmp	r3, #0
  405462:	d0fb      	beq.n	40545c <_sbrk_r+0x14>
  405464:	602b      	str	r3, [r5, #0]
  405466:	bd38      	pop	{r3, r4, r5, pc}
  405468:	2040c898 	.word	0x2040c898

0040546c <setbuf>:
  40546c:	2900      	cmp	r1, #0
  40546e:	bf0c      	ite	eq
  405470:	2202      	moveq	r2, #2
  405472:	2200      	movne	r2, #0
  405474:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405478:	f000 b800 	b.w	40547c <setvbuf>

0040547c <setvbuf>:
  40547c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405480:	4c61      	ldr	r4, [pc, #388]	; (405608 <setvbuf+0x18c>)
  405482:	6825      	ldr	r5, [r4, #0]
  405484:	b083      	sub	sp, #12
  405486:	4604      	mov	r4, r0
  405488:	460f      	mov	r7, r1
  40548a:	4690      	mov	r8, r2
  40548c:	461e      	mov	r6, r3
  40548e:	b115      	cbz	r5, 405496 <setvbuf+0x1a>
  405490:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405492:	2b00      	cmp	r3, #0
  405494:	d064      	beq.n	405560 <setvbuf+0xe4>
  405496:	f1b8 0f02 	cmp.w	r8, #2
  40549a:	d006      	beq.n	4054aa <setvbuf+0x2e>
  40549c:	f1b8 0f01 	cmp.w	r8, #1
  4054a0:	f200 809f 	bhi.w	4055e2 <setvbuf+0x166>
  4054a4:	2e00      	cmp	r6, #0
  4054a6:	f2c0 809c 	blt.w	4055e2 <setvbuf+0x166>
  4054aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4054ac:	07d8      	lsls	r0, r3, #31
  4054ae:	d534      	bpl.n	40551a <setvbuf+0x9e>
  4054b0:	4621      	mov	r1, r4
  4054b2:	4628      	mov	r0, r5
  4054b4:	f001 f910 	bl	4066d8 <_fflush_r>
  4054b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4054ba:	b141      	cbz	r1, 4054ce <setvbuf+0x52>
  4054bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4054c0:	4299      	cmp	r1, r3
  4054c2:	d002      	beq.n	4054ca <setvbuf+0x4e>
  4054c4:	4628      	mov	r0, r5
  4054c6:	f001 fa85 	bl	4069d4 <_free_r>
  4054ca:	2300      	movs	r3, #0
  4054cc:	6323      	str	r3, [r4, #48]	; 0x30
  4054ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054d2:	2200      	movs	r2, #0
  4054d4:	61a2      	str	r2, [r4, #24]
  4054d6:	6062      	str	r2, [r4, #4]
  4054d8:	061a      	lsls	r2, r3, #24
  4054da:	d43a      	bmi.n	405552 <setvbuf+0xd6>
  4054dc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4054e0:	f023 0303 	bic.w	r3, r3, #3
  4054e4:	f1b8 0f02 	cmp.w	r8, #2
  4054e8:	81a3      	strh	r3, [r4, #12]
  4054ea:	d01d      	beq.n	405528 <setvbuf+0xac>
  4054ec:	ab01      	add	r3, sp, #4
  4054ee:	466a      	mov	r2, sp
  4054f0:	4621      	mov	r1, r4
  4054f2:	4628      	mov	r0, r5
  4054f4:	f001 fd0c 	bl	406f10 <__swhatbuf_r>
  4054f8:	89a3      	ldrh	r3, [r4, #12]
  4054fa:	4318      	orrs	r0, r3
  4054fc:	81a0      	strh	r0, [r4, #12]
  4054fe:	2e00      	cmp	r6, #0
  405500:	d132      	bne.n	405568 <setvbuf+0xec>
  405502:	9e00      	ldr	r6, [sp, #0]
  405504:	4630      	mov	r0, r6
  405506:	f7ff fbf3 	bl	404cf0 <malloc>
  40550a:	4607      	mov	r7, r0
  40550c:	2800      	cmp	r0, #0
  40550e:	d06b      	beq.n	4055e8 <setvbuf+0x16c>
  405510:	89a3      	ldrh	r3, [r4, #12]
  405512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405516:	81a3      	strh	r3, [r4, #12]
  405518:	e028      	b.n	40556c <setvbuf+0xf0>
  40551a:	89a3      	ldrh	r3, [r4, #12]
  40551c:	0599      	lsls	r1, r3, #22
  40551e:	d4c7      	bmi.n	4054b0 <setvbuf+0x34>
  405520:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405522:	f001 fcf1 	bl	406f08 <__retarget_lock_acquire_recursive>
  405526:	e7c3      	b.n	4054b0 <setvbuf+0x34>
  405528:	2500      	movs	r5, #0
  40552a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40552c:	2600      	movs	r6, #0
  40552e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405532:	f043 0302 	orr.w	r3, r3, #2
  405536:	2001      	movs	r0, #1
  405538:	60a6      	str	r6, [r4, #8]
  40553a:	07ce      	lsls	r6, r1, #31
  40553c:	81a3      	strh	r3, [r4, #12]
  40553e:	6022      	str	r2, [r4, #0]
  405540:	6122      	str	r2, [r4, #16]
  405542:	6160      	str	r0, [r4, #20]
  405544:	d401      	bmi.n	40554a <setvbuf+0xce>
  405546:	0598      	lsls	r0, r3, #22
  405548:	d53e      	bpl.n	4055c8 <setvbuf+0x14c>
  40554a:	4628      	mov	r0, r5
  40554c:	b003      	add	sp, #12
  40554e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405552:	6921      	ldr	r1, [r4, #16]
  405554:	4628      	mov	r0, r5
  405556:	f001 fa3d 	bl	4069d4 <_free_r>
  40555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40555e:	e7bd      	b.n	4054dc <setvbuf+0x60>
  405560:	4628      	mov	r0, r5
  405562:	f001 f911 	bl	406788 <__sinit>
  405566:	e796      	b.n	405496 <setvbuf+0x1a>
  405568:	2f00      	cmp	r7, #0
  40556a:	d0cb      	beq.n	405504 <setvbuf+0x88>
  40556c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40556e:	2b00      	cmp	r3, #0
  405570:	d033      	beq.n	4055da <setvbuf+0x15e>
  405572:	9b00      	ldr	r3, [sp, #0]
  405574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405578:	6027      	str	r7, [r4, #0]
  40557a:	429e      	cmp	r6, r3
  40557c:	bf1c      	itt	ne
  40557e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  405582:	81a2      	strhne	r2, [r4, #12]
  405584:	f1b8 0f01 	cmp.w	r8, #1
  405588:	bf04      	itt	eq
  40558a:	f042 0201 	orreq.w	r2, r2, #1
  40558e:	81a2      	strheq	r2, [r4, #12]
  405590:	b292      	uxth	r2, r2
  405592:	f012 0308 	ands.w	r3, r2, #8
  405596:	6127      	str	r7, [r4, #16]
  405598:	6166      	str	r6, [r4, #20]
  40559a:	d00e      	beq.n	4055ba <setvbuf+0x13e>
  40559c:	07d1      	lsls	r1, r2, #31
  40559e:	d51a      	bpl.n	4055d6 <setvbuf+0x15a>
  4055a0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4055a2:	4276      	negs	r6, r6
  4055a4:	2300      	movs	r3, #0
  4055a6:	f015 0501 	ands.w	r5, r5, #1
  4055aa:	61a6      	str	r6, [r4, #24]
  4055ac:	60a3      	str	r3, [r4, #8]
  4055ae:	d009      	beq.n	4055c4 <setvbuf+0x148>
  4055b0:	2500      	movs	r5, #0
  4055b2:	4628      	mov	r0, r5
  4055b4:	b003      	add	sp, #12
  4055b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4055ba:	60a3      	str	r3, [r4, #8]
  4055bc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4055be:	f015 0501 	ands.w	r5, r5, #1
  4055c2:	d1f5      	bne.n	4055b0 <setvbuf+0x134>
  4055c4:	0593      	lsls	r3, r2, #22
  4055c6:	d4c0      	bmi.n	40554a <setvbuf+0xce>
  4055c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4055ca:	f001 fc9f 	bl	406f0c <__retarget_lock_release_recursive>
  4055ce:	4628      	mov	r0, r5
  4055d0:	b003      	add	sp, #12
  4055d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4055d6:	60a6      	str	r6, [r4, #8]
  4055d8:	e7f0      	b.n	4055bc <setvbuf+0x140>
  4055da:	4628      	mov	r0, r5
  4055dc:	f001 f8d4 	bl	406788 <__sinit>
  4055e0:	e7c7      	b.n	405572 <setvbuf+0xf6>
  4055e2:	f04f 35ff 	mov.w	r5, #4294967295
  4055e6:	e7b0      	b.n	40554a <setvbuf+0xce>
  4055e8:	f8dd 9000 	ldr.w	r9, [sp]
  4055ec:	45b1      	cmp	r9, r6
  4055ee:	d004      	beq.n	4055fa <setvbuf+0x17e>
  4055f0:	4648      	mov	r0, r9
  4055f2:	f7ff fb7d 	bl	404cf0 <malloc>
  4055f6:	4607      	mov	r7, r0
  4055f8:	b920      	cbnz	r0, 405604 <setvbuf+0x188>
  4055fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4055fe:	f04f 35ff 	mov.w	r5, #4294967295
  405602:	e792      	b.n	40552a <setvbuf+0xae>
  405604:	464e      	mov	r6, r9
  405606:	e783      	b.n	405510 <setvbuf+0x94>
  405608:	20400014 	.word	0x20400014
	...

00405640 <strlen>:
  405640:	f890 f000 	pld	[r0]
  405644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405648:	f020 0107 	bic.w	r1, r0, #7
  40564c:	f06f 0c00 	mvn.w	ip, #0
  405650:	f010 0407 	ands.w	r4, r0, #7
  405654:	f891 f020 	pld	[r1, #32]
  405658:	f040 8049 	bne.w	4056ee <strlen+0xae>
  40565c:	f04f 0400 	mov.w	r4, #0
  405660:	f06f 0007 	mvn.w	r0, #7
  405664:	e9d1 2300 	ldrd	r2, r3, [r1]
  405668:	f891 f040 	pld	[r1, #64]	; 0x40
  40566c:	f100 0008 	add.w	r0, r0, #8
  405670:	fa82 f24c 	uadd8	r2, r2, ip
  405674:	faa4 f28c 	sel	r2, r4, ip
  405678:	fa83 f34c 	uadd8	r3, r3, ip
  40567c:	faa2 f38c 	sel	r3, r2, ip
  405680:	bb4b      	cbnz	r3, 4056d6 <strlen+0x96>
  405682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405686:	fa82 f24c 	uadd8	r2, r2, ip
  40568a:	f100 0008 	add.w	r0, r0, #8
  40568e:	faa4 f28c 	sel	r2, r4, ip
  405692:	fa83 f34c 	uadd8	r3, r3, ip
  405696:	faa2 f38c 	sel	r3, r2, ip
  40569a:	b9e3      	cbnz	r3, 4056d6 <strlen+0x96>
  40569c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4056a0:	fa82 f24c 	uadd8	r2, r2, ip
  4056a4:	f100 0008 	add.w	r0, r0, #8
  4056a8:	faa4 f28c 	sel	r2, r4, ip
  4056ac:	fa83 f34c 	uadd8	r3, r3, ip
  4056b0:	faa2 f38c 	sel	r3, r2, ip
  4056b4:	b97b      	cbnz	r3, 4056d6 <strlen+0x96>
  4056b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4056ba:	f101 0120 	add.w	r1, r1, #32
  4056be:	fa82 f24c 	uadd8	r2, r2, ip
  4056c2:	f100 0008 	add.w	r0, r0, #8
  4056c6:	faa4 f28c 	sel	r2, r4, ip
  4056ca:	fa83 f34c 	uadd8	r3, r3, ip
  4056ce:	faa2 f38c 	sel	r3, r2, ip
  4056d2:	2b00      	cmp	r3, #0
  4056d4:	d0c6      	beq.n	405664 <strlen+0x24>
  4056d6:	2a00      	cmp	r2, #0
  4056d8:	bf04      	itt	eq
  4056da:	3004      	addeq	r0, #4
  4056dc:	461a      	moveq	r2, r3
  4056de:	ba12      	rev	r2, r2
  4056e0:	fab2 f282 	clz	r2, r2
  4056e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4056e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4056ec:	4770      	bx	lr
  4056ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4056f2:	f004 0503 	and.w	r5, r4, #3
  4056f6:	f1c4 0000 	rsb	r0, r4, #0
  4056fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4056fe:	f014 0f04 	tst.w	r4, #4
  405702:	f891 f040 	pld	[r1, #64]	; 0x40
  405706:	fa0c f505 	lsl.w	r5, ip, r5
  40570a:	ea62 0205 	orn	r2, r2, r5
  40570e:	bf1c      	itt	ne
  405710:	ea63 0305 	ornne	r3, r3, r5
  405714:	4662      	movne	r2, ip
  405716:	f04f 0400 	mov.w	r4, #0
  40571a:	e7a9      	b.n	405670 <strlen+0x30>

0040571c <__sprint_r.part.0>:
  40571c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405720:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405722:	049c      	lsls	r4, r3, #18
  405724:	4693      	mov	fp, r2
  405726:	d52f      	bpl.n	405788 <__sprint_r.part.0+0x6c>
  405728:	6893      	ldr	r3, [r2, #8]
  40572a:	6812      	ldr	r2, [r2, #0]
  40572c:	b353      	cbz	r3, 405784 <__sprint_r.part.0+0x68>
  40572e:	460e      	mov	r6, r1
  405730:	4607      	mov	r7, r0
  405732:	f102 0908 	add.w	r9, r2, #8
  405736:	e919 0420 	ldmdb	r9, {r5, sl}
  40573a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40573e:	d017      	beq.n	405770 <__sprint_r.part.0+0x54>
  405740:	3d04      	subs	r5, #4
  405742:	2400      	movs	r4, #0
  405744:	e001      	b.n	40574a <__sprint_r.part.0+0x2e>
  405746:	45a0      	cmp	r8, r4
  405748:	d010      	beq.n	40576c <__sprint_r.part.0+0x50>
  40574a:	4632      	mov	r2, r6
  40574c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405750:	4638      	mov	r0, r7
  405752:	f001 f8bb 	bl	4068cc <_fputwc_r>
  405756:	1c43      	adds	r3, r0, #1
  405758:	f104 0401 	add.w	r4, r4, #1
  40575c:	d1f3      	bne.n	405746 <__sprint_r.part.0+0x2a>
  40575e:	2300      	movs	r3, #0
  405760:	f8cb 3008 	str.w	r3, [fp, #8]
  405764:	f8cb 3004 	str.w	r3, [fp, #4]
  405768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40576c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405770:	f02a 0a03 	bic.w	sl, sl, #3
  405774:	eba3 030a 	sub.w	r3, r3, sl
  405778:	f8cb 3008 	str.w	r3, [fp, #8]
  40577c:	f109 0908 	add.w	r9, r9, #8
  405780:	2b00      	cmp	r3, #0
  405782:	d1d8      	bne.n	405736 <__sprint_r.part.0+0x1a>
  405784:	2000      	movs	r0, #0
  405786:	e7ea      	b.n	40575e <__sprint_r.part.0+0x42>
  405788:	f001 fa0a 	bl	406ba0 <__sfvwrite_r>
  40578c:	2300      	movs	r3, #0
  40578e:	f8cb 3008 	str.w	r3, [fp, #8]
  405792:	f8cb 3004 	str.w	r3, [fp, #4]
  405796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40579a:	bf00      	nop

0040579c <_vfiprintf_r>:
  40579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057a0:	b0ad      	sub	sp, #180	; 0xb4
  4057a2:	461d      	mov	r5, r3
  4057a4:	468b      	mov	fp, r1
  4057a6:	4690      	mov	r8, r2
  4057a8:	9307      	str	r3, [sp, #28]
  4057aa:	9006      	str	r0, [sp, #24]
  4057ac:	b118      	cbz	r0, 4057b6 <_vfiprintf_r+0x1a>
  4057ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4057b0:	2b00      	cmp	r3, #0
  4057b2:	f000 80f3 	beq.w	40599c <_vfiprintf_r+0x200>
  4057b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4057ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4057be:	07df      	lsls	r7, r3, #31
  4057c0:	b281      	uxth	r1, r0
  4057c2:	d402      	bmi.n	4057ca <_vfiprintf_r+0x2e>
  4057c4:	058e      	lsls	r6, r1, #22
  4057c6:	f140 80fc 	bpl.w	4059c2 <_vfiprintf_r+0x226>
  4057ca:	048c      	lsls	r4, r1, #18
  4057cc:	d40a      	bmi.n	4057e4 <_vfiprintf_r+0x48>
  4057ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4057d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4057d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4057da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4057de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4057e2:	b289      	uxth	r1, r1
  4057e4:	0708      	lsls	r0, r1, #28
  4057e6:	f140 80b3 	bpl.w	405950 <_vfiprintf_r+0x1b4>
  4057ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4057ee:	2b00      	cmp	r3, #0
  4057f0:	f000 80ae 	beq.w	405950 <_vfiprintf_r+0x1b4>
  4057f4:	f001 031a 	and.w	r3, r1, #26
  4057f8:	2b0a      	cmp	r3, #10
  4057fa:	f000 80b5 	beq.w	405968 <_vfiprintf_r+0x1cc>
  4057fe:	2300      	movs	r3, #0
  405800:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405804:	930b      	str	r3, [sp, #44]	; 0x2c
  405806:	9311      	str	r3, [sp, #68]	; 0x44
  405808:	9310      	str	r3, [sp, #64]	; 0x40
  40580a:	9303      	str	r3, [sp, #12]
  40580c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405810:	46ca      	mov	sl, r9
  405812:	f8cd b010 	str.w	fp, [sp, #16]
  405816:	f898 3000 	ldrb.w	r3, [r8]
  40581a:	4644      	mov	r4, r8
  40581c:	b1fb      	cbz	r3, 40585e <_vfiprintf_r+0xc2>
  40581e:	2b25      	cmp	r3, #37	; 0x25
  405820:	d102      	bne.n	405828 <_vfiprintf_r+0x8c>
  405822:	e01c      	b.n	40585e <_vfiprintf_r+0xc2>
  405824:	2b25      	cmp	r3, #37	; 0x25
  405826:	d003      	beq.n	405830 <_vfiprintf_r+0x94>
  405828:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40582c:	2b00      	cmp	r3, #0
  40582e:	d1f9      	bne.n	405824 <_vfiprintf_r+0x88>
  405830:	eba4 0508 	sub.w	r5, r4, r8
  405834:	b19d      	cbz	r5, 40585e <_vfiprintf_r+0xc2>
  405836:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405838:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40583a:	f8ca 8000 	str.w	r8, [sl]
  40583e:	3301      	adds	r3, #1
  405840:	442a      	add	r2, r5
  405842:	2b07      	cmp	r3, #7
  405844:	f8ca 5004 	str.w	r5, [sl, #4]
  405848:	9211      	str	r2, [sp, #68]	; 0x44
  40584a:	9310      	str	r3, [sp, #64]	; 0x40
  40584c:	dd7a      	ble.n	405944 <_vfiprintf_r+0x1a8>
  40584e:	2a00      	cmp	r2, #0
  405850:	f040 84b0 	bne.w	4061b4 <_vfiprintf_r+0xa18>
  405854:	9b03      	ldr	r3, [sp, #12]
  405856:	9210      	str	r2, [sp, #64]	; 0x40
  405858:	442b      	add	r3, r5
  40585a:	46ca      	mov	sl, r9
  40585c:	9303      	str	r3, [sp, #12]
  40585e:	7823      	ldrb	r3, [r4, #0]
  405860:	2b00      	cmp	r3, #0
  405862:	f000 83e0 	beq.w	406026 <_vfiprintf_r+0x88a>
  405866:	2000      	movs	r0, #0
  405868:	f04f 0300 	mov.w	r3, #0
  40586c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405870:	f104 0801 	add.w	r8, r4, #1
  405874:	7862      	ldrb	r2, [r4, #1]
  405876:	4605      	mov	r5, r0
  405878:	4606      	mov	r6, r0
  40587a:	4603      	mov	r3, r0
  40587c:	f04f 34ff 	mov.w	r4, #4294967295
  405880:	f108 0801 	add.w	r8, r8, #1
  405884:	f1a2 0120 	sub.w	r1, r2, #32
  405888:	2958      	cmp	r1, #88	; 0x58
  40588a:	f200 82de 	bhi.w	405e4a <_vfiprintf_r+0x6ae>
  40588e:	e8df f011 	tbh	[pc, r1, lsl #1]
  405892:	0221      	.short	0x0221
  405894:	02dc02dc 	.word	0x02dc02dc
  405898:	02dc0229 	.word	0x02dc0229
  40589c:	02dc02dc 	.word	0x02dc02dc
  4058a0:	02dc02dc 	.word	0x02dc02dc
  4058a4:	028902dc 	.word	0x028902dc
  4058a8:	02dc0295 	.word	0x02dc0295
  4058ac:	02bd00a2 	.word	0x02bd00a2
  4058b0:	019f02dc 	.word	0x019f02dc
  4058b4:	01a401a4 	.word	0x01a401a4
  4058b8:	01a401a4 	.word	0x01a401a4
  4058bc:	01a401a4 	.word	0x01a401a4
  4058c0:	01a401a4 	.word	0x01a401a4
  4058c4:	02dc01a4 	.word	0x02dc01a4
  4058c8:	02dc02dc 	.word	0x02dc02dc
  4058cc:	02dc02dc 	.word	0x02dc02dc
  4058d0:	02dc02dc 	.word	0x02dc02dc
  4058d4:	02dc02dc 	.word	0x02dc02dc
  4058d8:	01b202dc 	.word	0x01b202dc
  4058dc:	02dc02dc 	.word	0x02dc02dc
  4058e0:	02dc02dc 	.word	0x02dc02dc
  4058e4:	02dc02dc 	.word	0x02dc02dc
  4058e8:	02dc02dc 	.word	0x02dc02dc
  4058ec:	02dc02dc 	.word	0x02dc02dc
  4058f0:	02dc0197 	.word	0x02dc0197
  4058f4:	02dc02dc 	.word	0x02dc02dc
  4058f8:	02dc02dc 	.word	0x02dc02dc
  4058fc:	02dc019b 	.word	0x02dc019b
  405900:	025302dc 	.word	0x025302dc
  405904:	02dc02dc 	.word	0x02dc02dc
  405908:	02dc02dc 	.word	0x02dc02dc
  40590c:	02dc02dc 	.word	0x02dc02dc
  405910:	02dc02dc 	.word	0x02dc02dc
  405914:	02dc02dc 	.word	0x02dc02dc
  405918:	021b025a 	.word	0x021b025a
  40591c:	02dc02dc 	.word	0x02dc02dc
  405920:	026e02dc 	.word	0x026e02dc
  405924:	02dc021b 	.word	0x02dc021b
  405928:	027302dc 	.word	0x027302dc
  40592c:	01f502dc 	.word	0x01f502dc
  405930:	02090182 	.word	0x02090182
  405934:	02dc02d7 	.word	0x02dc02d7
  405938:	02dc029a 	.word	0x02dc029a
  40593c:	02dc00a7 	.word	0x02dc00a7
  405940:	022e02dc 	.word	0x022e02dc
  405944:	f10a 0a08 	add.w	sl, sl, #8
  405948:	9b03      	ldr	r3, [sp, #12]
  40594a:	442b      	add	r3, r5
  40594c:	9303      	str	r3, [sp, #12]
  40594e:	e786      	b.n	40585e <_vfiprintf_r+0xc2>
  405950:	4659      	mov	r1, fp
  405952:	9806      	ldr	r0, [sp, #24]
  405954:	f000 fdac 	bl	4064b0 <__swsetup_r>
  405958:	bb18      	cbnz	r0, 4059a2 <_vfiprintf_r+0x206>
  40595a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40595e:	f001 031a 	and.w	r3, r1, #26
  405962:	2b0a      	cmp	r3, #10
  405964:	f47f af4b 	bne.w	4057fe <_vfiprintf_r+0x62>
  405968:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40596c:	2b00      	cmp	r3, #0
  40596e:	f6ff af46 	blt.w	4057fe <_vfiprintf_r+0x62>
  405972:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405976:	07db      	lsls	r3, r3, #31
  405978:	d405      	bmi.n	405986 <_vfiprintf_r+0x1ea>
  40597a:	058f      	lsls	r7, r1, #22
  40597c:	d403      	bmi.n	405986 <_vfiprintf_r+0x1ea>
  40597e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405982:	f001 fac3 	bl	406f0c <__retarget_lock_release_recursive>
  405986:	462b      	mov	r3, r5
  405988:	4642      	mov	r2, r8
  40598a:	4659      	mov	r1, fp
  40598c:	9806      	ldr	r0, [sp, #24]
  40598e:	f000 fd4d 	bl	40642c <__sbprintf>
  405992:	9003      	str	r0, [sp, #12]
  405994:	9803      	ldr	r0, [sp, #12]
  405996:	b02d      	add	sp, #180	; 0xb4
  405998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40599c:	f000 fef4 	bl	406788 <__sinit>
  4059a0:	e709      	b.n	4057b6 <_vfiprintf_r+0x1a>
  4059a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4059a6:	07d9      	lsls	r1, r3, #31
  4059a8:	d404      	bmi.n	4059b4 <_vfiprintf_r+0x218>
  4059aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4059ae:	059a      	lsls	r2, r3, #22
  4059b0:	f140 84aa 	bpl.w	406308 <_vfiprintf_r+0xb6c>
  4059b4:	f04f 33ff 	mov.w	r3, #4294967295
  4059b8:	9303      	str	r3, [sp, #12]
  4059ba:	9803      	ldr	r0, [sp, #12]
  4059bc:	b02d      	add	sp, #180	; 0xb4
  4059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4059c6:	f001 fa9f 	bl	406f08 <__retarget_lock_acquire_recursive>
  4059ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4059ce:	b281      	uxth	r1, r0
  4059d0:	e6fb      	b.n	4057ca <_vfiprintf_r+0x2e>
  4059d2:	4276      	negs	r6, r6
  4059d4:	9207      	str	r2, [sp, #28]
  4059d6:	f043 0304 	orr.w	r3, r3, #4
  4059da:	f898 2000 	ldrb.w	r2, [r8]
  4059de:	e74f      	b.n	405880 <_vfiprintf_r+0xe4>
  4059e0:	9608      	str	r6, [sp, #32]
  4059e2:	069e      	lsls	r6, r3, #26
  4059e4:	f100 8450 	bmi.w	406288 <_vfiprintf_r+0xaec>
  4059e8:	9907      	ldr	r1, [sp, #28]
  4059ea:	06dd      	lsls	r5, r3, #27
  4059ec:	460a      	mov	r2, r1
  4059ee:	f100 83ef 	bmi.w	4061d0 <_vfiprintf_r+0xa34>
  4059f2:	0658      	lsls	r0, r3, #25
  4059f4:	f140 83ec 	bpl.w	4061d0 <_vfiprintf_r+0xa34>
  4059f8:	880e      	ldrh	r6, [r1, #0]
  4059fa:	3104      	adds	r1, #4
  4059fc:	2700      	movs	r7, #0
  4059fe:	2201      	movs	r2, #1
  405a00:	9107      	str	r1, [sp, #28]
  405a02:	f04f 0100 	mov.w	r1, #0
  405a06:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405a0a:	2500      	movs	r5, #0
  405a0c:	1c61      	adds	r1, r4, #1
  405a0e:	f000 8116 	beq.w	405c3e <_vfiprintf_r+0x4a2>
  405a12:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405a16:	9102      	str	r1, [sp, #8]
  405a18:	ea56 0107 	orrs.w	r1, r6, r7
  405a1c:	f040 8114 	bne.w	405c48 <_vfiprintf_r+0x4ac>
  405a20:	2c00      	cmp	r4, #0
  405a22:	f040 835c 	bne.w	4060de <_vfiprintf_r+0x942>
  405a26:	2a00      	cmp	r2, #0
  405a28:	f040 83b7 	bne.w	40619a <_vfiprintf_r+0x9fe>
  405a2c:	f013 0301 	ands.w	r3, r3, #1
  405a30:	9305      	str	r3, [sp, #20]
  405a32:	f000 8457 	beq.w	4062e4 <_vfiprintf_r+0xb48>
  405a36:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405a3a:	2330      	movs	r3, #48	; 0x30
  405a3c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405a40:	9b05      	ldr	r3, [sp, #20]
  405a42:	42a3      	cmp	r3, r4
  405a44:	bfb8      	it	lt
  405a46:	4623      	movlt	r3, r4
  405a48:	9301      	str	r3, [sp, #4]
  405a4a:	b10d      	cbz	r5, 405a50 <_vfiprintf_r+0x2b4>
  405a4c:	3301      	adds	r3, #1
  405a4e:	9301      	str	r3, [sp, #4]
  405a50:	9b02      	ldr	r3, [sp, #8]
  405a52:	f013 0302 	ands.w	r3, r3, #2
  405a56:	9309      	str	r3, [sp, #36]	; 0x24
  405a58:	d002      	beq.n	405a60 <_vfiprintf_r+0x2c4>
  405a5a:	9b01      	ldr	r3, [sp, #4]
  405a5c:	3302      	adds	r3, #2
  405a5e:	9301      	str	r3, [sp, #4]
  405a60:	9b02      	ldr	r3, [sp, #8]
  405a62:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405a66:	930a      	str	r3, [sp, #40]	; 0x28
  405a68:	f040 8217 	bne.w	405e9a <_vfiprintf_r+0x6fe>
  405a6c:	9b08      	ldr	r3, [sp, #32]
  405a6e:	9a01      	ldr	r2, [sp, #4]
  405a70:	1a9d      	subs	r5, r3, r2
  405a72:	2d00      	cmp	r5, #0
  405a74:	f340 8211 	ble.w	405e9a <_vfiprintf_r+0x6fe>
  405a78:	2d10      	cmp	r5, #16
  405a7a:	f340 8490 	ble.w	40639e <_vfiprintf_r+0xc02>
  405a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405a80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a82:	4ec4      	ldr	r6, [pc, #784]	; (405d94 <_vfiprintf_r+0x5f8>)
  405a84:	46d6      	mov	lr, sl
  405a86:	2710      	movs	r7, #16
  405a88:	46a2      	mov	sl, r4
  405a8a:	4619      	mov	r1, r3
  405a8c:	9c06      	ldr	r4, [sp, #24]
  405a8e:	e007      	b.n	405aa0 <_vfiprintf_r+0x304>
  405a90:	f101 0c02 	add.w	ip, r1, #2
  405a94:	f10e 0e08 	add.w	lr, lr, #8
  405a98:	4601      	mov	r1, r0
  405a9a:	3d10      	subs	r5, #16
  405a9c:	2d10      	cmp	r5, #16
  405a9e:	dd11      	ble.n	405ac4 <_vfiprintf_r+0x328>
  405aa0:	1c48      	adds	r0, r1, #1
  405aa2:	3210      	adds	r2, #16
  405aa4:	2807      	cmp	r0, #7
  405aa6:	9211      	str	r2, [sp, #68]	; 0x44
  405aa8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405aac:	9010      	str	r0, [sp, #64]	; 0x40
  405aae:	ddef      	ble.n	405a90 <_vfiprintf_r+0x2f4>
  405ab0:	2a00      	cmp	r2, #0
  405ab2:	f040 81e4 	bne.w	405e7e <_vfiprintf_r+0x6e2>
  405ab6:	3d10      	subs	r5, #16
  405ab8:	2d10      	cmp	r5, #16
  405aba:	4611      	mov	r1, r2
  405abc:	f04f 0c01 	mov.w	ip, #1
  405ac0:	46ce      	mov	lr, r9
  405ac2:	dced      	bgt.n	405aa0 <_vfiprintf_r+0x304>
  405ac4:	4654      	mov	r4, sl
  405ac6:	4661      	mov	r1, ip
  405ac8:	46f2      	mov	sl, lr
  405aca:	442a      	add	r2, r5
  405acc:	2907      	cmp	r1, #7
  405ace:	9211      	str	r2, [sp, #68]	; 0x44
  405ad0:	f8ca 6000 	str.w	r6, [sl]
  405ad4:	f8ca 5004 	str.w	r5, [sl, #4]
  405ad8:	9110      	str	r1, [sp, #64]	; 0x40
  405ada:	f300 82ec 	bgt.w	4060b6 <_vfiprintf_r+0x91a>
  405ade:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405ae2:	f10a 0a08 	add.w	sl, sl, #8
  405ae6:	1c48      	adds	r0, r1, #1
  405ae8:	2d00      	cmp	r5, #0
  405aea:	f040 81de 	bne.w	405eaa <_vfiprintf_r+0x70e>
  405aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405af0:	2b00      	cmp	r3, #0
  405af2:	f000 81f8 	beq.w	405ee6 <_vfiprintf_r+0x74a>
  405af6:	3202      	adds	r2, #2
  405af8:	a90e      	add	r1, sp, #56	; 0x38
  405afa:	2302      	movs	r3, #2
  405afc:	2807      	cmp	r0, #7
  405afe:	9211      	str	r2, [sp, #68]	; 0x44
  405b00:	9010      	str	r0, [sp, #64]	; 0x40
  405b02:	e88a 000a 	stmia.w	sl, {r1, r3}
  405b06:	f340 81ea 	ble.w	405ede <_vfiprintf_r+0x742>
  405b0a:	2a00      	cmp	r2, #0
  405b0c:	f040 838c 	bne.w	406228 <_vfiprintf_r+0xa8c>
  405b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b12:	2b80      	cmp	r3, #128	; 0x80
  405b14:	f04f 0001 	mov.w	r0, #1
  405b18:	4611      	mov	r1, r2
  405b1a:	46ca      	mov	sl, r9
  405b1c:	f040 81e7 	bne.w	405eee <_vfiprintf_r+0x752>
  405b20:	9b08      	ldr	r3, [sp, #32]
  405b22:	9d01      	ldr	r5, [sp, #4]
  405b24:	1b5e      	subs	r6, r3, r5
  405b26:	2e00      	cmp	r6, #0
  405b28:	f340 81e1 	ble.w	405eee <_vfiprintf_r+0x752>
  405b2c:	2e10      	cmp	r6, #16
  405b2e:	4d9a      	ldr	r5, [pc, #616]	; (405d98 <_vfiprintf_r+0x5fc>)
  405b30:	f340 8450 	ble.w	4063d4 <_vfiprintf_r+0xc38>
  405b34:	46d4      	mov	ip, sl
  405b36:	2710      	movs	r7, #16
  405b38:	46a2      	mov	sl, r4
  405b3a:	9c06      	ldr	r4, [sp, #24]
  405b3c:	e007      	b.n	405b4e <_vfiprintf_r+0x3b2>
  405b3e:	f101 0e02 	add.w	lr, r1, #2
  405b42:	f10c 0c08 	add.w	ip, ip, #8
  405b46:	4601      	mov	r1, r0
  405b48:	3e10      	subs	r6, #16
  405b4a:	2e10      	cmp	r6, #16
  405b4c:	dd11      	ble.n	405b72 <_vfiprintf_r+0x3d6>
  405b4e:	1c48      	adds	r0, r1, #1
  405b50:	3210      	adds	r2, #16
  405b52:	2807      	cmp	r0, #7
  405b54:	9211      	str	r2, [sp, #68]	; 0x44
  405b56:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405b5a:	9010      	str	r0, [sp, #64]	; 0x40
  405b5c:	ddef      	ble.n	405b3e <_vfiprintf_r+0x3a2>
  405b5e:	2a00      	cmp	r2, #0
  405b60:	f040 829d 	bne.w	40609e <_vfiprintf_r+0x902>
  405b64:	3e10      	subs	r6, #16
  405b66:	2e10      	cmp	r6, #16
  405b68:	f04f 0e01 	mov.w	lr, #1
  405b6c:	4611      	mov	r1, r2
  405b6e:	46cc      	mov	ip, r9
  405b70:	dced      	bgt.n	405b4e <_vfiprintf_r+0x3b2>
  405b72:	4654      	mov	r4, sl
  405b74:	46e2      	mov	sl, ip
  405b76:	4432      	add	r2, r6
  405b78:	f1be 0f07 	cmp.w	lr, #7
  405b7c:	9211      	str	r2, [sp, #68]	; 0x44
  405b7e:	e88a 0060 	stmia.w	sl, {r5, r6}
  405b82:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405b86:	f300 8369 	bgt.w	40625c <_vfiprintf_r+0xac0>
  405b8a:	f10a 0a08 	add.w	sl, sl, #8
  405b8e:	f10e 0001 	add.w	r0, lr, #1
  405b92:	4671      	mov	r1, lr
  405b94:	e1ab      	b.n	405eee <_vfiprintf_r+0x752>
  405b96:	9608      	str	r6, [sp, #32]
  405b98:	f013 0220 	ands.w	r2, r3, #32
  405b9c:	f040 838c 	bne.w	4062b8 <_vfiprintf_r+0xb1c>
  405ba0:	f013 0110 	ands.w	r1, r3, #16
  405ba4:	f040 831a 	bne.w	4061dc <_vfiprintf_r+0xa40>
  405ba8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405bac:	f000 8316 	beq.w	4061dc <_vfiprintf_r+0xa40>
  405bb0:	9807      	ldr	r0, [sp, #28]
  405bb2:	460a      	mov	r2, r1
  405bb4:	4601      	mov	r1, r0
  405bb6:	3104      	adds	r1, #4
  405bb8:	8806      	ldrh	r6, [r0, #0]
  405bba:	9107      	str	r1, [sp, #28]
  405bbc:	2700      	movs	r7, #0
  405bbe:	e720      	b.n	405a02 <_vfiprintf_r+0x266>
  405bc0:	9608      	str	r6, [sp, #32]
  405bc2:	f043 0310 	orr.w	r3, r3, #16
  405bc6:	e7e7      	b.n	405b98 <_vfiprintf_r+0x3fc>
  405bc8:	9608      	str	r6, [sp, #32]
  405bca:	f043 0310 	orr.w	r3, r3, #16
  405bce:	e708      	b.n	4059e2 <_vfiprintf_r+0x246>
  405bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405bd4:	f898 2000 	ldrb.w	r2, [r8]
  405bd8:	e652      	b.n	405880 <_vfiprintf_r+0xe4>
  405bda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405bde:	2600      	movs	r6, #0
  405be0:	f818 2b01 	ldrb.w	r2, [r8], #1
  405be4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405be8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405bec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405bf0:	2909      	cmp	r1, #9
  405bf2:	d9f5      	bls.n	405be0 <_vfiprintf_r+0x444>
  405bf4:	e646      	b.n	405884 <_vfiprintf_r+0xe8>
  405bf6:	9608      	str	r6, [sp, #32]
  405bf8:	2800      	cmp	r0, #0
  405bfa:	f040 8408 	bne.w	40640e <_vfiprintf_r+0xc72>
  405bfe:	f043 0310 	orr.w	r3, r3, #16
  405c02:	069e      	lsls	r6, r3, #26
  405c04:	f100 834c 	bmi.w	4062a0 <_vfiprintf_r+0xb04>
  405c08:	06dd      	lsls	r5, r3, #27
  405c0a:	f100 82f3 	bmi.w	4061f4 <_vfiprintf_r+0xa58>
  405c0e:	0658      	lsls	r0, r3, #25
  405c10:	f140 82f0 	bpl.w	4061f4 <_vfiprintf_r+0xa58>
  405c14:	9d07      	ldr	r5, [sp, #28]
  405c16:	f9b5 6000 	ldrsh.w	r6, [r5]
  405c1a:	462a      	mov	r2, r5
  405c1c:	17f7      	asrs	r7, r6, #31
  405c1e:	3204      	adds	r2, #4
  405c20:	4630      	mov	r0, r6
  405c22:	4639      	mov	r1, r7
  405c24:	9207      	str	r2, [sp, #28]
  405c26:	2800      	cmp	r0, #0
  405c28:	f171 0200 	sbcs.w	r2, r1, #0
  405c2c:	f2c0 835d 	blt.w	4062ea <_vfiprintf_r+0xb4e>
  405c30:	1c61      	adds	r1, r4, #1
  405c32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405c36:	f04f 0201 	mov.w	r2, #1
  405c3a:	f47f aeea 	bne.w	405a12 <_vfiprintf_r+0x276>
  405c3e:	ea56 0107 	orrs.w	r1, r6, r7
  405c42:	f000 824d 	beq.w	4060e0 <_vfiprintf_r+0x944>
  405c46:	9302      	str	r3, [sp, #8]
  405c48:	2a01      	cmp	r2, #1
  405c4a:	f000 828c 	beq.w	406166 <_vfiprintf_r+0x9ca>
  405c4e:	2a02      	cmp	r2, #2
  405c50:	f040 825c 	bne.w	40610c <_vfiprintf_r+0x970>
  405c54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405c56:	46cb      	mov	fp, r9
  405c58:	0933      	lsrs	r3, r6, #4
  405c5a:	f006 010f 	and.w	r1, r6, #15
  405c5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405c62:	093a      	lsrs	r2, r7, #4
  405c64:	461e      	mov	r6, r3
  405c66:	4617      	mov	r7, r2
  405c68:	5c43      	ldrb	r3, [r0, r1]
  405c6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405c6e:	ea56 0307 	orrs.w	r3, r6, r7
  405c72:	d1f1      	bne.n	405c58 <_vfiprintf_r+0x4bc>
  405c74:	eba9 030b 	sub.w	r3, r9, fp
  405c78:	9305      	str	r3, [sp, #20]
  405c7a:	e6e1      	b.n	405a40 <_vfiprintf_r+0x2a4>
  405c7c:	2800      	cmp	r0, #0
  405c7e:	f040 83c0 	bne.w	406402 <_vfiprintf_r+0xc66>
  405c82:	0699      	lsls	r1, r3, #26
  405c84:	f100 8367 	bmi.w	406356 <_vfiprintf_r+0xbba>
  405c88:	06da      	lsls	r2, r3, #27
  405c8a:	f100 80f1 	bmi.w	405e70 <_vfiprintf_r+0x6d4>
  405c8e:	065b      	lsls	r3, r3, #25
  405c90:	f140 80ee 	bpl.w	405e70 <_vfiprintf_r+0x6d4>
  405c94:	9a07      	ldr	r2, [sp, #28]
  405c96:	6813      	ldr	r3, [r2, #0]
  405c98:	3204      	adds	r2, #4
  405c9a:	9207      	str	r2, [sp, #28]
  405c9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405ca0:	801a      	strh	r2, [r3, #0]
  405ca2:	e5b8      	b.n	405816 <_vfiprintf_r+0x7a>
  405ca4:	9807      	ldr	r0, [sp, #28]
  405ca6:	4a3d      	ldr	r2, [pc, #244]	; (405d9c <_vfiprintf_r+0x600>)
  405ca8:	9608      	str	r6, [sp, #32]
  405caa:	920b      	str	r2, [sp, #44]	; 0x2c
  405cac:	6806      	ldr	r6, [r0, #0]
  405cae:	2278      	movs	r2, #120	; 0x78
  405cb0:	2130      	movs	r1, #48	; 0x30
  405cb2:	3004      	adds	r0, #4
  405cb4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405cb8:	f043 0302 	orr.w	r3, r3, #2
  405cbc:	9007      	str	r0, [sp, #28]
  405cbe:	2700      	movs	r7, #0
  405cc0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405cc4:	2202      	movs	r2, #2
  405cc6:	e69c      	b.n	405a02 <_vfiprintf_r+0x266>
  405cc8:	9608      	str	r6, [sp, #32]
  405cca:	2800      	cmp	r0, #0
  405ccc:	d099      	beq.n	405c02 <_vfiprintf_r+0x466>
  405cce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405cd2:	e796      	b.n	405c02 <_vfiprintf_r+0x466>
  405cd4:	f898 2000 	ldrb.w	r2, [r8]
  405cd8:	2d00      	cmp	r5, #0
  405cda:	f47f add1 	bne.w	405880 <_vfiprintf_r+0xe4>
  405cde:	2001      	movs	r0, #1
  405ce0:	2520      	movs	r5, #32
  405ce2:	e5cd      	b.n	405880 <_vfiprintf_r+0xe4>
  405ce4:	f043 0301 	orr.w	r3, r3, #1
  405ce8:	f898 2000 	ldrb.w	r2, [r8]
  405cec:	e5c8      	b.n	405880 <_vfiprintf_r+0xe4>
  405cee:	9608      	str	r6, [sp, #32]
  405cf0:	2800      	cmp	r0, #0
  405cf2:	f040 8393 	bne.w	40641c <_vfiprintf_r+0xc80>
  405cf6:	4929      	ldr	r1, [pc, #164]	; (405d9c <_vfiprintf_r+0x600>)
  405cf8:	910b      	str	r1, [sp, #44]	; 0x2c
  405cfa:	069f      	lsls	r7, r3, #26
  405cfc:	f100 82e8 	bmi.w	4062d0 <_vfiprintf_r+0xb34>
  405d00:	9807      	ldr	r0, [sp, #28]
  405d02:	06de      	lsls	r6, r3, #27
  405d04:	4601      	mov	r1, r0
  405d06:	f100 8270 	bmi.w	4061ea <_vfiprintf_r+0xa4e>
  405d0a:	065d      	lsls	r5, r3, #25
  405d0c:	f140 826d 	bpl.w	4061ea <_vfiprintf_r+0xa4e>
  405d10:	3104      	adds	r1, #4
  405d12:	8806      	ldrh	r6, [r0, #0]
  405d14:	9107      	str	r1, [sp, #28]
  405d16:	2700      	movs	r7, #0
  405d18:	07d8      	lsls	r0, r3, #31
  405d1a:	f140 8222 	bpl.w	406162 <_vfiprintf_r+0x9c6>
  405d1e:	ea56 0107 	orrs.w	r1, r6, r7
  405d22:	f000 821e 	beq.w	406162 <_vfiprintf_r+0x9c6>
  405d26:	2130      	movs	r1, #48	; 0x30
  405d28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405d2c:	f043 0302 	orr.w	r3, r3, #2
  405d30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405d34:	2202      	movs	r2, #2
  405d36:	e664      	b.n	405a02 <_vfiprintf_r+0x266>
  405d38:	9608      	str	r6, [sp, #32]
  405d3a:	2800      	cmp	r0, #0
  405d3c:	f040 836b 	bne.w	406416 <_vfiprintf_r+0xc7a>
  405d40:	4917      	ldr	r1, [pc, #92]	; (405da0 <_vfiprintf_r+0x604>)
  405d42:	910b      	str	r1, [sp, #44]	; 0x2c
  405d44:	e7d9      	b.n	405cfa <_vfiprintf_r+0x55e>
  405d46:	9907      	ldr	r1, [sp, #28]
  405d48:	9608      	str	r6, [sp, #32]
  405d4a:	680a      	ldr	r2, [r1, #0]
  405d4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405d50:	f04f 0000 	mov.w	r0, #0
  405d54:	460a      	mov	r2, r1
  405d56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405d5a:	3204      	adds	r2, #4
  405d5c:	2001      	movs	r0, #1
  405d5e:	9001      	str	r0, [sp, #4]
  405d60:	9207      	str	r2, [sp, #28]
  405d62:	9005      	str	r0, [sp, #20]
  405d64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405d68:	9302      	str	r3, [sp, #8]
  405d6a:	2400      	movs	r4, #0
  405d6c:	e670      	b.n	405a50 <_vfiprintf_r+0x2b4>
  405d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d72:	f898 2000 	ldrb.w	r2, [r8]
  405d76:	e583      	b.n	405880 <_vfiprintf_r+0xe4>
  405d78:	f898 2000 	ldrb.w	r2, [r8]
  405d7c:	2a6c      	cmp	r2, #108	; 0x6c
  405d7e:	bf03      	ittte	eq
  405d80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405d84:	f043 0320 	orreq.w	r3, r3, #32
  405d88:	f108 0801 	addeq.w	r8, r8, #1
  405d8c:	f043 0310 	orrne.w	r3, r3, #16
  405d90:	e576      	b.n	405880 <_vfiprintf_r+0xe4>
  405d92:	bf00      	nop
  405d94:	00408c2c 	.word	0x00408c2c
  405d98:	00408c3c 	.word	0x00408c3c
  405d9c:	00408c10 	.word	0x00408c10
  405da0:	00408bfc 	.word	0x00408bfc
  405da4:	9907      	ldr	r1, [sp, #28]
  405da6:	680e      	ldr	r6, [r1, #0]
  405da8:	460a      	mov	r2, r1
  405daa:	2e00      	cmp	r6, #0
  405dac:	f102 0204 	add.w	r2, r2, #4
  405db0:	f6ff ae0f 	blt.w	4059d2 <_vfiprintf_r+0x236>
  405db4:	9207      	str	r2, [sp, #28]
  405db6:	f898 2000 	ldrb.w	r2, [r8]
  405dba:	e561      	b.n	405880 <_vfiprintf_r+0xe4>
  405dbc:	f898 2000 	ldrb.w	r2, [r8]
  405dc0:	2001      	movs	r0, #1
  405dc2:	252b      	movs	r5, #43	; 0x2b
  405dc4:	e55c      	b.n	405880 <_vfiprintf_r+0xe4>
  405dc6:	9907      	ldr	r1, [sp, #28]
  405dc8:	9608      	str	r6, [sp, #32]
  405dca:	f8d1 b000 	ldr.w	fp, [r1]
  405dce:	f04f 0200 	mov.w	r2, #0
  405dd2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405dd6:	1d0e      	adds	r6, r1, #4
  405dd8:	f1bb 0f00 	cmp.w	fp, #0
  405ddc:	f000 82e5 	beq.w	4063aa <_vfiprintf_r+0xc0e>
  405de0:	1c67      	adds	r7, r4, #1
  405de2:	f000 82c4 	beq.w	40636e <_vfiprintf_r+0xbd2>
  405de6:	4622      	mov	r2, r4
  405de8:	2100      	movs	r1, #0
  405dea:	4658      	mov	r0, fp
  405dec:	9301      	str	r3, [sp, #4]
  405dee:	f001 f91f 	bl	407030 <memchr>
  405df2:	9b01      	ldr	r3, [sp, #4]
  405df4:	2800      	cmp	r0, #0
  405df6:	f000 82e5 	beq.w	4063c4 <_vfiprintf_r+0xc28>
  405dfa:	eba0 020b 	sub.w	r2, r0, fp
  405dfe:	9205      	str	r2, [sp, #20]
  405e00:	9607      	str	r6, [sp, #28]
  405e02:	9302      	str	r3, [sp, #8]
  405e04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405e08:	2400      	movs	r4, #0
  405e0a:	e619      	b.n	405a40 <_vfiprintf_r+0x2a4>
  405e0c:	f898 2000 	ldrb.w	r2, [r8]
  405e10:	2a2a      	cmp	r2, #42	; 0x2a
  405e12:	f108 0701 	add.w	r7, r8, #1
  405e16:	f000 82e9 	beq.w	4063ec <_vfiprintf_r+0xc50>
  405e1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405e1e:	2909      	cmp	r1, #9
  405e20:	46b8      	mov	r8, r7
  405e22:	f04f 0400 	mov.w	r4, #0
  405e26:	f63f ad2d 	bhi.w	405884 <_vfiprintf_r+0xe8>
  405e2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  405e2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405e32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405e36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405e3a:	2909      	cmp	r1, #9
  405e3c:	d9f5      	bls.n	405e2a <_vfiprintf_r+0x68e>
  405e3e:	e521      	b.n	405884 <_vfiprintf_r+0xe8>
  405e40:	f043 0320 	orr.w	r3, r3, #32
  405e44:	f898 2000 	ldrb.w	r2, [r8]
  405e48:	e51a      	b.n	405880 <_vfiprintf_r+0xe4>
  405e4a:	9608      	str	r6, [sp, #32]
  405e4c:	2800      	cmp	r0, #0
  405e4e:	f040 82db 	bne.w	406408 <_vfiprintf_r+0xc6c>
  405e52:	2a00      	cmp	r2, #0
  405e54:	f000 80e7 	beq.w	406026 <_vfiprintf_r+0x88a>
  405e58:	2101      	movs	r1, #1
  405e5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405e5e:	f04f 0200 	mov.w	r2, #0
  405e62:	9101      	str	r1, [sp, #4]
  405e64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405e68:	9105      	str	r1, [sp, #20]
  405e6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405e6e:	e77b      	b.n	405d68 <_vfiprintf_r+0x5cc>
  405e70:	9a07      	ldr	r2, [sp, #28]
  405e72:	6813      	ldr	r3, [r2, #0]
  405e74:	3204      	adds	r2, #4
  405e76:	9207      	str	r2, [sp, #28]
  405e78:	9a03      	ldr	r2, [sp, #12]
  405e7a:	601a      	str	r2, [r3, #0]
  405e7c:	e4cb      	b.n	405816 <_vfiprintf_r+0x7a>
  405e7e:	aa0f      	add	r2, sp, #60	; 0x3c
  405e80:	9904      	ldr	r1, [sp, #16]
  405e82:	4620      	mov	r0, r4
  405e84:	f7ff fc4a 	bl	40571c <__sprint_r.part.0>
  405e88:	2800      	cmp	r0, #0
  405e8a:	f040 8139 	bne.w	406100 <_vfiprintf_r+0x964>
  405e8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e92:	f101 0c01 	add.w	ip, r1, #1
  405e96:	46ce      	mov	lr, r9
  405e98:	e5ff      	b.n	405a9a <_vfiprintf_r+0x2fe>
  405e9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e9e:	1c48      	adds	r0, r1, #1
  405ea0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405ea4:	2d00      	cmp	r5, #0
  405ea6:	f43f ae22 	beq.w	405aee <_vfiprintf_r+0x352>
  405eaa:	3201      	adds	r2, #1
  405eac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405eb0:	2101      	movs	r1, #1
  405eb2:	2807      	cmp	r0, #7
  405eb4:	9211      	str	r2, [sp, #68]	; 0x44
  405eb6:	9010      	str	r0, [sp, #64]	; 0x40
  405eb8:	f8ca 5000 	str.w	r5, [sl]
  405ebc:	f8ca 1004 	str.w	r1, [sl, #4]
  405ec0:	f340 8108 	ble.w	4060d4 <_vfiprintf_r+0x938>
  405ec4:	2a00      	cmp	r2, #0
  405ec6:	f040 81bc 	bne.w	406242 <_vfiprintf_r+0xaa6>
  405eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405ecc:	2b00      	cmp	r3, #0
  405ece:	f43f ae1f 	beq.w	405b10 <_vfiprintf_r+0x374>
  405ed2:	ab0e      	add	r3, sp, #56	; 0x38
  405ed4:	2202      	movs	r2, #2
  405ed6:	4608      	mov	r0, r1
  405ed8:	931c      	str	r3, [sp, #112]	; 0x70
  405eda:	921d      	str	r2, [sp, #116]	; 0x74
  405edc:	46ca      	mov	sl, r9
  405ede:	4601      	mov	r1, r0
  405ee0:	f10a 0a08 	add.w	sl, sl, #8
  405ee4:	3001      	adds	r0, #1
  405ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ee8:	2b80      	cmp	r3, #128	; 0x80
  405eea:	f43f ae19 	beq.w	405b20 <_vfiprintf_r+0x384>
  405eee:	9b05      	ldr	r3, [sp, #20]
  405ef0:	1ae4      	subs	r4, r4, r3
  405ef2:	2c00      	cmp	r4, #0
  405ef4:	dd2e      	ble.n	405f54 <_vfiprintf_r+0x7b8>
  405ef6:	2c10      	cmp	r4, #16
  405ef8:	4db3      	ldr	r5, [pc, #716]	; (4061c8 <_vfiprintf_r+0xa2c>)
  405efa:	dd1e      	ble.n	405f3a <_vfiprintf_r+0x79e>
  405efc:	46d6      	mov	lr, sl
  405efe:	2610      	movs	r6, #16
  405f00:	9f06      	ldr	r7, [sp, #24]
  405f02:	f8dd a010 	ldr.w	sl, [sp, #16]
  405f06:	e006      	b.n	405f16 <_vfiprintf_r+0x77a>
  405f08:	1c88      	adds	r0, r1, #2
  405f0a:	f10e 0e08 	add.w	lr, lr, #8
  405f0e:	4619      	mov	r1, r3
  405f10:	3c10      	subs	r4, #16
  405f12:	2c10      	cmp	r4, #16
  405f14:	dd10      	ble.n	405f38 <_vfiprintf_r+0x79c>
  405f16:	1c4b      	adds	r3, r1, #1
  405f18:	3210      	adds	r2, #16
  405f1a:	2b07      	cmp	r3, #7
  405f1c:	9211      	str	r2, [sp, #68]	; 0x44
  405f1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  405f22:	9310      	str	r3, [sp, #64]	; 0x40
  405f24:	ddf0      	ble.n	405f08 <_vfiprintf_r+0x76c>
  405f26:	2a00      	cmp	r2, #0
  405f28:	d165      	bne.n	405ff6 <_vfiprintf_r+0x85a>
  405f2a:	3c10      	subs	r4, #16
  405f2c:	2c10      	cmp	r4, #16
  405f2e:	f04f 0001 	mov.w	r0, #1
  405f32:	4611      	mov	r1, r2
  405f34:	46ce      	mov	lr, r9
  405f36:	dcee      	bgt.n	405f16 <_vfiprintf_r+0x77a>
  405f38:	46f2      	mov	sl, lr
  405f3a:	4422      	add	r2, r4
  405f3c:	2807      	cmp	r0, #7
  405f3e:	9211      	str	r2, [sp, #68]	; 0x44
  405f40:	f8ca 5000 	str.w	r5, [sl]
  405f44:	f8ca 4004 	str.w	r4, [sl, #4]
  405f48:	9010      	str	r0, [sp, #64]	; 0x40
  405f4a:	f300 8085 	bgt.w	406058 <_vfiprintf_r+0x8bc>
  405f4e:	f10a 0a08 	add.w	sl, sl, #8
  405f52:	3001      	adds	r0, #1
  405f54:	9905      	ldr	r1, [sp, #20]
  405f56:	f8ca b000 	str.w	fp, [sl]
  405f5a:	440a      	add	r2, r1
  405f5c:	2807      	cmp	r0, #7
  405f5e:	9211      	str	r2, [sp, #68]	; 0x44
  405f60:	f8ca 1004 	str.w	r1, [sl, #4]
  405f64:	9010      	str	r0, [sp, #64]	; 0x40
  405f66:	f340 8082 	ble.w	40606e <_vfiprintf_r+0x8d2>
  405f6a:	2a00      	cmp	r2, #0
  405f6c:	f040 8118 	bne.w	4061a0 <_vfiprintf_r+0xa04>
  405f70:	9b02      	ldr	r3, [sp, #8]
  405f72:	9210      	str	r2, [sp, #64]	; 0x40
  405f74:	0758      	lsls	r0, r3, #29
  405f76:	d535      	bpl.n	405fe4 <_vfiprintf_r+0x848>
  405f78:	9b08      	ldr	r3, [sp, #32]
  405f7a:	9901      	ldr	r1, [sp, #4]
  405f7c:	1a5c      	subs	r4, r3, r1
  405f7e:	2c00      	cmp	r4, #0
  405f80:	f340 80e7 	ble.w	406152 <_vfiprintf_r+0x9b6>
  405f84:	46ca      	mov	sl, r9
  405f86:	2c10      	cmp	r4, #16
  405f88:	f340 8218 	ble.w	4063bc <_vfiprintf_r+0xc20>
  405f8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405f8e:	4e8f      	ldr	r6, [pc, #572]	; (4061cc <_vfiprintf_r+0xa30>)
  405f90:	9f06      	ldr	r7, [sp, #24]
  405f92:	f8dd b010 	ldr.w	fp, [sp, #16]
  405f96:	2510      	movs	r5, #16
  405f98:	e006      	b.n	405fa8 <_vfiprintf_r+0x80c>
  405f9a:	1c88      	adds	r0, r1, #2
  405f9c:	f10a 0a08 	add.w	sl, sl, #8
  405fa0:	4619      	mov	r1, r3
  405fa2:	3c10      	subs	r4, #16
  405fa4:	2c10      	cmp	r4, #16
  405fa6:	dd11      	ble.n	405fcc <_vfiprintf_r+0x830>
  405fa8:	1c4b      	adds	r3, r1, #1
  405faa:	3210      	adds	r2, #16
  405fac:	2b07      	cmp	r3, #7
  405fae:	9211      	str	r2, [sp, #68]	; 0x44
  405fb0:	f8ca 6000 	str.w	r6, [sl]
  405fb4:	f8ca 5004 	str.w	r5, [sl, #4]
  405fb8:	9310      	str	r3, [sp, #64]	; 0x40
  405fba:	ddee      	ble.n	405f9a <_vfiprintf_r+0x7fe>
  405fbc:	bb42      	cbnz	r2, 406010 <_vfiprintf_r+0x874>
  405fbe:	3c10      	subs	r4, #16
  405fc0:	2c10      	cmp	r4, #16
  405fc2:	f04f 0001 	mov.w	r0, #1
  405fc6:	4611      	mov	r1, r2
  405fc8:	46ca      	mov	sl, r9
  405fca:	dced      	bgt.n	405fa8 <_vfiprintf_r+0x80c>
  405fcc:	4422      	add	r2, r4
  405fce:	2807      	cmp	r0, #7
  405fd0:	9211      	str	r2, [sp, #68]	; 0x44
  405fd2:	f8ca 6000 	str.w	r6, [sl]
  405fd6:	f8ca 4004 	str.w	r4, [sl, #4]
  405fda:	9010      	str	r0, [sp, #64]	; 0x40
  405fdc:	dd51      	ble.n	406082 <_vfiprintf_r+0x8e6>
  405fde:	2a00      	cmp	r2, #0
  405fe0:	f040 819b 	bne.w	40631a <_vfiprintf_r+0xb7e>
  405fe4:	9b03      	ldr	r3, [sp, #12]
  405fe6:	9a08      	ldr	r2, [sp, #32]
  405fe8:	9901      	ldr	r1, [sp, #4]
  405fea:	428a      	cmp	r2, r1
  405fec:	bfac      	ite	ge
  405fee:	189b      	addge	r3, r3, r2
  405ff0:	185b      	addlt	r3, r3, r1
  405ff2:	9303      	str	r3, [sp, #12]
  405ff4:	e04e      	b.n	406094 <_vfiprintf_r+0x8f8>
  405ff6:	aa0f      	add	r2, sp, #60	; 0x3c
  405ff8:	4651      	mov	r1, sl
  405ffa:	4638      	mov	r0, r7
  405ffc:	f7ff fb8e 	bl	40571c <__sprint_r.part.0>
  406000:	2800      	cmp	r0, #0
  406002:	f040 813f 	bne.w	406284 <_vfiprintf_r+0xae8>
  406006:	9910      	ldr	r1, [sp, #64]	; 0x40
  406008:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40600a:	1c48      	adds	r0, r1, #1
  40600c:	46ce      	mov	lr, r9
  40600e:	e77f      	b.n	405f10 <_vfiprintf_r+0x774>
  406010:	aa0f      	add	r2, sp, #60	; 0x3c
  406012:	4659      	mov	r1, fp
  406014:	4638      	mov	r0, r7
  406016:	f7ff fb81 	bl	40571c <__sprint_r.part.0>
  40601a:	b960      	cbnz	r0, 406036 <_vfiprintf_r+0x89a>
  40601c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40601e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406020:	1c48      	adds	r0, r1, #1
  406022:	46ca      	mov	sl, r9
  406024:	e7bd      	b.n	405fa2 <_vfiprintf_r+0x806>
  406026:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406028:	f8dd b010 	ldr.w	fp, [sp, #16]
  40602c:	2b00      	cmp	r3, #0
  40602e:	f040 81d4 	bne.w	4063da <_vfiprintf_r+0xc3e>
  406032:	2300      	movs	r3, #0
  406034:	9310      	str	r3, [sp, #64]	; 0x40
  406036:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40603a:	f013 0f01 	tst.w	r3, #1
  40603e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406042:	d102      	bne.n	40604a <_vfiprintf_r+0x8ae>
  406044:	059a      	lsls	r2, r3, #22
  406046:	f140 80de 	bpl.w	406206 <_vfiprintf_r+0xa6a>
  40604a:	065b      	lsls	r3, r3, #25
  40604c:	f53f acb2 	bmi.w	4059b4 <_vfiprintf_r+0x218>
  406050:	9803      	ldr	r0, [sp, #12]
  406052:	b02d      	add	sp, #180	; 0xb4
  406054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406058:	2a00      	cmp	r2, #0
  40605a:	f040 8106 	bne.w	40626a <_vfiprintf_r+0xace>
  40605e:	9a05      	ldr	r2, [sp, #20]
  406060:	921d      	str	r2, [sp, #116]	; 0x74
  406062:	2301      	movs	r3, #1
  406064:	9211      	str	r2, [sp, #68]	; 0x44
  406066:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40606a:	9310      	str	r3, [sp, #64]	; 0x40
  40606c:	46ca      	mov	sl, r9
  40606e:	f10a 0a08 	add.w	sl, sl, #8
  406072:	9b02      	ldr	r3, [sp, #8]
  406074:	0759      	lsls	r1, r3, #29
  406076:	d504      	bpl.n	406082 <_vfiprintf_r+0x8e6>
  406078:	9b08      	ldr	r3, [sp, #32]
  40607a:	9901      	ldr	r1, [sp, #4]
  40607c:	1a5c      	subs	r4, r3, r1
  40607e:	2c00      	cmp	r4, #0
  406080:	dc81      	bgt.n	405f86 <_vfiprintf_r+0x7ea>
  406082:	9b03      	ldr	r3, [sp, #12]
  406084:	9908      	ldr	r1, [sp, #32]
  406086:	9801      	ldr	r0, [sp, #4]
  406088:	4281      	cmp	r1, r0
  40608a:	bfac      	ite	ge
  40608c:	185b      	addge	r3, r3, r1
  40608e:	181b      	addlt	r3, r3, r0
  406090:	9303      	str	r3, [sp, #12]
  406092:	bb72      	cbnz	r2, 4060f2 <_vfiprintf_r+0x956>
  406094:	2300      	movs	r3, #0
  406096:	9310      	str	r3, [sp, #64]	; 0x40
  406098:	46ca      	mov	sl, r9
  40609a:	f7ff bbbc 	b.w	405816 <_vfiprintf_r+0x7a>
  40609e:	aa0f      	add	r2, sp, #60	; 0x3c
  4060a0:	9904      	ldr	r1, [sp, #16]
  4060a2:	4620      	mov	r0, r4
  4060a4:	f7ff fb3a 	bl	40571c <__sprint_r.part.0>
  4060a8:	bb50      	cbnz	r0, 406100 <_vfiprintf_r+0x964>
  4060aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4060ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4060ae:	f101 0e01 	add.w	lr, r1, #1
  4060b2:	46cc      	mov	ip, r9
  4060b4:	e548      	b.n	405b48 <_vfiprintf_r+0x3ac>
  4060b6:	2a00      	cmp	r2, #0
  4060b8:	f040 8140 	bne.w	40633c <_vfiprintf_r+0xba0>
  4060bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4060c0:	2900      	cmp	r1, #0
  4060c2:	f000 811b 	beq.w	4062fc <_vfiprintf_r+0xb60>
  4060c6:	2201      	movs	r2, #1
  4060c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4060cc:	4610      	mov	r0, r2
  4060ce:	921d      	str	r2, [sp, #116]	; 0x74
  4060d0:	911c      	str	r1, [sp, #112]	; 0x70
  4060d2:	46ca      	mov	sl, r9
  4060d4:	4601      	mov	r1, r0
  4060d6:	f10a 0a08 	add.w	sl, sl, #8
  4060da:	3001      	adds	r0, #1
  4060dc:	e507      	b.n	405aee <_vfiprintf_r+0x352>
  4060de:	9b02      	ldr	r3, [sp, #8]
  4060e0:	2a01      	cmp	r2, #1
  4060e2:	f000 8098 	beq.w	406216 <_vfiprintf_r+0xa7a>
  4060e6:	2a02      	cmp	r2, #2
  4060e8:	d10d      	bne.n	406106 <_vfiprintf_r+0x96a>
  4060ea:	9302      	str	r3, [sp, #8]
  4060ec:	2600      	movs	r6, #0
  4060ee:	2700      	movs	r7, #0
  4060f0:	e5b0      	b.n	405c54 <_vfiprintf_r+0x4b8>
  4060f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4060f4:	9904      	ldr	r1, [sp, #16]
  4060f6:	9806      	ldr	r0, [sp, #24]
  4060f8:	f7ff fb10 	bl	40571c <__sprint_r.part.0>
  4060fc:	2800      	cmp	r0, #0
  4060fe:	d0c9      	beq.n	406094 <_vfiprintf_r+0x8f8>
  406100:	f8dd b010 	ldr.w	fp, [sp, #16]
  406104:	e797      	b.n	406036 <_vfiprintf_r+0x89a>
  406106:	9302      	str	r3, [sp, #8]
  406108:	2600      	movs	r6, #0
  40610a:	2700      	movs	r7, #0
  40610c:	4649      	mov	r1, r9
  40610e:	e000      	b.n	406112 <_vfiprintf_r+0x976>
  406110:	4659      	mov	r1, fp
  406112:	08f2      	lsrs	r2, r6, #3
  406114:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406118:	08f8      	lsrs	r0, r7, #3
  40611a:	f006 0307 	and.w	r3, r6, #7
  40611e:	4607      	mov	r7, r0
  406120:	4616      	mov	r6, r2
  406122:	3330      	adds	r3, #48	; 0x30
  406124:	ea56 0207 	orrs.w	r2, r6, r7
  406128:	f801 3c01 	strb.w	r3, [r1, #-1]
  40612c:	f101 3bff 	add.w	fp, r1, #4294967295
  406130:	d1ee      	bne.n	406110 <_vfiprintf_r+0x974>
  406132:	9a02      	ldr	r2, [sp, #8]
  406134:	07d6      	lsls	r6, r2, #31
  406136:	f57f ad9d 	bpl.w	405c74 <_vfiprintf_r+0x4d8>
  40613a:	2b30      	cmp	r3, #48	; 0x30
  40613c:	f43f ad9a 	beq.w	405c74 <_vfiprintf_r+0x4d8>
  406140:	3902      	subs	r1, #2
  406142:	2330      	movs	r3, #48	; 0x30
  406144:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406148:	eba9 0301 	sub.w	r3, r9, r1
  40614c:	9305      	str	r3, [sp, #20]
  40614e:	468b      	mov	fp, r1
  406150:	e476      	b.n	405a40 <_vfiprintf_r+0x2a4>
  406152:	9b03      	ldr	r3, [sp, #12]
  406154:	9a08      	ldr	r2, [sp, #32]
  406156:	428a      	cmp	r2, r1
  406158:	bfac      	ite	ge
  40615a:	189b      	addge	r3, r3, r2
  40615c:	185b      	addlt	r3, r3, r1
  40615e:	9303      	str	r3, [sp, #12]
  406160:	e798      	b.n	406094 <_vfiprintf_r+0x8f8>
  406162:	2202      	movs	r2, #2
  406164:	e44d      	b.n	405a02 <_vfiprintf_r+0x266>
  406166:	2f00      	cmp	r7, #0
  406168:	bf08      	it	eq
  40616a:	2e0a      	cmpeq	r6, #10
  40616c:	d352      	bcc.n	406214 <_vfiprintf_r+0xa78>
  40616e:	46cb      	mov	fp, r9
  406170:	4630      	mov	r0, r6
  406172:	4639      	mov	r1, r7
  406174:	220a      	movs	r2, #10
  406176:	2300      	movs	r3, #0
  406178:	f001 fbc6 	bl	407908 <__aeabi_uldivmod>
  40617c:	3230      	adds	r2, #48	; 0x30
  40617e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406182:	4630      	mov	r0, r6
  406184:	4639      	mov	r1, r7
  406186:	2300      	movs	r3, #0
  406188:	220a      	movs	r2, #10
  40618a:	f001 fbbd 	bl	407908 <__aeabi_uldivmod>
  40618e:	4606      	mov	r6, r0
  406190:	460f      	mov	r7, r1
  406192:	ea56 0307 	orrs.w	r3, r6, r7
  406196:	d1eb      	bne.n	406170 <_vfiprintf_r+0x9d4>
  406198:	e56c      	b.n	405c74 <_vfiprintf_r+0x4d8>
  40619a:	9405      	str	r4, [sp, #20]
  40619c:	46cb      	mov	fp, r9
  40619e:	e44f      	b.n	405a40 <_vfiprintf_r+0x2a4>
  4061a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4061a2:	9904      	ldr	r1, [sp, #16]
  4061a4:	9806      	ldr	r0, [sp, #24]
  4061a6:	f7ff fab9 	bl	40571c <__sprint_r.part.0>
  4061aa:	2800      	cmp	r0, #0
  4061ac:	d1a8      	bne.n	406100 <_vfiprintf_r+0x964>
  4061ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4061b0:	46ca      	mov	sl, r9
  4061b2:	e75e      	b.n	406072 <_vfiprintf_r+0x8d6>
  4061b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4061b6:	9904      	ldr	r1, [sp, #16]
  4061b8:	9806      	ldr	r0, [sp, #24]
  4061ba:	f7ff faaf 	bl	40571c <__sprint_r.part.0>
  4061be:	2800      	cmp	r0, #0
  4061c0:	d19e      	bne.n	406100 <_vfiprintf_r+0x964>
  4061c2:	46ca      	mov	sl, r9
  4061c4:	f7ff bbc0 	b.w	405948 <_vfiprintf_r+0x1ac>
  4061c8:	00408c3c 	.word	0x00408c3c
  4061cc:	00408c2c 	.word	0x00408c2c
  4061d0:	3104      	adds	r1, #4
  4061d2:	6816      	ldr	r6, [r2, #0]
  4061d4:	9107      	str	r1, [sp, #28]
  4061d6:	2201      	movs	r2, #1
  4061d8:	2700      	movs	r7, #0
  4061da:	e412      	b.n	405a02 <_vfiprintf_r+0x266>
  4061dc:	9807      	ldr	r0, [sp, #28]
  4061de:	4601      	mov	r1, r0
  4061e0:	3104      	adds	r1, #4
  4061e2:	6806      	ldr	r6, [r0, #0]
  4061e4:	9107      	str	r1, [sp, #28]
  4061e6:	2700      	movs	r7, #0
  4061e8:	e40b      	b.n	405a02 <_vfiprintf_r+0x266>
  4061ea:	680e      	ldr	r6, [r1, #0]
  4061ec:	3104      	adds	r1, #4
  4061ee:	9107      	str	r1, [sp, #28]
  4061f0:	2700      	movs	r7, #0
  4061f2:	e591      	b.n	405d18 <_vfiprintf_r+0x57c>
  4061f4:	9907      	ldr	r1, [sp, #28]
  4061f6:	680e      	ldr	r6, [r1, #0]
  4061f8:	460a      	mov	r2, r1
  4061fa:	17f7      	asrs	r7, r6, #31
  4061fc:	3204      	adds	r2, #4
  4061fe:	9207      	str	r2, [sp, #28]
  406200:	4630      	mov	r0, r6
  406202:	4639      	mov	r1, r7
  406204:	e50f      	b.n	405c26 <_vfiprintf_r+0x48a>
  406206:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40620a:	f000 fe7f 	bl	406f0c <__retarget_lock_release_recursive>
  40620e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406212:	e71a      	b.n	40604a <_vfiprintf_r+0x8ae>
  406214:	9b02      	ldr	r3, [sp, #8]
  406216:	9302      	str	r3, [sp, #8]
  406218:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40621c:	3630      	adds	r6, #48	; 0x30
  40621e:	2301      	movs	r3, #1
  406220:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406224:	9305      	str	r3, [sp, #20]
  406226:	e40b      	b.n	405a40 <_vfiprintf_r+0x2a4>
  406228:	aa0f      	add	r2, sp, #60	; 0x3c
  40622a:	9904      	ldr	r1, [sp, #16]
  40622c:	9806      	ldr	r0, [sp, #24]
  40622e:	f7ff fa75 	bl	40571c <__sprint_r.part.0>
  406232:	2800      	cmp	r0, #0
  406234:	f47f af64 	bne.w	406100 <_vfiprintf_r+0x964>
  406238:	9910      	ldr	r1, [sp, #64]	; 0x40
  40623a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40623c:	1c48      	adds	r0, r1, #1
  40623e:	46ca      	mov	sl, r9
  406240:	e651      	b.n	405ee6 <_vfiprintf_r+0x74a>
  406242:	aa0f      	add	r2, sp, #60	; 0x3c
  406244:	9904      	ldr	r1, [sp, #16]
  406246:	9806      	ldr	r0, [sp, #24]
  406248:	f7ff fa68 	bl	40571c <__sprint_r.part.0>
  40624c:	2800      	cmp	r0, #0
  40624e:	f47f af57 	bne.w	406100 <_vfiprintf_r+0x964>
  406252:	9910      	ldr	r1, [sp, #64]	; 0x40
  406254:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406256:	1c48      	adds	r0, r1, #1
  406258:	46ca      	mov	sl, r9
  40625a:	e448      	b.n	405aee <_vfiprintf_r+0x352>
  40625c:	2a00      	cmp	r2, #0
  40625e:	f040 8091 	bne.w	406384 <_vfiprintf_r+0xbe8>
  406262:	2001      	movs	r0, #1
  406264:	4611      	mov	r1, r2
  406266:	46ca      	mov	sl, r9
  406268:	e641      	b.n	405eee <_vfiprintf_r+0x752>
  40626a:	aa0f      	add	r2, sp, #60	; 0x3c
  40626c:	9904      	ldr	r1, [sp, #16]
  40626e:	9806      	ldr	r0, [sp, #24]
  406270:	f7ff fa54 	bl	40571c <__sprint_r.part.0>
  406274:	2800      	cmp	r0, #0
  406276:	f47f af43 	bne.w	406100 <_vfiprintf_r+0x964>
  40627a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40627c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40627e:	3001      	adds	r0, #1
  406280:	46ca      	mov	sl, r9
  406282:	e667      	b.n	405f54 <_vfiprintf_r+0x7b8>
  406284:	46d3      	mov	fp, sl
  406286:	e6d6      	b.n	406036 <_vfiprintf_r+0x89a>
  406288:	9e07      	ldr	r6, [sp, #28]
  40628a:	3607      	adds	r6, #7
  40628c:	f026 0207 	bic.w	r2, r6, #7
  406290:	f102 0108 	add.w	r1, r2, #8
  406294:	e9d2 6700 	ldrd	r6, r7, [r2]
  406298:	9107      	str	r1, [sp, #28]
  40629a:	2201      	movs	r2, #1
  40629c:	f7ff bbb1 	b.w	405a02 <_vfiprintf_r+0x266>
  4062a0:	9e07      	ldr	r6, [sp, #28]
  4062a2:	3607      	adds	r6, #7
  4062a4:	f026 0607 	bic.w	r6, r6, #7
  4062a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4062ac:	f106 0208 	add.w	r2, r6, #8
  4062b0:	9207      	str	r2, [sp, #28]
  4062b2:	4606      	mov	r6, r0
  4062b4:	460f      	mov	r7, r1
  4062b6:	e4b6      	b.n	405c26 <_vfiprintf_r+0x48a>
  4062b8:	9e07      	ldr	r6, [sp, #28]
  4062ba:	3607      	adds	r6, #7
  4062bc:	f026 0207 	bic.w	r2, r6, #7
  4062c0:	f102 0108 	add.w	r1, r2, #8
  4062c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4062c8:	9107      	str	r1, [sp, #28]
  4062ca:	2200      	movs	r2, #0
  4062cc:	f7ff bb99 	b.w	405a02 <_vfiprintf_r+0x266>
  4062d0:	9e07      	ldr	r6, [sp, #28]
  4062d2:	3607      	adds	r6, #7
  4062d4:	f026 0107 	bic.w	r1, r6, #7
  4062d8:	f101 0008 	add.w	r0, r1, #8
  4062dc:	9007      	str	r0, [sp, #28]
  4062de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4062e2:	e519      	b.n	405d18 <_vfiprintf_r+0x57c>
  4062e4:	46cb      	mov	fp, r9
  4062e6:	f7ff bbab 	b.w	405a40 <_vfiprintf_r+0x2a4>
  4062ea:	252d      	movs	r5, #45	; 0x2d
  4062ec:	4276      	negs	r6, r6
  4062ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4062f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4062f6:	2201      	movs	r2, #1
  4062f8:	f7ff bb88 	b.w	405a0c <_vfiprintf_r+0x270>
  4062fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4062fe:	b9b3      	cbnz	r3, 40632e <_vfiprintf_r+0xb92>
  406300:	4611      	mov	r1, r2
  406302:	2001      	movs	r0, #1
  406304:	46ca      	mov	sl, r9
  406306:	e5f2      	b.n	405eee <_vfiprintf_r+0x752>
  406308:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40630c:	f000 fdfe 	bl	406f0c <__retarget_lock_release_recursive>
  406310:	f04f 33ff 	mov.w	r3, #4294967295
  406314:	9303      	str	r3, [sp, #12]
  406316:	f7ff bb50 	b.w	4059ba <_vfiprintf_r+0x21e>
  40631a:	aa0f      	add	r2, sp, #60	; 0x3c
  40631c:	9904      	ldr	r1, [sp, #16]
  40631e:	9806      	ldr	r0, [sp, #24]
  406320:	f7ff f9fc 	bl	40571c <__sprint_r.part.0>
  406324:	2800      	cmp	r0, #0
  406326:	f47f aeeb 	bne.w	406100 <_vfiprintf_r+0x964>
  40632a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40632c:	e6a9      	b.n	406082 <_vfiprintf_r+0x8e6>
  40632e:	ab0e      	add	r3, sp, #56	; 0x38
  406330:	2202      	movs	r2, #2
  406332:	931c      	str	r3, [sp, #112]	; 0x70
  406334:	921d      	str	r2, [sp, #116]	; 0x74
  406336:	2001      	movs	r0, #1
  406338:	46ca      	mov	sl, r9
  40633a:	e5d0      	b.n	405ede <_vfiprintf_r+0x742>
  40633c:	aa0f      	add	r2, sp, #60	; 0x3c
  40633e:	9904      	ldr	r1, [sp, #16]
  406340:	9806      	ldr	r0, [sp, #24]
  406342:	f7ff f9eb 	bl	40571c <__sprint_r.part.0>
  406346:	2800      	cmp	r0, #0
  406348:	f47f aeda 	bne.w	406100 <_vfiprintf_r+0x964>
  40634c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40634e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406350:	1c48      	adds	r0, r1, #1
  406352:	46ca      	mov	sl, r9
  406354:	e5a4      	b.n	405ea0 <_vfiprintf_r+0x704>
  406356:	9a07      	ldr	r2, [sp, #28]
  406358:	9903      	ldr	r1, [sp, #12]
  40635a:	6813      	ldr	r3, [r2, #0]
  40635c:	17cd      	asrs	r5, r1, #31
  40635e:	4608      	mov	r0, r1
  406360:	3204      	adds	r2, #4
  406362:	4629      	mov	r1, r5
  406364:	9207      	str	r2, [sp, #28]
  406366:	e9c3 0100 	strd	r0, r1, [r3]
  40636a:	f7ff ba54 	b.w	405816 <_vfiprintf_r+0x7a>
  40636e:	4658      	mov	r0, fp
  406370:	9607      	str	r6, [sp, #28]
  406372:	9302      	str	r3, [sp, #8]
  406374:	f7ff f964 	bl	405640 <strlen>
  406378:	2400      	movs	r4, #0
  40637a:	9005      	str	r0, [sp, #20]
  40637c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406380:	f7ff bb5e 	b.w	405a40 <_vfiprintf_r+0x2a4>
  406384:	aa0f      	add	r2, sp, #60	; 0x3c
  406386:	9904      	ldr	r1, [sp, #16]
  406388:	9806      	ldr	r0, [sp, #24]
  40638a:	f7ff f9c7 	bl	40571c <__sprint_r.part.0>
  40638e:	2800      	cmp	r0, #0
  406390:	f47f aeb6 	bne.w	406100 <_vfiprintf_r+0x964>
  406394:	9910      	ldr	r1, [sp, #64]	; 0x40
  406396:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406398:	1c48      	adds	r0, r1, #1
  40639a:	46ca      	mov	sl, r9
  40639c:	e5a7      	b.n	405eee <_vfiprintf_r+0x752>
  40639e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4063a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063a2:	4e20      	ldr	r6, [pc, #128]	; (406424 <_vfiprintf_r+0xc88>)
  4063a4:	3101      	adds	r1, #1
  4063a6:	f7ff bb90 	b.w	405aca <_vfiprintf_r+0x32e>
  4063aa:	2c06      	cmp	r4, #6
  4063ac:	bf28      	it	cs
  4063ae:	2406      	movcs	r4, #6
  4063b0:	9405      	str	r4, [sp, #20]
  4063b2:	9607      	str	r6, [sp, #28]
  4063b4:	9401      	str	r4, [sp, #4]
  4063b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 406428 <_vfiprintf_r+0xc8c>
  4063ba:	e4d5      	b.n	405d68 <_vfiprintf_r+0x5cc>
  4063bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4063be:	4e19      	ldr	r6, [pc, #100]	; (406424 <_vfiprintf_r+0xc88>)
  4063c0:	3001      	adds	r0, #1
  4063c2:	e603      	b.n	405fcc <_vfiprintf_r+0x830>
  4063c4:	9405      	str	r4, [sp, #20]
  4063c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4063ca:	9607      	str	r6, [sp, #28]
  4063cc:	9302      	str	r3, [sp, #8]
  4063ce:	4604      	mov	r4, r0
  4063d0:	f7ff bb36 	b.w	405a40 <_vfiprintf_r+0x2a4>
  4063d4:	4686      	mov	lr, r0
  4063d6:	f7ff bbce 	b.w	405b76 <_vfiprintf_r+0x3da>
  4063da:	9806      	ldr	r0, [sp, #24]
  4063dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4063de:	4659      	mov	r1, fp
  4063e0:	f7ff f99c 	bl	40571c <__sprint_r.part.0>
  4063e4:	2800      	cmp	r0, #0
  4063e6:	f43f ae24 	beq.w	406032 <_vfiprintf_r+0x896>
  4063ea:	e624      	b.n	406036 <_vfiprintf_r+0x89a>
  4063ec:	9907      	ldr	r1, [sp, #28]
  4063ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4063f2:	680c      	ldr	r4, [r1, #0]
  4063f4:	3104      	adds	r1, #4
  4063f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4063fa:	46b8      	mov	r8, r7
  4063fc:	9107      	str	r1, [sp, #28]
  4063fe:	f7ff ba3f 	b.w	405880 <_vfiprintf_r+0xe4>
  406402:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406406:	e43c      	b.n	405c82 <_vfiprintf_r+0x4e6>
  406408:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40640c:	e521      	b.n	405e52 <_vfiprintf_r+0x6b6>
  40640e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406412:	f7ff bbf4 	b.w	405bfe <_vfiprintf_r+0x462>
  406416:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40641a:	e491      	b.n	405d40 <_vfiprintf_r+0x5a4>
  40641c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406420:	e469      	b.n	405cf6 <_vfiprintf_r+0x55a>
  406422:	bf00      	nop
  406424:	00408c2c 	.word	0x00408c2c
  406428:	00408c24 	.word	0x00408c24

0040642c <__sbprintf>:
  40642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406430:	460c      	mov	r4, r1
  406432:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406436:	8989      	ldrh	r1, [r1, #12]
  406438:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40643a:	89e5      	ldrh	r5, [r4, #14]
  40643c:	9619      	str	r6, [sp, #100]	; 0x64
  40643e:	f021 0102 	bic.w	r1, r1, #2
  406442:	4606      	mov	r6, r0
  406444:	69e0      	ldr	r0, [r4, #28]
  406446:	f8ad 100c 	strh.w	r1, [sp, #12]
  40644a:	4617      	mov	r7, r2
  40644c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406450:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406452:	f8ad 500e 	strh.w	r5, [sp, #14]
  406456:	4698      	mov	r8, r3
  406458:	ad1a      	add	r5, sp, #104	; 0x68
  40645a:	2300      	movs	r3, #0
  40645c:	9007      	str	r0, [sp, #28]
  40645e:	a816      	add	r0, sp, #88	; 0x58
  406460:	9209      	str	r2, [sp, #36]	; 0x24
  406462:	9306      	str	r3, [sp, #24]
  406464:	9500      	str	r5, [sp, #0]
  406466:	9504      	str	r5, [sp, #16]
  406468:	9102      	str	r1, [sp, #8]
  40646a:	9105      	str	r1, [sp, #20]
  40646c:	f000 fd48 	bl	406f00 <__retarget_lock_init_recursive>
  406470:	4643      	mov	r3, r8
  406472:	463a      	mov	r2, r7
  406474:	4669      	mov	r1, sp
  406476:	4630      	mov	r0, r6
  406478:	f7ff f990 	bl	40579c <_vfiprintf_r>
  40647c:	1e05      	subs	r5, r0, #0
  40647e:	db07      	blt.n	406490 <__sbprintf+0x64>
  406480:	4630      	mov	r0, r6
  406482:	4669      	mov	r1, sp
  406484:	f000 f928 	bl	4066d8 <_fflush_r>
  406488:	2800      	cmp	r0, #0
  40648a:	bf18      	it	ne
  40648c:	f04f 35ff 	movne.w	r5, #4294967295
  406490:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406494:	065b      	lsls	r3, r3, #25
  406496:	d503      	bpl.n	4064a0 <__sbprintf+0x74>
  406498:	89a3      	ldrh	r3, [r4, #12]
  40649a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40649e:	81a3      	strh	r3, [r4, #12]
  4064a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4064a2:	f000 fd2f 	bl	406f04 <__retarget_lock_close_recursive>
  4064a6:	4628      	mov	r0, r5
  4064a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004064b0 <__swsetup_r>:
  4064b0:	b538      	push	{r3, r4, r5, lr}
  4064b2:	4b30      	ldr	r3, [pc, #192]	; (406574 <__swsetup_r+0xc4>)
  4064b4:	681b      	ldr	r3, [r3, #0]
  4064b6:	4605      	mov	r5, r0
  4064b8:	460c      	mov	r4, r1
  4064ba:	b113      	cbz	r3, 4064c2 <__swsetup_r+0x12>
  4064bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4064be:	2a00      	cmp	r2, #0
  4064c0:	d038      	beq.n	406534 <__swsetup_r+0x84>
  4064c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4064c6:	b293      	uxth	r3, r2
  4064c8:	0718      	lsls	r0, r3, #28
  4064ca:	d50c      	bpl.n	4064e6 <__swsetup_r+0x36>
  4064cc:	6920      	ldr	r0, [r4, #16]
  4064ce:	b1a8      	cbz	r0, 4064fc <__swsetup_r+0x4c>
  4064d0:	f013 0201 	ands.w	r2, r3, #1
  4064d4:	d01e      	beq.n	406514 <__swsetup_r+0x64>
  4064d6:	6963      	ldr	r3, [r4, #20]
  4064d8:	2200      	movs	r2, #0
  4064da:	425b      	negs	r3, r3
  4064dc:	61a3      	str	r3, [r4, #24]
  4064de:	60a2      	str	r2, [r4, #8]
  4064e0:	b1f0      	cbz	r0, 406520 <__swsetup_r+0x70>
  4064e2:	2000      	movs	r0, #0
  4064e4:	bd38      	pop	{r3, r4, r5, pc}
  4064e6:	06d9      	lsls	r1, r3, #27
  4064e8:	d53c      	bpl.n	406564 <__swsetup_r+0xb4>
  4064ea:	0758      	lsls	r0, r3, #29
  4064ec:	d426      	bmi.n	40653c <__swsetup_r+0x8c>
  4064ee:	6920      	ldr	r0, [r4, #16]
  4064f0:	f042 0308 	orr.w	r3, r2, #8
  4064f4:	81a3      	strh	r3, [r4, #12]
  4064f6:	b29b      	uxth	r3, r3
  4064f8:	2800      	cmp	r0, #0
  4064fa:	d1e9      	bne.n	4064d0 <__swsetup_r+0x20>
  4064fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406500:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406504:	d0e4      	beq.n	4064d0 <__swsetup_r+0x20>
  406506:	4628      	mov	r0, r5
  406508:	4621      	mov	r1, r4
  40650a:	f000 fd2f 	bl	406f6c <__smakebuf_r>
  40650e:	89a3      	ldrh	r3, [r4, #12]
  406510:	6920      	ldr	r0, [r4, #16]
  406512:	e7dd      	b.n	4064d0 <__swsetup_r+0x20>
  406514:	0799      	lsls	r1, r3, #30
  406516:	bf58      	it	pl
  406518:	6962      	ldrpl	r2, [r4, #20]
  40651a:	60a2      	str	r2, [r4, #8]
  40651c:	2800      	cmp	r0, #0
  40651e:	d1e0      	bne.n	4064e2 <__swsetup_r+0x32>
  406520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406524:	061a      	lsls	r2, r3, #24
  406526:	d5dd      	bpl.n	4064e4 <__swsetup_r+0x34>
  406528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40652c:	81a3      	strh	r3, [r4, #12]
  40652e:	f04f 30ff 	mov.w	r0, #4294967295
  406532:	bd38      	pop	{r3, r4, r5, pc}
  406534:	4618      	mov	r0, r3
  406536:	f000 f927 	bl	406788 <__sinit>
  40653a:	e7c2      	b.n	4064c2 <__swsetup_r+0x12>
  40653c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40653e:	b151      	cbz	r1, 406556 <__swsetup_r+0xa6>
  406540:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406544:	4299      	cmp	r1, r3
  406546:	d004      	beq.n	406552 <__swsetup_r+0xa2>
  406548:	4628      	mov	r0, r5
  40654a:	f000 fa43 	bl	4069d4 <_free_r>
  40654e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406552:	2300      	movs	r3, #0
  406554:	6323      	str	r3, [r4, #48]	; 0x30
  406556:	2300      	movs	r3, #0
  406558:	6920      	ldr	r0, [r4, #16]
  40655a:	6063      	str	r3, [r4, #4]
  40655c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406560:	6020      	str	r0, [r4, #0]
  406562:	e7c5      	b.n	4064f0 <__swsetup_r+0x40>
  406564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406568:	2309      	movs	r3, #9
  40656a:	602b      	str	r3, [r5, #0]
  40656c:	f04f 30ff 	mov.w	r0, #4294967295
  406570:	81a2      	strh	r2, [r4, #12]
  406572:	bd38      	pop	{r3, r4, r5, pc}
  406574:	20400014 	.word	0x20400014

00406578 <register_fini>:
  406578:	4b02      	ldr	r3, [pc, #8]	; (406584 <register_fini+0xc>)
  40657a:	b113      	cbz	r3, 406582 <register_fini+0xa>
  40657c:	4802      	ldr	r0, [pc, #8]	; (406588 <register_fini+0x10>)
  40657e:	f000 b805 	b.w	40658c <atexit>
  406582:	4770      	bx	lr
  406584:	00000000 	.word	0x00000000
  406588:	004067f9 	.word	0x004067f9

0040658c <atexit>:
  40658c:	2300      	movs	r3, #0
  40658e:	4601      	mov	r1, r0
  406590:	461a      	mov	r2, r3
  406592:	4618      	mov	r0, r3
  406594:	f001 b890 	b.w	4076b8 <__register_exitproc>

00406598 <__sflush_r>:
  406598:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40659c:	b29a      	uxth	r2, r3
  40659e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4065a2:	460d      	mov	r5, r1
  4065a4:	0711      	lsls	r1, r2, #28
  4065a6:	4680      	mov	r8, r0
  4065a8:	d43a      	bmi.n	406620 <__sflush_r+0x88>
  4065aa:	686a      	ldr	r2, [r5, #4]
  4065ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4065b0:	2a00      	cmp	r2, #0
  4065b2:	81ab      	strh	r3, [r5, #12]
  4065b4:	dd6f      	ble.n	406696 <__sflush_r+0xfe>
  4065b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4065b8:	2c00      	cmp	r4, #0
  4065ba:	d049      	beq.n	406650 <__sflush_r+0xb8>
  4065bc:	2200      	movs	r2, #0
  4065be:	b29b      	uxth	r3, r3
  4065c0:	f8d8 6000 	ldr.w	r6, [r8]
  4065c4:	f8c8 2000 	str.w	r2, [r8]
  4065c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4065cc:	d067      	beq.n	40669e <__sflush_r+0x106>
  4065ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4065d0:	075f      	lsls	r7, r3, #29
  4065d2:	d505      	bpl.n	4065e0 <__sflush_r+0x48>
  4065d4:	6869      	ldr	r1, [r5, #4]
  4065d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4065d8:	1a52      	subs	r2, r2, r1
  4065da:	b10b      	cbz	r3, 4065e0 <__sflush_r+0x48>
  4065dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4065de:	1ad2      	subs	r2, r2, r3
  4065e0:	2300      	movs	r3, #0
  4065e2:	69e9      	ldr	r1, [r5, #28]
  4065e4:	4640      	mov	r0, r8
  4065e6:	47a0      	blx	r4
  4065e8:	1c44      	adds	r4, r0, #1
  4065ea:	d03c      	beq.n	406666 <__sflush_r+0xce>
  4065ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4065f0:	692a      	ldr	r2, [r5, #16]
  4065f2:	602a      	str	r2, [r5, #0]
  4065f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4065f8:	2200      	movs	r2, #0
  4065fa:	81ab      	strh	r3, [r5, #12]
  4065fc:	04db      	lsls	r3, r3, #19
  4065fe:	606a      	str	r2, [r5, #4]
  406600:	d447      	bmi.n	406692 <__sflush_r+0xfa>
  406602:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406604:	f8c8 6000 	str.w	r6, [r8]
  406608:	b311      	cbz	r1, 406650 <__sflush_r+0xb8>
  40660a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40660e:	4299      	cmp	r1, r3
  406610:	d002      	beq.n	406618 <__sflush_r+0x80>
  406612:	4640      	mov	r0, r8
  406614:	f000 f9de 	bl	4069d4 <_free_r>
  406618:	2000      	movs	r0, #0
  40661a:	6328      	str	r0, [r5, #48]	; 0x30
  40661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406620:	692e      	ldr	r6, [r5, #16]
  406622:	b1ae      	cbz	r6, 406650 <__sflush_r+0xb8>
  406624:	682c      	ldr	r4, [r5, #0]
  406626:	602e      	str	r6, [r5, #0]
  406628:	0791      	lsls	r1, r2, #30
  40662a:	bf0c      	ite	eq
  40662c:	696b      	ldreq	r3, [r5, #20]
  40662e:	2300      	movne	r3, #0
  406630:	1ba4      	subs	r4, r4, r6
  406632:	60ab      	str	r3, [r5, #8]
  406634:	e00a      	b.n	40664c <__sflush_r+0xb4>
  406636:	4623      	mov	r3, r4
  406638:	4632      	mov	r2, r6
  40663a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40663c:	69e9      	ldr	r1, [r5, #28]
  40663e:	4640      	mov	r0, r8
  406640:	47b8      	blx	r7
  406642:	2800      	cmp	r0, #0
  406644:	eba4 0400 	sub.w	r4, r4, r0
  406648:	4406      	add	r6, r0
  40664a:	dd04      	ble.n	406656 <__sflush_r+0xbe>
  40664c:	2c00      	cmp	r4, #0
  40664e:	dcf2      	bgt.n	406636 <__sflush_r+0x9e>
  406650:	2000      	movs	r0, #0
  406652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406656:	89ab      	ldrh	r3, [r5, #12]
  406658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40665c:	81ab      	strh	r3, [r5, #12]
  40665e:	f04f 30ff 	mov.w	r0, #4294967295
  406662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406666:	f8d8 4000 	ldr.w	r4, [r8]
  40666a:	2c1d      	cmp	r4, #29
  40666c:	d8f3      	bhi.n	406656 <__sflush_r+0xbe>
  40666e:	4b19      	ldr	r3, [pc, #100]	; (4066d4 <__sflush_r+0x13c>)
  406670:	40e3      	lsrs	r3, r4
  406672:	43db      	mvns	r3, r3
  406674:	f013 0301 	ands.w	r3, r3, #1
  406678:	d1ed      	bne.n	406656 <__sflush_r+0xbe>
  40667a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40667e:	606b      	str	r3, [r5, #4]
  406680:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406684:	6929      	ldr	r1, [r5, #16]
  406686:	81ab      	strh	r3, [r5, #12]
  406688:	04da      	lsls	r2, r3, #19
  40668a:	6029      	str	r1, [r5, #0]
  40668c:	d5b9      	bpl.n	406602 <__sflush_r+0x6a>
  40668e:	2c00      	cmp	r4, #0
  406690:	d1b7      	bne.n	406602 <__sflush_r+0x6a>
  406692:	6528      	str	r0, [r5, #80]	; 0x50
  406694:	e7b5      	b.n	406602 <__sflush_r+0x6a>
  406696:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406698:	2a00      	cmp	r2, #0
  40669a:	dc8c      	bgt.n	4065b6 <__sflush_r+0x1e>
  40669c:	e7d8      	b.n	406650 <__sflush_r+0xb8>
  40669e:	2301      	movs	r3, #1
  4066a0:	69e9      	ldr	r1, [r5, #28]
  4066a2:	4640      	mov	r0, r8
  4066a4:	47a0      	blx	r4
  4066a6:	1c43      	adds	r3, r0, #1
  4066a8:	4602      	mov	r2, r0
  4066aa:	d002      	beq.n	4066b2 <__sflush_r+0x11a>
  4066ac:	89ab      	ldrh	r3, [r5, #12]
  4066ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4066b0:	e78e      	b.n	4065d0 <__sflush_r+0x38>
  4066b2:	f8d8 3000 	ldr.w	r3, [r8]
  4066b6:	2b00      	cmp	r3, #0
  4066b8:	d0f8      	beq.n	4066ac <__sflush_r+0x114>
  4066ba:	2b1d      	cmp	r3, #29
  4066bc:	d001      	beq.n	4066c2 <__sflush_r+0x12a>
  4066be:	2b16      	cmp	r3, #22
  4066c0:	d102      	bne.n	4066c8 <__sflush_r+0x130>
  4066c2:	f8c8 6000 	str.w	r6, [r8]
  4066c6:	e7c3      	b.n	406650 <__sflush_r+0xb8>
  4066c8:	89ab      	ldrh	r3, [r5, #12]
  4066ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4066ce:	81ab      	strh	r3, [r5, #12]
  4066d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4066d4:	20400001 	.word	0x20400001

004066d8 <_fflush_r>:
  4066d8:	b538      	push	{r3, r4, r5, lr}
  4066da:	460d      	mov	r5, r1
  4066dc:	4604      	mov	r4, r0
  4066de:	b108      	cbz	r0, 4066e4 <_fflush_r+0xc>
  4066e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4066e2:	b1bb      	cbz	r3, 406714 <_fflush_r+0x3c>
  4066e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4066e8:	b188      	cbz	r0, 40670e <_fflush_r+0x36>
  4066ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4066ec:	07db      	lsls	r3, r3, #31
  4066ee:	d401      	bmi.n	4066f4 <_fflush_r+0x1c>
  4066f0:	0581      	lsls	r1, r0, #22
  4066f2:	d517      	bpl.n	406724 <_fflush_r+0x4c>
  4066f4:	4620      	mov	r0, r4
  4066f6:	4629      	mov	r1, r5
  4066f8:	f7ff ff4e 	bl	406598 <__sflush_r>
  4066fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4066fe:	07da      	lsls	r2, r3, #31
  406700:	4604      	mov	r4, r0
  406702:	d402      	bmi.n	40670a <_fflush_r+0x32>
  406704:	89ab      	ldrh	r3, [r5, #12]
  406706:	059b      	lsls	r3, r3, #22
  406708:	d507      	bpl.n	40671a <_fflush_r+0x42>
  40670a:	4620      	mov	r0, r4
  40670c:	bd38      	pop	{r3, r4, r5, pc}
  40670e:	4604      	mov	r4, r0
  406710:	4620      	mov	r0, r4
  406712:	bd38      	pop	{r3, r4, r5, pc}
  406714:	f000 f838 	bl	406788 <__sinit>
  406718:	e7e4      	b.n	4066e4 <_fflush_r+0xc>
  40671a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40671c:	f000 fbf6 	bl	406f0c <__retarget_lock_release_recursive>
  406720:	4620      	mov	r0, r4
  406722:	bd38      	pop	{r3, r4, r5, pc}
  406724:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406726:	f000 fbef 	bl	406f08 <__retarget_lock_acquire_recursive>
  40672a:	e7e3      	b.n	4066f4 <_fflush_r+0x1c>

0040672c <_cleanup_r>:
  40672c:	4901      	ldr	r1, [pc, #4]	; (406734 <_cleanup_r+0x8>)
  40672e:	f000 bbaf 	b.w	406e90 <_fwalk_reent>
  406732:	bf00      	nop
  406734:	004077a1 	.word	0x004077a1

00406738 <std.isra.0>:
  406738:	b510      	push	{r4, lr}
  40673a:	2300      	movs	r3, #0
  40673c:	4604      	mov	r4, r0
  40673e:	8181      	strh	r1, [r0, #12]
  406740:	81c2      	strh	r2, [r0, #14]
  406742:	6003      	str	r3, [r0, #0]
  406744:	6043      	str	r3, [r0, #4]
  406746:	6083      	str	r3, [r0, #8]
  406748:	6643      	str	r3, [r0, #100]	; 0x64
  40674a:	6103      	str	r3, [r0, #16]
  40674c:	6143      	str	r3, [r0, #20]
  40674e:	6183      	str	r3, [r0, #24]
  406750:	4619      	mov	r1, r3
  406752:	2208      	movs	r2, #8
  406754:	305c      	adds	r0, #92	; 0x5c
  406756:	f7fe fe1d 	bl	405394 <memset>
  40675a:	4807      	ldr	r0, [pc, #28]	; (406778 <std.isra.0+0x40>)
  40675c:	4907      	ldr	r1, [pc, #28]	; (40677c <std.isra.0+0x44>)
  40675e:	4a08      	ldr	r2, [pc, #32]	; (406780 <std.isra.0+0x48>)
  406760:	4b08      	ldr	r3, [pc, #32]	; (406784 <std.isra.0+0x4c>)
  406762:	6220      	str	r0, [r4, #32]
  406764:	61e4      	str	r4, [r4, #28]
  406766:	6261      	str	r1, [r4, #36]	; 0x24
  406768:	62a2      	str	r2, [r4, #40]	; 0x28
  40676a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40676c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406774:	f000 bbc4 	b.w	406f00 <__retarget_lock_init_recursive>
  406778:	004074e5 	.word	0x004074e5
  40677c:	00407509 	.word	0x00407509
  406780:	00407545 	.word	0x00407545
  406784:	00407565 	.word	0x00407565

00406788 <__sinit>:
  406788:	b510      	push	{r4, lr}
  40678a:	4604      	mov	r4, r0
  40678c:	4812      	ldr	r0, [pc, #72]	; (4067d8 <__sinit+0x50>)
  40678e:	f000 fbbb 	bl	406f08 <__retarget_lock_acquire_recursive>
  406792:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406794:	b9d2      	cbnz	r2, 4067cc <__sinit+0x44>
  406796:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40679a:	4810      	ldr	r0, [pc, #64]	; (4067dc <__sinit+0x54>)
  40679c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4067a0:	2103      	movs	r1, #3
  4067a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4067a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4067a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4067ac:	6860      	ldr	r0, [r4, #4]
  4067ae:	2104      	movs	r1, #4
  4067b0:	f7ff ffc2 	bl	406738 <std.isra.0>
  4067b4:	2201      	movs	r2, #1
  4067b6:	2109      	movs	r1, #9
  4067b8:	68a0      	ldr	r0, [r4, #8]
  4067ba:	f7ff ffbd 	bl	406738 <std.isra.0>
  4067be:	2202      	movs	r2, #2
  4067c0:	2112      	movs	r1, #18
  4067c2:	68e0      	ldr	r0, [r4, #12]
  4067c4:	f7ff ffb8 	bl	406738 <std.isra.0>
  4067c8:	2301      	movs	r3, #1
  4067ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4067cc:	4802      	ldr	r0, [pc, #8]	; (4067d8 <__sinit+0x50>)
  4067ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4067d2:	f000 bb9b 	b.w	406f0c <__retarget_lock_release_recursive>
  4067d6:	bf00      	nop
  4067d8:	2040c880 	.word	0x2040c880
  4067dc:	0040672d 	.word	0x0040672d

004067e0 <__sfp_lock_acquire>:
  4067e0:	4801      	ldr	r0, [pc, #4]	; (4067e8 <__sfp_lock_acquire+0x8>)
  4067e2:	f000 bb91 	b.w	406f08 <__retarget_lock_acquire_recursive>
  4067e6:	bf00      	nop
  4067e8:	2040c894 	.word	0x2040c894

004067ec <__sfp_lock_release>:
  4067ec:	4801      	ldr	r0, [pc, #4]	; (4067f4 <__sfp_lock_release+0x8>)
  4067ee:	f000 bb8d 	b.w	406f0c <__retarget_lock_release_recursive>
  4067f2:	bf00      	nop
  4067f4:	2040c894 	.word	0x2040c894

004067f8 <__libc_fini_array>:
  4067f8:	b538      	push	{r3, r4, r5, lr}
  4067fa:	4c0a      	ldr	r4, [pc, #40]	; (406824 <__libc_fini_array+0x2c>)
  4067fc:	4d0a      	ldr	r5, [pc, #40]	; (406828 <__libc_fini_array+0x30>)
  4067fe:	1b64      	subs	r4, r4, r5
  406800:	10a4      	asrs	r4, r4, #2
  406802:	d00a      	beq.n	40681a <__libc_fini_array+0x22>
  406804:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406808:	3b01      	subs	r3, #1
  40680a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40680e:	3c01      	subs	r4, #1
  406810:	f855 3904 	ldr.w	r3, [r5], #-4
  406814:	4798      	blx	r3
  406816:	2c00      	cmp	r4, #0
  406818:	d1f9      	bne.n	40680e <__libc_fini_array+0x16>
  40681a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40681e:	f002 baa9 	b.w	408d74 <_fini>
  406822:	bf00      	nop
  406824:	00408d84 	.word	0x00408d84
  406828:	00408d80 	.word	0x00408d80

0040682c <__fputwc>:
  40682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406830:	b082      	sub	sp, #8
  406832:	4680      	mov	r8, r0
  406834:	4689      	mov	r9, r1
  406836:	4614      	mov	r4, r2
  406838:	f000 fb54 	bl	406ee4 <__locale_mb_cur_max>
  40683c:	2801      	cmp	r0, #1
  40683e:	d036      	beq.n	4068ae <__fputwc+0x82>
  406840:	464a      	mov	r2, r9
  406842:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406846:	a901      	add	r1, sp, #4
  406848:	4640      	mov	r0, r8
  40684a:	f000 fee7 	bl	40761c <_wcrtomb_r>
  40684e:	1c42      	adds	r2, r0, #1
  406850:	4606      	mov	r6, r0
  406852:	d025      	beq.n	4068a0 <__fputwc+0x74>
  406854:	b3a8      	cbz	r0, 4068c2 <__fputwc+0x96>
  406856:	f89d e004 	ldrb.w	lr, [sp, #4]
  40685a:	2500      	movs	r5, #0
  40685c:	f10d 0a04 	add.w	sl, sp, #4
  406860:	e009      	b.n	406876 <__fputwc+0x4a>
  406862:	6823      	ldr	r3, [r4, #0]
  406864:	1c5a      	adds	r2, r3, #1
  406866:	6022      	str	r2, [r4, #0]
  406868:	f883 e000 	strb.w	lr, [r3]
  40686c:	3501      	adds	r5, #1
  40686e:	42b5      	cmp	r5, r6
  406870:	d227      	bcs.n	4068c2 <__fputwc+0x96>
  406872:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406876:	68a3      	ldr	r3, [r4, #8]
  406878:	3b01      	subs	r3, #1
  40687a:	2b00      	cmp	r3, #0
  40687c:	60a3      	str	r3, [r4, #8]
  40687e:	daf0      	bge.n	406862 <__fputwc+0x36>
  406880:	69a7      	ldr	r7, [r4, #24]
  406882:	42bb      	cmp	r3, r7
  406884:	4671      	mov	r1, lr
  406886:	4622      	mov	r2, r4
  406888:	4640      	mov	r0, r8
  40688a:	db02      	blt.n	406892 <__fputwc+0x66>
  40688c:	f1be 0f0a 	cmp.w	lr, #10
  406890:	d1e7      	bne.n	406862 <__fputwc+0x36>
  406892:	f000 fe6b 	bl	40756c <__swbuf_r>
  406896:	1c43      	adds	r3, r0, #1
  406898:	d1e8      	bne.n	40686c <__fputwc+0x40>
  40689a:	b002      	add	sp, #8
  40689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4068a0:	89a3      	ldrh	r3, [r4, #12]
  4068a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4068a6:	81a3      	strh	r3, [r4, #12]
  4068a8:	b002      	add	sp, #8
  4068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4068ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4068b2:	2bfe      	cmp	r3, #254	; 0xfe
  4068b4:	d8c4      	bhi.n	406840 <__fputwc+0x14>
  4068b6:	fa5f fe89 	uxtb.w	lr, r9
  4068ba:	4606      	mov	r6, r0
  4068bc:	f88d e004 	strb.w	lr, [sp, #4]
  4068c0:	e7cb      	b.n	40685a <__fputwc+0x2e>
  4068c2:	4648      	mov	r0, r9
  4068c4:	b002      	add	sp, #8
  4068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4068ca:	bf00      	nop

004068cc <_fputwc_r>:
  4068cc:	b530      	push	{r4, r5, lr}
  4068ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4068d0:	f013 0f01 	tst.w	r3, #1
  4068d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4068d8:	4614      	mov	r4, r2
  4068da:	b083      	sub	sp, #12
  4068dc:	4605      	mov	r5, r0
  4068de:	b29a      	uxth	r2, r3
  4068e0:	d101      	bne.n	4068e6 <_fputwc_r+0x1a>
  4068e2:	0590      	lsls	r0, r2, #22
  4068e4:	d51c      	bpl.n	406920 <_fputwc_r+0x54>
  4068e6:	0490      	lsls	r0, r2, #18
  4068e8:	d406      	bmi.n	4068f8 <_fputwc_r+0x2c>
  4068ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4068ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4068f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4068f4:	81a3      	strh	r3, [r4, #12]
  4068f6:	6662      	str	r2, [r4, #100]	; 0x64
  4068f8:	4628      	mov	r0, r5
  4068fa:	4622      	mov	r2, r4
  4068fc:	f7ff ff96 	bl	40682c <__fputwc>
  406900:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406902:	07da      	lsls	r2, r3, #31
  406904:	4605      	mov	r5, r0
  406906:	d402      	bmi.n	40690e <_fputwc_r+0x42>
  406908:	89a3      	ldrh	r3, [r4, #12]
  40690a:	059b      	lsls	r3, r3, #22
  40690c:	d502      	bpl.n	406914 <_fputwc_r+0x48>
  40690e:	4628      	mov	r0, r5
  406910:	b003      	add	sp, #12
  406912:	bd30      	pop	{r4, r5, pc}
  406914:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406916:	f000 faf9 	bl	406f0c <__retarget_lock_release_recursive>
  40691a:	4628      	mov	r0, r5
  40691c:	b003      	add	sp, #12
  40691e:	bd30      	pop	{r4, r5, pc}
  406920:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406922:	9101      	str	r1, [sp, #4]
  406924:	f000 faf0 	bl	406f08 <__retarget_lock_acquire_recursive>
  406928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40692c:	9901      	ldr	r1, [sp, #4]
  40692e:	b29a      	uxth	r2, r3
  406930:	e7d9      	b.n	4068e6 <_fputwc_r+0x1a>
  406932:	bf00      	nop

00406934 <_malloc_trim_r>:
  406934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406936:	4f24      	ldr	r7, [pc, #144]	; (4069c8 <_malloc_trim_r+0x94>)
  406938:	460c      	mov	r4, r1
  40693a:	4606      	mov	r6, r0
  40693c:	f7fe fd78 	bl	405430 <__malloc_lock>
  406940:	68bb      	ldr	r3, [r7, #8]
  406942:	685d      	ldr	r5, [r3, #4]
  406944:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406948:	310f      	adds	r1, #15
  40694a:	f025 0503 	bic.w	r5, r5, #3
  40694e:	4429      	add	r1, r5
  406950:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406954:	f021 010f 	bic.w	r1, r1, #15
  406958:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40695c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406960:	db07      	blt.n	406972 <_malloc_trim_r+0x3e>
  406962:	2100      	movs	r1, #0
  406964:	4630      	mov	r0, r6
  406966:	f7fe fd6f 	bl	405448 <_sbrk_r>
  40696a:	68bb      	ldr	r3, [r7, #8]
  40696c:	442b      	add	r3, r5
  40696e:	4298      	cmp	r0, r3
  406970:	d004      	beq.n	40697c <_malloc_trim_r+0x48>
  406972:	4630      	mov	r0, r6
  406974:	f7fe fd62 	bl	40543c <__malloc_unlock>
  406978:	2000      	movs	r0, #0
  40697a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40697c:	4261      	negs	r1, r4
  40697e:	4630      	mov	r0, r6
  406980:	f7fe fd62 	bl	405448 <_sbrk_r>
  406984:	3001      	adds	r0, #1
  406986:	d00d      	beq.n	4069a4 <_malloc_trim_r+0x70>
  406988:	4b10      	ldr	r3, [pc, #64]	; (4069cc <_malloc_trim_r+0x98>)
  40698a:	68ba      	ldr	r2, [r7, #8]
  40698c:	6819      	ldr	r1, [r3, #0]
  40698e:	1b2d      	subs	r5, r5, r4
  406990:	f045 0501 	orr.w	r5, r5, #1
  406994:	4630      	mov	r0, r6
  406996:	1b09      	subs	r1, r1, r4
  406998:	6055      	str	r5, [r2, #4]
  40699a:	6019      	str	r1, [r3, #0]
  40699c:	f7fe fd4e 	bl	40543c <__malloc_unlock>
  4069a0:	2001      	movs	r0, #1
  4069a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4069a4:	2100      	movs	r1, #0
  4069a6:	4630      	mov	r0, r6
  4069a8:	f7fe fd4e 	bl	405448 <_sbrk_r>
  4069ac:	68ba      	ldr	r2, [r7, #8]
  4069ae:	1a83      	subs	r3, r0, r2
  4069b0:	2b0f      	cmp	r3, #15
  4069b2:	ddde      	ble.n	406972 <_malloc_trim_r+0x3e>
  4069b4:	4c06      	ldr	r4, [pc, #24]	; (4069d0 <_malloc_trim_r+0x9c>)
  4069b6:	4905      	ldr	r1, [pc, #20]	; (4069cc <_malloc_trim_r+0x98>)
  4069b8:	6824      	ldr	r4, [r4, #0]
  4069ba:	f043 0301 	orr.w	r3, r3, #1
  4069be:	1b00      	subs	r0, r0, r4
  4069c0:	6053      	str	r3, [r2, #4]
  4069c2:	6008      	str	r0, [r1, #0]
  4069c4:	e7d5      	b.n	406972 <_malloc_trim_r+0x3e>
  4069c6:	bf00      	nop
  4069c8:	20400440 	.word	0x20400440
  4069cc:	2040c760 	.word	0x2040c760
  4069d0:	20400848 	.word	0x20400848

004069d4 <_free_r>:
  4069d4:	2900      	cmp	r1, #0
  4069d6:	d044      	beq.n	406a62 <_free_r+0x8e>
  4069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4069dc:	460d      	mov	r5, r1
  4069de:	4680      	mov	r8, r0
  4069e0:	f7fe fd26 	bl	405430 <__malloc_lock>
  4069e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4069e8:	4969      	ldr	r1, [pc, #420]	; (406b90 <_free_r+0x1bc>)
  4069ea:	f027 0301 	bic.w	r3, r7, #1
  4069ee:	f1a5 0408 	sub.w	r4, r5, #8
  4069f2:	18e2      	adds	r2, r4, r3
  4069f4:	688e      	ldr	r6, [r1, #8]
  4069f6:	6850      	ldr	r0, [r2, #4]
  4069f8:	42b2      	cmp	r2, r6
  4069fa:	f020 0003 	bic.w	r0, r0, #3
  4069fe:	d05e      	beq.n	406abe <_free_r+0xea>
  406a00:	07fe      	lsls	r6, r7, #31
  406a02:	6050      	str	r0, [r2, #4]
  406a04:	d40b      	bmi.n	406a1e <_free_r+0x4a>
  406a06:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406a0a:	1be4      	subs	r4, r4, r7
  406a0c:	f101 0e08 	add.w	lr, r1, #8
  406a10:	68a5      	ldr	r5, [r4, #8]
  406a12:	4575      	cmp	r5, lr
  406a14:	443b      	add	r3, r7
  406a16:	d06d      	beq.n	406af4 <_free_r+0x120>
  406a18:	68e7      	ldr	r7, [r4, #12]
  406a1a:	60ef      	str	r7, [r5, #12]
  406a1c:	60bd      	str	r5, [r7, #8]
  406a1e:	1815      	adds	r5, r2, r0
  406a20:	686d      	ldr	r5, [r5, #4]
  406a22:	07ed      	lsls	r5, r5, #31
  406a24:	d53e      	bpl.n	406aa4 <_free_r+0xd0>
  406a26:	f043 0201 	orr.w	r2, r3, #1
  406a2a:	6062      	str	r2, [r4, #4]
  406a2c:	50e3      	str	r3, [r4, r3]
  406a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406a32:	d217      	bcs.n	406a64 <_free_r+0x90>
  406a34:	08db      	lsrs	r3, r3, #3
  406a36:	1c58      	adds	r0, r3, #1
  406a38:	109a      	asrs	r2, r3, #2
  406a3a:	684d      	ldr	r5, [r1, #4]
  406a3c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406a40:	60a7      	str	r7, [r4, #8]
  406a42:	2301      	movs	r3, #1
  406a44:	4093      	lsls	r3, r2
  406a46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406a4a:	432b      	orrs	r3, r5
  406a4c:	3a08      	subs	r2, #8
  406a4e:	60e2      	str	r2, [r4, #12]
  406a50:	604b      	str	r3, [r1, #4]
  406a52:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406a56:	60fc      	str	r4, [r7, #12]
  406a58:	4640      	mov	r0, r8
  406a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406a5e:	f7fe bced 	b.w	40543c <__malloc_unlock>
  406a62:	4770      	bx	lr
  406a64:	0a5a      	lsrs	r2, r3, #9
  406a66:	2a04      	cmp	r2, #4
  406a68:	d852      	bhi.n	406b10 <_free_r+0x13c>
  406a6a:	099a      	lsrs	r2, r3, #6
  406a6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406a70:	00ff      	lsls	r7, r7, #3
  406a72:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406a76:	19c8      	adds	r0, r1, r7
  406a78:	59ca      	ldr	r2, [r1, r7]
  406a7a:	3808      	subs	r0, #8
  406a7c:	4290      	cmp	r0, r2
  406a7e:	d04f      	beq.n	406b20 <_free_r+0x14c>
  406a80:	6851      	ldr	r1, [r2, #4]
  406a82:	f021 0103 	bic.w	r1, r1, #3
  406a86:	428b      	cmp	r3, r1
  406a88:	d232      	bcs.n	406af0 <_free_r+0x11c>
  406a8a:	6892      	ldr	r2, [r2, #8]
  406a8c:	4290      	cmp	r0, r2
  406a8e:	d1f7      	bne.n	406a80 <_free_r+0xac>
  406a90:	68c3      	ldr	r3, [r0, #12]
  406a92:	60a0      	str	r0, [r4, #8]
  406a94:	60e3      	str	r3, [r4, #12]
  406a96:	609c      	str	r4, [r3, #8]
  406a98:	60c4      	str	r4, [r0, #12]
  406a9a:	4640      	mov	r0, r8
  406a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406aa0:	f7fe bccc 	b.w	40543c <__malloc_unlock>
  406aa4:	6895      	ldr	r5, [r2, #8]
  406aa6:	4f3b      	ldr	r7, [pc, #236]	; (406b94 <_free_r+0x1c0>)
  406aa8:	42bd      	cmp	r5, r7
  406aaa:	4403      	add	r3, r0
  406aac:	d040      	beq.n	406b30 <_free_r+0x15c>
  406aae:	68d0      	ldr	r0, [r2, #12]
  406ab0:	60e8      	str	r0, [r5, #12]
  406ab2:	f043 0201 	orr.w	r2, r3, #1
  406ab6:	6085      	str	r5, [r0, #8]
  406ab8:	6062      	str	r2, [r4, #4]
  406aba:	50e3      	str	r3, [r4, r3]
  406abc:	e7b7      	b.n	406a2e <_free_r+0x5a>
  406abe:	07ff      	lsls	r7, r7, #31
  406ac0:	4403      	add	r3, r0
  406ac2:	d407      	bmi.n	406ad4 <_free_r+0x100>
  406ac4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406ac8:	1aa4      	subs	r4, r4, r2
  406aca:	4413      	add	r3, r2
  406acc:	68a0      	ldr	r0, [r4, #8]
  406ace:	68e2      	ldr	r2, [r4, #12]
  406ad0:	60c2      	str	r2, [r0, #12]
  406ad2:	6090      	str	r0, [r2, #8]
  406ad4:	4a30      	ldr	r2, [pc, #192]	; (406b98 <_free_r+0x1c4>)
  406ad6:	6812      	ldr	r2, [r2, #0]
  406ad8:	f043 0001 	orr.w	r0, r3, #1
  406adc:	4293      	cmp	r3, r2
  406ade:	6060      	str	r0, [r4, #4]
  406ae0:	608c      	str	r4, [r1, #8]
  406ae2:	d3b9      	bcc.n	406a58 <_free_r+0x84>
  406ae4:	4b2d      	ldr	r3, [pc, #180]	; (406b9c <_free_r+0x1c8>)
  406ae6:	4640      	mov	r0, r8
  406ae8:	6819      	ldr	r1, [r3, #0]
  406aea:	f7ff ff23 	bl	406934 <_malloc_trim_r>
  406aee:	e7b3      	b.n	406a58 <_free_r+0x84>
  406af0:	4610      	mov	r0, r2
  406af2:	e7cd      	b.n	406a90 <_free_r+0xbc>
  406af4:	1811      	adds	r1, r2, r0
  406af6:	6849      	ldr	r1, [r1, #4]
  406af8:	07c9      	lsls	r1, r1, #31
  406afa:	d444      	bmi.n	406b86 <_free_r+0x1b2>
  406afc:	6891      	ldr	r1, [r2, #8]
  406afe:	68d2      	ldr	r2, [r2, #12]
  406b00:	60ca      	str	r2, [r1, #12]
  406b02:	4403      	add	r3, r0
  406b04:	f043 0001 	orr.w	r0, r3, #1
  406b08:	6091      	str	r1, [r2, #8]
  406b0a:	6060      	str	r0, [r4, #4]
  406b0c:	50e3      	str	r3, [r4, r3]
  406b0e:	e7a3      	b.n	406a58 <_free_r+0x84>
  406b10:	2a14      	cmp	r2, #20
  406b12:	d816      	bhi.n	406b42 <_free_r+0x16e>
  406b14:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406b18:	00ff      	lsls	r7, r7, #3
  406b1a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406b1e:	e7aa      	b.n	406a76 <_free_r+0xa2>
  406b20:	10aa      	asrs	r2, r5, #2
  406b22:	2301      	movs	r3, #1
  406b24:	684d      	ldr	r5, [r1, #4]
  406b26:	4093      	lsls	r3, r2
  406b28:	432b      	orrs	r3, r5
  406b2a:	604b      	str	r3, [r1, #4]
  406b2c:	4603      	mov	r3, r0
  406b2e:	e7b0      	b.n	406a92 <_free_r+0xbe>
  406b30:	f043 0201 	orr.w	r2, r3, #1
  406b34:	614c      	str	r4, [r1, #20]
  406b36:	610c      	str	r4, [r1, #16]
  406b38:	60e5      	str	r5, [r4, #12]
  406b3a:	60a5      	str	r5, [r4, #8]
  406b3c:	6062      	str	r2, [r4, #4]
  406b3e:	50e3      	str	r3, [r4, r3]
  406b40:	e78a      	b.n	406a58 <_free_r+0x84>
  406b42:	2a54      	cmp	r2, #84	; 0x54
  406b44:	d806      	bhi.n	406b54 <_free_r+0x180>
  406b46:	0b1a      	lsrs	r2, r3, #12
  406b48:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406b4c:	00ff      	lsls	r7, r7, #3
  406b4e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406b52:	e790      	b.n	406a76 <_free_r+0xa2>
  406b54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406b58:	d806      	bhi.n	406b68 <_free_r+0x194>
  406b5a:	0bda      	lsrs	r2, r3, #15
  406b5c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406b60:	00ff      	lsls	r7, r7, #3
  406b62:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406b66:	e786      	b.n	406a76 <_free_r+0xa2>
  406b68:	f240 5054 	movw	r0, #1364	; 0x554
  406b6c:	4282      	cmp	r2, r0
  406b6e:	d806      	bhi.n	406b7e <_free_r+0x1aa>
  406b70:	0c9a      	lsrs	r2, r3, #18
  406b72:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406b76:	00ff      	lsls	r7, r7, #3
  406b78:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406b7c:	e77b      	b.n	406a76 <_free_r+0xa2>
  406b7e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406b82:	257e      	movs	r5, #126	; 0x7e
  406b84:	e777      	b.n	406a76 <_free_r+0xa2>
  406b86:	f043 0101 	orr.w	r1, r3, #1
  406b8a:	6061      	str	r1, [r4, #4]
  406b8c:	6013      	str	r3, [r2, #0]
  406b8e:	e763      	b.n	406a58 <_free_r+0x84>
  406b90:	20400440 	.word	0x20400440
  406b94:	20400448 	.word	0x20400448
  406b98:	2040084c 	.word	0x2040084c
  406b9c:	2040c790 	.word	0x2040c790

00406ba0 <__sfvwrite_r>:
  406ba0:	6893      	ldr	r3, [r2, #8]
  406ba2:	2b00      	cmp	r3, #0
  406ba4:	d073      	beq.n	406c8e <__sfvwrite_r+0xee>
  406ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406baa:	898b      	ldrh	r3, [r1, #12]
  406bac:	b083      	sub	sp, #12
  406bae:	460c      	mov	r4, r1
  406bb0:	0719      	lsls	r1, r3, #28
  406bb2:	9000      	str	r0, [sp, #0]
  406bb4:	4616      	mov	r6, r2
  406bb6:	d526      	bpl.n	406c06 <__sfvwrite_r+0x66>
  406bb8:	6922      	ldr	r2, [r4, #16]
  406bba:	b322      	cbz	r2, 406c06 <__sfvwrite_r+0x66>
  406bbc:	f013 0002 	ands.w	r0, r3, #2
  406bc0:	6835      	ldr	r5, [r6, #0]
  406bc2:	d02c      	beq.n	406c1e <__sfvwrite_r+0x7e>
  406bc4:	f04f 0900 	mov.w	r9, #0
  406bc8:	4fb0      	ldr	r7, [pc, #704]	; (406e8c <__sfvwrite_r+0x2ec>)
  406bca:	46c8      	mov	r8, r9
  406bcc:	46b2      	mov	sl, r6
  406bce:	45b8      	cmp	r8, r7
  406bd0:	4643      	mov	r3, r8
  406bd2:	464a      	mov	r2, r9
  406bd4:	bf28      	it	cs
  406bd6:	463b      	movcs	r3, r7
  406bd8:	9800      	ldr	r0, [sp, #0]
  406bda:	f1b8 0f00 	cmp.w	r8, #0
  406bde:	d050      	beq.n	406c82 <__sfvwrite_r+0xe2>
  406be0:	69e1      	ldr	r1, [r4, #28]
  406be2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406be4:	47b0      	blx	r6
  406be6:	2800      	cmp	r0, #0
  406be8:	dd58      	ble.n	406c9c <__sfvwrite_r+0xfc>
  406bea:	f8da 3008 	ldr.w	r3, [sl, #8]
  406bee:	1a1b      	subs	r3, r3, r0
  406bf0:	4481      	add	r9, r0
  406bf2:	eba8 0800 	sub.w	r8, r8, r0
  406bf6:	f8ca 3008 	str.w	r3, [sl, #8]
  406bfa:	2b00      	cmp	r3, #0
  406bfc:	d1e7      	bne.n	406bce <__sfvwrite_r+0x2e>
  406bfe:	2000      	movs	r0, #0
  406c00:	b003      	add	sp, #12
  406c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c06:	4621      	mov	r1, r4
  406c08:	9800      	ldr	r0, [sp, #0]
  406c0a:	f7ff fc51 	bl	4064b0 <__swsetup_r>
  406c0e:	2800      	cmp	r0, #0
  406c10:	f040 8133 	bne.w	406e7a <__sfvwrite_r+0x2da>
  406c14:	89a3      	ldrh	r3, [r4, #12]
  406c16:	6835      	ldr	r5, [r6, #0]
  406c18:	f013 0002 	ands.w	r0, r3, #2
  406c1c:	d1d2      	bne.n	406bc4 <__sfvwrite_r+0x24>
  406c1e:	f013 0901 	ands.w	r9, r3, #1
  406c22:	d145      	bne.n	406cb0 <__sfvwrite_r+0x110>
  406c24:	464f      	mov	r7, r9
  406c26:	9601      	str	r6, [sp, #4]
  406c28:	b337      	cbz	r7, 406c78 <__sfvwrite_r+0xd8>
  406c2a:	059a      	lsls	r2, r3, #22
  406c2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406c30:	f140 8083 	bpl.w	406d3a <__sfvwrite_r+0x19a>
  406c34:	4547      	cmp	r7, r8
  406c36:	46c3      	mov	fp, r8
  406c38:	f0c0 80ab 	bcc.w	406d92 <__sfvwrite_r+0x1f2>
  406c3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406c40:	f040 80ac 	bne.w	406d9c <__sfvwrite_r+0x1fc>
  406c44:	6820      	ldr	r0, [r4, #0]
  406c46:	46ba      	mov	sl, r7
  406c48:	465a      	mov	r2, fp
  406c4a:	4649      	mov	r1, r9
  406c4c:	f000 fa40 	bl	4070d0 <memmove>
  406c50:	68a2      	ldr	r2, [r4, #8]
  406c52:	6823      	ldr	r3, [r4, #0]
  406c54:	eba2 0208 	sub.w	r2, r2, r8
  406c58:	445b      	add	r3, fp
  406c5a:	60a2      	str	r2, [r4, #8]
  406c5c:	6023      	str	r3, [r4, #0]
  406c5e:	9a01      	ldr	r2, [sp, #4]
  406c60:	6893      	ldr	r3, [r2, #8]
  406c62:	eba3 030a 	sub.w	r3, r3, sl
  406c66:	44d1      	add	r9, sl
  406c68:	eba7 070a 	sub.w	r7, r7, sl
  406c6c:	6093      	str	r3, [r2, #8]
  406c6e:	2b00      	cmp	r3, #0
  406c70:	d0c5      	beq.n	406bfe <__sfvwrite_r+0x5e>
  406c72:	89a3      	ldrh	r3, [r4, #12]
  406c74:	2f00      	cmp	r7, #0
  406c76:	d1d8      	bne.n	406c2a <__sfvwrite_r+0x8a>
  406c78:	f8d5 9000 	ldr.w	r9, [r5]
  406c7c:	686f      	ldr	r7, [r5, #4]
  406c7e:	3508      	adds	r5, #8
  406c80:	e7d2      	b.n	406c28 <__sfvwrite_r+0x88>
  406c82:	f8d5 9000 	ldr.w	r9, [r5]
  406c86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406c8a:	3508      	adds	r5, #8
  406c8c:	e79f      	b.n	406bce <__sfvwrite_r+0x2e>
  406c8e:	2000      	movs	r0, #0
  406c90:	4770      	bx	lr
  406c92:	4621      	mov	r1, r4
  406c94:	9800      	ldr	r0, [sp, #0]
  406c96:	f7ff fd1f 	bl	4066d8 <_fflush_r>
  406c9a:	b370      	cbz	r0, 406cfa <__sfvwrite_r+0x15a>
  406c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406ca4:	f04f 30ff 	mov.w	r0, #4294967295
  406ca8:	81a3      	strh	r3, [r4, #12]
  406caa:	b003      	add	sp, #12
  406cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cb0:	4681      	mov	r9, r0
  406cb2:	4633      	mov	r3, r6
  406cb4:	464e      	mov	r6, r9
  406cb6:	46a8      	mov	r8, r5
  406cb8:	469a      	mov	sl, r3
  406cba:	464d      	mov	r5, r9
  406cbc:	b34e      	cbz	r6, 406d12 <__sfvwrite_r+0x172>
  406cbe:	b380      	cbz	r0, 406d22 <__sfvwrite_r+0x182>
  406cc0:	6820      	ldr	r0, [r4, #0]
  406cc2:	6923      	ldr	r3, [r4, #16]
  406cc4:	6962      	ldr	r2, [r4, #20]
  406cc6:	45b1      	cmp	r9, r6
  406cc8:	46cb      	mov	fp, r9
  406cca:	bf28      	it	cs
  406ccc:	46b3      	movcs	fp, r6
  406cce:	4298      	cmp	r0, r3
  406cd0:	465f      	mov	r7, fp
  406cd2:	d904      	bls.n	406cde <__sfvwrite_r+0x13e>
  406cd4:	68a3      	ldr	r3, [r4, #8]
  406cd6:	4413      	add	r3, r2
  406cd8:	459b      	cmp	fp, r3
  406cda:	f300 80a6 	bgt.w	406e2a <__sfvwrite_r+0x28a>
  406cde:	4593      	cmp	fp, r2
  406ce0:	db4b      	blt.n	406d7a <__sfvwrite_r+0x1da>
  406ce2:	4613      	mov	r3, r2
  406ce4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406ce6:	69e1      	ldr	r1, [r4, #28]
  406ce8:	9800      	ldr	r0, [sp, #0]
  406cea:	462a      	mov	r2, r5
  406cec:	47b8      	blx	r7
  406cee:	1e07      	subs	r7, r0, #0
  406cf0:	ddd4      	ble.n	406c9c <__sfvwrite_r+0xfc>
  406cf2:	ebb9 0907 	subs.w	r9, r9, r7
  406cf6:	d0cc      	beq.n	406c92 <__sfvwrite_r+0xf2>
  406cf8:	2001      	movs	r0, #1
  406cfa:	f8da 3008 	ldr.w	r3, [sl, #8]
  406cfe:	1bdb      	subs	r3, r3, r7
  406d00:	443d      	add	r5, r7
  406d02:	1bf6      	subs	r6, r6, r7
  406d04:	f8ca 3008 	str.w	r3, [sl, #8]
  406d08:	2b00      	cmp	r3, #0
  406d0a:	f43f af78 	beq.w	406bfe <__sfvwrite_r+0x5e>
  406d0e:	2e00      	cmp	r6, #0
  406d10:	d1d5      	bne.n	406cbe <__sfvwrite_r+0x11e>
  406d12:	f108 0308 	add.w	r3, r8, #8
  406d16:	e913 0060 	ldmdb	r3, {r5, r6}
  406d1a:	4698      	mov	r8, r3
  406d1c:	3308      	adds	r3, #8
  406d1e:	2e00      	cmp	r6, #0
  406d20:	d0f9      	beq.n	406d16 <__sfvwrite_r+0x176>
  406d22:	4632      	mov	r2, r6
  406d24:	210a      	movs	r1, #10
  406d26:	4628      	mov	r0, r5
  406d28:	f000 f982 	bl	407030 <memchr>
  406d2c:	2800      	cmp	r0, #0
  406d2e:	f000 80a1 	beq.w	406e74 <__sfvwrite_r+0x2d4>
  406d32:	3001      	adds	r0, #1
  406d34:	eba0 0905 	sub.w	r9, r0, r5
  406d38:	e7c2      	b.n	406cc0 <__sfvwrite_r+0x120>
  406d3a:	6820      	ldr	r0, [r4, #0]
  406d3c:	6923      	ldr	r3, [r4, #16]
  406d3e:	4298      	cmp	r0, r3
  406d40:	d802      	bhi.n	406d48 <__sfvwrite_r+0x1a8>
  406d42:	6963      	ldr	r3, [r4, #20]
  406d44:	429f      	cmp	r7, r3
  406d46:	d25d      	bcs.n	406e04 <__sfvwrite_r+0x264>
  406d48:	45b8      	cmp	r8, r7
  406d4a:	bf28      	it	cs
  406d4c:	46b8      	movcs	r8, r7
  406d4e:	4642      	mov	r2, r8
  406d50:	4649      	mov	r1, r9
  406d52:	f000 f9bd 	bl	4070d0 <memmove>
  406d56:	68a3      	ldr	r3, [r4, #8]
  406d58:	6822      	ldr	r2, [r4, #0]
  406d5a:	eba3 0308 	sub.w	r3, r3, r8
  406d5e:	4442      	add	r2, r8
  406d60:	60a3      	str	r3, [r4, #8]
  406d62:	6022      	str	r2, [r4, #0]
  406d64:	b10b      	cbz	r3, 406d6a <__sfvwrite_r+0x1ca>
  406d66:	46c2      	mov	sl, r8
  406d68:	e779      	b.n	406c5e <__sfvwrite_r+0xbe>
  406d6a:	4621      	mov	r1, r4
  406d6c:	9800      	ldr	r0, [sp, #0]
  406d6e:	f7ff fcb3 	bl	4066d8 <_fflush_r>
  406d72:	2800      	cmp	r0, #0
  406d74:	d192      	bne.n	406c9c <__sfvwrite_r+0xfc>
  406d76:	46c2      	mov	sl, r8
  406d78:	e771      	b.n	406c5e <__sfvwrite_r+0xbe>
  406d7a:	465a      	mov	r2, fp
  406d7c:	4629      	mov	r1, r5
  406d7e:	f000 f9a7 	bl	4070d0 <memmove>
  406d82:	68a2      	ldr	r2, [r4, #8]
  406d84:	6823      	ldr	r3, [r4, #0]
  406d86:	eba2 020b 	sub.w	r2, r2, fp
  406d8a:	445b      	add	r3, fp
  406d8c:	60a2      	str	r2, [r4, #8]
  406d8e:	6023      	str	r3, [r4, #0]
  406d90:	e7af      	b.n	406cf2 <__sfvwrite_r+0x152>
  406d92:	6820      	ldr	r0, [r4, #0]
  406d94:	46b8      	mov	r8, r7
  406d96:	46ba      	mov	sl, r7
  406d98:	46bb      	mov	fp, r7
  406d9a:	e755      	b.n	406c48 <__sfvwrite_r+0xa8>
  406d9c:	6962      	ldr	r2, [r4, #20]
  406d9e:	6820      	ldr	r0, [r4, #0]
  406da0:	6921      	ldr	r1, [r4, #16]
  406da2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406da6:	eba0 0a01 	sub.w	sl, r0, r1
  406daa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406dae:	f10a 0001 	add.w	r0, sl, #1
  406db2:	ea4f 0868 	mov.w	r8, r8, asr #1
  406db6:	4438      	add	r0, r7
  406db8:	4540      	cmp	r0, r8
  406dba:	4642      	mov	r2, r8
  406dbc:	bf84      	itt	hi
  406dbe:	4680      	movhi	r8, r0
  406dc0:	4642      	movhi	r2, r8
  406dc2:	055b      	lsls	r3, r3, #21
  406dc4:	d544      	bpl.n	406e50 <__sfvwrite_r+0x2b0>
  406dc6:	4611      	mov	r1, r2
  406dc8:	9800      	ldr	r0, [sp, #0]
  406dca:	f7fd ff99 	bl	404d00 <_malloc_r>
  406dce:	4683      	mov	fp, r0
  406dd0:	2800      	cmp	r0, #0
  406dd2:	d055      	beq.n	406e80 <__sfvwrite_r+0x2e0>
  406dd4:	4652      	mov	r2, sl
  406dd6:	6921      	ldr	r1, [r4, #16]
  406dd8:	f7fe fa42 	bl	405260 <memcpy>
  406ddc:	89a3      	ldrh	r3, [r4, #12]
  406dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406de6:	81a3      	strh	r3, [r4, #12]
  406de8:	eb0b 000a 	add.w	r0, fp, sl
  406dec:	eba8 030a 	sub.w	r3, r8, sl
  406df0:	f8c4 b010 	str.w	fp, [r4, #16]
  406df4:	f8c4 8014 	str.w	r8, [r4, #20]
  406df8:	6020      	str	r0, [r4, #0]
  406dfa:	60a3      	str	r3, [r4, #8]
  406dfc:	46b8      	mov	r8, r7
  406dfe:	46ba      	mov	sl, r7
  406e00:	46bb      	mov	fp, r7
  406e02:	e721      	b.n	406c48 <__sfvwrite_r+0xa8>
  406e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406e08:	42b9      	cmp	r1, r7
  406e0a:	bf28      	it	cs
  406e0c:	4639      	movcs	r1, r7
  406e0e:	464a      	mov	r2, r9
  406e10:	fb91 f1f3 	sdiv	r1, r1, r3
  406e14:	9800      	ldr	r0, [sp, #0]
  406e16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406e18:	fb03 f301 	mul.w	r3, r3, r1
  406e1c:	69e1      	ldr	r1, [r4, #28]
  406e1e:	47b0      	blx	r6
  406e20:	f1b0 0a00 	subs.w	sl, r0, #0
  406e24:	f73f af1b 	bgt.w	406c5e <__sfvwrite_r+0xbe>
  406e28:	e738      	b.n	406c9c <__sfvwrite_r+0xfc>
  406e2a:	461a      	mov	r2, r3
  406e2c:	4629      	mov	r1, r5
  406e2e:	9301      	str	r3, [sp, #4]
  406e30:	f000 f94e 	bl	4070d0 <memmove>
  406e34:	6822      	ldr	r2, [r4, #0]
  406e36:	9b01      	ldr	r3, [sp, #4]
  406e38:	9800      	ldr	r0, [sp, #0]
  406e3a:	441a      	add	r2, r3
  406e3c:	6022      	str	r2, [r4, #0]
  406e3e:	4621      	mov	r1, r4
  406e40:	f7ff fc4a 	bl	4066d8 <_fflush_r>
  406e44:	9b01      	ldr	r3, [sp, #4]
  406e46:	2800      	cmp	r0, #0
  406e48:	f47f af28 	bne.w	406c9c <__sfvwrite_r+0xfc>
  406e4c:	461f      	mov	r7, r3
  406e4e:	e750      	b.n	406cf2 <__sfvwrite_r+0x152>
  406e50:	9800      	ldr	r0, [sp, #0]
  406e52:	f000 f9a1 	bl	407198 <_realloc_r>
  406e56:	4683      	mov	fp, r0
  406e58:	2800      	cmp	r0, #0
  406e5a:	d1c5      	bne.n	406de8 <__sfvwrite_r+0x248>
  406e5c:	9d00      	ldr	r5, [sp, #0]
  406e5e:	6921      	ldr	r1, [r4, #16]
  406e60:	4628      	mov	r0, r5
  406e62:	f7ff fdb7 	bl	4069d4 <_free_r>
  406e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406e6a:	220c      	movs	r2, #12
  406e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406e70:	602a      	str	r2, [r5, #0]
  406e72:	e715      	b.n	406ca0 <__sfvwrite_r+0x100>
  406e74:	f106 0901 	add.w	r9, r6, #1
  406e78:	e722      	b.n	406cc0 <__sfvwrite_r+0x120>
  406e7a:	f04f 30ff 	mov.w	r0, #4294967295
  406e7e:	e6bf      	b.n	406c00 <__sfvwrite_r+0x60>
  406e80:	9a00      	ldr	r2, [sp, #0]
  406e82:	230c      	movs	r3, #12
  406e84:	6013      	str	r3, [r2, #0]
  406e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406e8a:	e709      	b.n	406ca0 <__sfvwrite_r+0x100>
  406e8c:	7ffffc00 	.word	0x7ffffc00

00406e90 <_fwalk_reent>:
  406e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406e94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406e98:	d01f      	beq.n	406eda <_fwalk_reent+0x4a>
  406e9a:	4688      	mov	r8, r1
  406e9c:	4606      	mov	r6, r0
  406e9e:	f04f 0900 	mov.w	r9, #0
  406ea2:	687d      	ldr	r5, [r7, #4]
  406ea4:	68bc      	ldr	r4, [r7, #8]
  406ea6:	3d01      	subs	r5, #1
  406ea8:	d411      	bmi.n	406ece <_fwalk_reent+0x3e>
  406eaa:	89a3      	ldrh	r3, [r4, #12]
  406eac:	2b01      	cmp	r3, #1
  406eae:	f105 35ff 	add.w	r5, r5, #4294967295
  406eb2:	d908      	bls.n	406ec6 <_fwalk_reent+0x36>
  406eb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406eb8:	3301      	adds	r3, #1
  406eba:	4621      	mov	r1, r4
  406ebc:	4630      	mov	r0, r6
  406ebe:	d002      	beq.n	406ec6 <_fwalk_reent+0x36>
  406ec0:	47c0      	blx	r8
  406ec2:	ea49 0900 	orr.w	r9, r9, r0
  406ec6:	1c6b      	adds	r3, r5, #1
  406ec8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406ecc:	d1ed      	bne.n	406eaa <_fwalk_reent+0x1a>
  406ece:	683f      	ldr	r7, [r7, #0]
  406ed0:	2f00      	cmp	r7, #0
  406ed2:	d1e6      	bne.n	406ea2 <_fwalk_reent+0x12>
  406ed4:	4648      	mov	r0, r9
  406ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406eda:	46b9      	mov	r9, r7
  406edc:	4648      	mov	r0, r9
  406ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406ee2:	bf00      	nop

00406ee4 <__locale_mb_cur_max>:
  406ee4:	4b04      	ldr	r3, [pc, #16]	; (406ef8 <__locale_mb_cur_max+0x14>)
  406ee6:	4a05      	ldr	r2, [pc, #20]	; (406efc <__locale_mb_cur_max+0x18>)
  406ee8:	681b      	ldr	r3, [r3, #0]
  406eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406eec:	2b00      	cmp	r3, #0
  406eee:	bf08      	it	eq
  406ef0:	4613      	moveq	r3, r2
  406ef2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406ef6:	4770      	bx	lr
  406ef8:	20400014 	.word	0x20400014
  406efc:	20400854 	.word	0x20400854

00406f00 <__retarget_lock_init_recursive>:
  406f00:	4770      	bx	lr
  406f02:	bf00      	nop

00406f04 <__retarget_lock_close_recursive>:
  406f04:	4770      	bx	lr
  406f06:	bf00      	nop

00406f08 <__retarget_lock_acquire_recursive>:
  406f08:	4770      	bx	lr
  406f0a:	bf00      	nop

00406f0c <__retarget_lock_release_recursive>:
  406f0c:	4770      	bx	lr
  406f0e:	bf00      	nop

00406f10 <__swhatbuf_r>:
  406f10:	b570      	push	{r4, r5, r6, lr}
  406f12:	460c      	mov	r4, r1
  406f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406f18:	2900      	cmp	r1, #0
  406f1a:	b090      	sub	sp, #64	; 0x40
  406f1c:	4615      	mov	r5, r2
  406f1e:	461e      	mov	r6, r3
  406f20:	db14      	blt.n	406f4c <__swhatbuf_r+0x3c>
  406f22:	aa01      	add	r2, sp, #4
  406f24:	f000 fc9e 	bl	407864 <_fstat_r>
  406f28:	2800      	cmp	r0, #0
  406f2a:	db0f      	blt.n	406f4c <__swhatbuf_r+0x3c>
  406f2c:	9a02      	ldr	r2, [sp, #8]
  406f2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406f32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406f36:	fab2 f282 	clz	r2, r2
  406f3a:	0952      	lsrs	r2, r2, #5
  406f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406f40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406f44:	6032      	str	r2, [r6, #0]
  406f46:	602b      	str	r3, [r5, #0]
  406f48:	b010      	add	sp, #64	; 0x40
  406f4a:	bd70      	pop	{r4, r5, r6, pc}
  406f4c:	89a2      	ldrh	r2, [r4, #12]
  406f4e:	2300      	movs	r3, #0
  406f50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406f54:	6033      	str	r3, [r6, #0]
  406f56:	d004      	beq.n	406f62 <__swhatbuf_r+0x52>
  406f58:	2240      	movs	r2, #64	; 0x40
  406f5a:	4618      	mov	r0, r3
  406f5c:	602a      	str	r2, [r5, #0]
  406f5e:	b010      	add	sp, #64	; 0x40
  406f60:	bd70      	pop	{r4, r5, r6, pc}
  406f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406f66:	602b      	str	r3, [r5, #0]
  406f68:	b010      	add	sp, #64	; 0x40
  406f6a:	bd70      	pop	{r4, r5, r6, pc}

00406f6c <__smakebuf_r>:
  406f6c:	898a      	ldrh	r2, [r1, #12]
  406f6e:	0792      	lsls	r2, r2, #30
  406f70:	460b      	mov	r3, r1
  406f72:	d506      	bpl.n	406f82 <__smakebuf_r+0x16>
  406f74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406f78:	2101      	movs	r1, #1
  406f7a:	601a      	str	r2, [r3, #0]
  406f7c:	611a      	str	r2, [r3, #16]
  406f7e:	6159      	str	r1, [r3, #20]
  406f80:	4770      	bx	lr
  406f82:	b5f0      	push	{r4, r5, r6, r7, lr}
  406f84:	b083      	sub	sp, #12
  406f86:	ab01      	add	r3, sp, #4
  406f88:	466a      	mov	r2, sp
  406f8a:	460c      	mov	r4, r1
  406f8c:	4606      	mov	r6, r0
  406f8e:	f7ff ffbf 	bl	406f10 <__swhatbuf_r>
  406f92:	9900      	ldr	r1, [sp, #0]
  406f94:	4605      	mov	r5, r0
  406f96:	4630      	mov	r0, r6
  406f98:	f7fd feb2 	bl	404d00 <_malloc_r>
  406f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406fa0:	b1d8      	cbz	r0, 406fda <__smakebuf_r+0x6e>
  406fa2:	9a01      	ldr	r2, [sp, #4]
  406fa4:	4f15      	ldr	r7, [pc, #84]	; (406ffc <__smakebuf_r+0x90>)
  406fa6:	9900      	ldr	r1, [sp, #0]
  406fa8:	63f7      	str	r7, [r6, #60]	; 0x3c
  406faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406fae:	81a3      	strh	r3, [r4, #12]
  406fb0:	6020      	str	r0, [r4, #0]
  406fb2:	6120      	str	r0, [r4, #16]
  406fb4:	6161      	str	r1, [r4, #20]
  406fb6:	b91a      	cbnz	r2, 406fc0 <__smakebuf_r+0x54>
  406fb8:	432b      	orrs	r3, r5
  406fba:	81a3      	strh	r3, [r4, #12]
  406fbc:	b003      	add	sp, #12
  406fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406fc0:	4630      	mov	r0, r6
  406fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406fc6:	f000 fc61 	bl	40788c <_isatty_r>
  406fca:	b1a0      	cbz	r0, 406ff6 <__smakebuf_r+0x8a>
  406fcc:	89a3      	ldrh	r3, [r4, #12]
  406fce:	f023 0303 	bic.w	r3, r3, #3
  406fd2:	f043 0301 	orr.w	r3, r3, #1
  406fd6:	b21b      	sxth	r3, r3
  406fd8:	e7ee      	b.n	406fb8 <__smakebuf_r+0x4c>
  406fda:	059a      	lsls	r2, r3, #22
  406fdc:	d4ee      	bmi.n	406fbc <__smakebuf_r+0x50>
  406fde:	f023 0303 	bic.w	r3, r3, #3
  406fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406fe6:	f043 0302 	orr.w	r3, r3, #2
  406fea:	2101      	movs	r1, #1
  406fec:	81a3      	strh	r3, [r4, #12]
  406fee:	6022      	str	r2, [r4, #0]
  406ff0:	6122      	str	r2, [r4, #16]
  406ff2:	6161      	str	r1, [r4, #20]
  406ff4:	e7e2      	b.n	406fbc <__smakebuf_r+0x50>
  406ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ffa:	e7dd      	b.n	406fb8 <__smakebuf_r+0x4c>
  406ffc:	0040672d 	.word	0x0040672d

00407000 <__ascii_mbtowc>:
  407000:	b082      	sub	sp, #8
  407002:	b149      	cbz	r1, 407018 <__ascii_mbtowc+0x18>
  407004:	b15a      	cbz	r2, 40701e <__ascii_mbtowc+0x1e>
  407006:	b16b      	cbz	r3, 407024 <__ascii_mbtowc+0x24>
  407008:	7813      	ldrb	r3, [r2, #0]
  40700a:	600b      	str	r3, [r1, #0]
  40700c:	7812      	ldrb	r2, [r2, #0]
  40700e:	1c10      	adds	r0, r2, #0
  407010:	bf18      	it	ne
  407012:	2001      	movne	r0, #1
  407014:	b002      	add	sp, #8
  407016:	4770      	bx	lr
  407018:	a901      	add	r1, sp, #4
  40701a:	2a00      	cmp	r2, #0
  40701c:	d1f3      	bne.n	407006 <__ascii_mbtowc+0x6>
  40701e:	4610      	mov	r0, r2
  407020:	b002      	add	sp, #8
  407022:	4770      	bx	lr
  407024:	f06f 0001 	mvn.w	r0, #1
  407028:	e7f4      	b.n	407014 <__ascii_mbtowc+0x14>
  40702a:	bf00      	nop
  40702c:	0000      	movs	r0, r0
	...

00407030 <memchr>:
  407030:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407034:	2a10      	cmp	r2, #16
  407036:	db2b      	blt.n	407090 <memchr+0x60>
  407038:	f010 0f07 	tst.w	r0, #7
  40703c:	d008      	beq.n	407050 <memchr+0x20>
  40703e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407042:	3a01      	subs	r2, #1
  407044:	428b      	cmp	r3, r1
  407046:	d02d      	beq.n	4070a4 <memchr+0x74>
  407048:	f010 0f07 	tst.w	r0, #7
  40704c:	b342      	cbz	r2, 4070a0 <memchr+0x70>
  40704e:	d1f6      	bne.n	40703e <memchr+0xe>
  407050:	b4f0      	push	{r4, r5, r6, r7}
  407052:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407056:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40705a:	f022 0407 	bic.w	r4, r2, #7
  40705e:	f07f 0700 	mvns.w	r7, #0
  407062:	2300      	movs	r3, #0
  407064:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407068:	3c08      	subs	r4, #8
  40706a:	ea85 0501 	eor.w	r5, r5, r1
  40706e:	ea86 0601 	eor.w	r6, r6, r1
  407072:	fa85 f547 	uadd8	r5, r5, r7
  407076:	faa3 f587 	sel	r5, r3, r7
  40707a:	fa86 f647 	uadd8	r6, r6, r7
  40707e:	faa5 f687 	sel	r6, r5, r7
  407082:	b98e      	cbnz	r6, 4070a8 <memchr+0x78>
  407084:	d1ee      	bne.n	407064 <memchr+0x34>
  407086:	bcf0      	pop	{r4, r5, r6, r7}
  407088:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40708c:	f002 0207 	and.w	r2, r2, #7
  407090:	b132      	cbz	r2, 4070a0 <memchr+0x70>
  407092:	f810 3b01 	ldrb.w	r3, [r0], #1
  407096:	3a01      	subs	r2, #1
  407098:	ea83 0301 	eor.w	r3, r3, r1
  40709c:	b113      	cbz	r3, 4070a4 <memchr+0x74>
  40709e:	d1f8      	bne.n	407092 <memchr+0x62>
  4070a0:	2000      	movs	r0, #0
  4070a2:	4770      	bx	lr
  4070a4:	3801      	subs	r0, #1
  4070a6:	4770      	bx	lr
  4070a8:	2d00      	cmp	r5, #0
  4070aa:	bf06      	itte	eq
  4070ac:	4635      	moveq	r5, r6
  4070ae:	3803      	subeq	r0, #3
  4070b0:	3807      	subne	r0, #7
  4070b2:	f015 0f01 	tst.w	r5, #1
  4070b6:	d107      	bne.n	4070c8 <memchr+0x98>
  4070b8:	3001      	adds	r0, #1
  4070ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4070be:	bf02      	ittt	eq
  4070c0:	3001      	addeq	r0, #1
  4070c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4070c6:	3001      	addeq	r0, #1
  4070c8:	bcf0      	pop	{r4, r5, r6, r7}
  4070ca:	3801      	subs	r0, #1
  4070cc:	4770      	bx	lr
  4070ce:	bf00      	nop

004070d0 <memmove>:
  4070d0:	4288      	cmp	r0, r1
  4070d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070d4:	d90d      	bls.n	4070f2 <memmove+0x22>
  4070d6:	188b      	adds	r3, r1, r2
  4070d8:	4298      	cmp	r0, r3
  4070da:	d20a      	bcs.n	4070f2 <memmove+0x22>
  4070dc:	1884      	adds	r4, r0, r2
  4070de:	2a00      	cmp	r2, #0
  4070e0:	d051      	beq.n	407186 <memmove+0xb6>
  4070e2:	4622      	mov	r2, r4
  4070e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4070e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4070ec:	4299      	cmp	r1, r3
  4070ee:	d1f9      	bne.n	4070e4 <memmove+0x14>
  4070f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4070f2:	2a0f      	cmp	r2, #15
  4070f4:	d948      	bls.n	407188 <memmove+0xb8>
  4070f6:	ea41 0300 	orr.w	r3, r1, r0
  4070fa:	079b      	lsls	r3, r3, #30
  4070fc:	d146      	bne.n	40718c <memmove+0xbc>
  4070fe:	f100 0410 	add.w	r4, r0, #16
  407102:	f101 0310 	add.w	r3, r1, #16
  407106:	4615      	mov	r5, r2
  407108:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40710c:	f844 6c10 	str.w	r6, [r4, #-16]
  407110:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407114:	f844 6c0c 	str.w	r6, [r4, #-12]
  407118:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40711c:	f844 6c08 	str.w	r6, [r4, #-8]
  407120:	3d10      	subs	r5, #16
  407122:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407126:	f844 6c04 	str.w	r6, [r4, #-4]
  40712a:	2d0f      	cmp	r5, #15
  40712c:	f103 0310 	add.w	r3, r3, #16
  407130:	f104 0410 	add.w	r4, r4, #16
  407134:	d8e8      	bhi.n	407108 <memmove+0x38>
  407136:	f1a2 0310 	sub.w	r3, r2, #16
  40713a:	f023 030f 	bic.w	r3, r3, #15
  40713e:	f002 0e0f 	and.w	lr, r2, #15
  407142:	3310      	adds	r3, #16
  407144:	f1be 0f03 	cmp.w	lr, #3
  407148:	4419      	add	r1, r3
  40714a:	4403      	add	r3, r0
  40714c:	d921      	bls.n	407192 <memmove+0xc2>
  40714e:	1f1e      	subs	r6, r3, #4
  407150:	460d      	mov	r5, r1
  407152:	4674      	mov	r4, lr
  407154:	3c04      	subs	r4, #4
  407156:	f855 7b04 	ldr.w	r7, [r5], #4
  40715a:	f846 7f04 	str.w	r7, [r6, #4]!
  40715e:	2c03      	cmp	r4, #3
  407160:	d8f8      	bhi.n	407154 <memmove+0x84>
  407162:	f1ae 0404 	sub.w	r4, lr, #4
  407166:	f024 0403 	bic.w	r4, r4, #3
  40716a:	3404      	adds	r4, #4
  40716c:	4421      	add	r1, r4
  40716e:	4423      	add	r3, r4
  407170:	f002 0203 	and.w	r2, r2, #3
  407174:	b162      	cbz	r2, 407190 <memmove+0xc0>
  407176:	3b01      	subs	r3, #1
  407178:	440a      	add	r2, r1
  40717a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40717e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407182:	428a      	cmp	r2, r1
  407184:	d1f9      	bne.n	40717a <memmove+0xaa>
  407186:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407188:	4603      	mov	r3, r0
  40718a:	e7f3      	b.n	407174 <memmove+0xa4>
  40718c:	4603      	mov	r3, r0
  40718e:	e7f2      	b.n	407176 <memmove+0xa6>
  407190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407192:	4672      	mov	r2, lr
  407194:	e7ee      	b.n	407174 <memmove+0xa4>
  407196:	bf00      	nop

00407198 <_realloc_r>:
  407198:	2900      	cmp	r1, #0
  40719a:	f000 8095 	beq.w	4072c8 <_realloc_r+0x130>
  40719e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4071a2:	460d      	mov	r5, r1
  4071a4:	4616      	mov	r6, r2
  4071a6:	b083      	sub	sp, #12
  4071a8:	4680      	mov	r8, r0
  4071aa:	f106 070b 	add.w	r7, r6, #11
  4071ae:	f7fe f93f 	bl	405430 <__malloc_lock>
  4071b2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4071b6:	2f16      	cmp	r7, #22
  4071b8:	f02e 0403 	bic.w	r4, lr, #3
  4071bc:	f1a5 0908 	sub.w	r9, r5, #8
  4071c0:	d83c      	bhi.n	40723c <_realloc_r+0xa4>
  4071c2:	2210      	movs	r2, #16
  4071c4:	4617      	mov	r7, r2
  4071c6:	42be      	cmp	r6, r7
  4071c8:	d83d      	bhi.n	407246 <_realloc_r+0xae>
  4071ca:	4294      	cmp	r4, r2
  4071cc:	da43      	bge.n	407256 <_realloc_r+0xbe>
  4071ce:	4bc4      	ldr	r3, [pc, #784]	; (4074e0 <_realloc_r+0x348>)
  4071d0:	6899      	ldr	r1, [r3, #8]
  4071d2:	eb09 0004 	add.w	r0, r9, r4
  4071d6:	4288      	cmp	r0, r1
  4071d8:	f000 80b4 	beq.w	407344 <_realloc_r+0x1ac>
  4071dc:	6843      	ldr	r3, [r0, #4]
  4071de:	f023 0101 	bic.w	r1, r3, #1
  4071e2:	4401      	add	r1, r0
  4071e4:	6849      	ldr	r1, [r1, #4]
  4071e6:	07c9      	lsls	r1, r1, #31
  4071e8:	d54c      	bpl.n	407284 <_realloc_r+0xec>
  4071ea:	f01e 0f01 	tst.w	lr, #1
  4071ee:	f000 809b 	beq.w	407328 <_realloc_r+0x190>
  4071f2:	4631      	mov	r1, r6
  4071f4:	4640      	mov	r0, r8
  4071f6:	f7fd fd83 	bl	404d00 <_malloc_r>
  4071fa:	4606      	mov	r6, r0
  4071fc:	2800      	cmp	r0, #0
  4071fe:	d03a      	beq.n	407276 <_realloc_r+0xde>
  407200:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407204:	f023 0301 	bic.w	r3, r3, #1
  407208:	444b      	add	r3, r9
  40720a:	f1a0 0208 	sub.w	r2, r0, #8
  40720e:	429a      	cmp	r2, r3
  407210:	f000 8121 	beq.w	407456 <_realloc_r+0x2be>
  407214:	1f22      	subs	r2, r4, #4
  407216:	2a24      	cmp	r2, #36	; 0x24
  407218:	f200 8107 	bhi.w	40742a <_realloc_r+0x292>
  40721c:	2a13      	cmp	r2, #19
  40721e:	f200 80db 	bhi.w	4073d8 <_realloc_r+0x240>
  407222:	4603      	mov	r3, r0
  407224:	462a      	mov	r2, r5
  407226:	6811      	ldr	r1, [r2, #0]
  407228:	6019      	str	r1, [r3, #0]
  40722a:	6851      	ldr	r1, [r2, #4]
  40722c:	6059      	str	r1, [r3, #4]
  40722e:	6892      	ldr	r2, [r2, #8]
  407230:	609a      	str	r2, [r3, #8]
  407232:	4629      	mov	r1, r5
  407234:	4640      	mov	r0, r8
  407236:	f7ff fbcd 	bl	4069d4 <_free_r>
  40723a:	e01c      	b.n	407276 <_realloc_r+0xde>
  40723c:	f027 0707 	bic.w	r7, r7, #7
  407240:	2f00      	cmp	r7, #0
  407242:	463a      	mov	r2, r7
  407244:	dabf      	bge.n	4071c6 <_realloc_r+0x2e>
  407246:	2600      	movs	r6, #0
  407248:	230c      	movs	r3, #12
  40724a:	4630      	mov	r0, r6
  40724c:	f8c8 3000 	str.w	r3, [r8]
  407250:	b003      	add	sp, #12
  407252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407256:	462e      	mov	r6, r5
  407258:	1be3      	subs	r3, r4, r7
  40725a:	2b0f      	cmp	r3, #15
  40725c:	d81e      	bhi.n	40729c <_realloc_r+0x104>
  40725e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407262:	f003 0301 	and.w	r3, r3, #1
  407266:	4323      	orrs	r3, r4
  407268:	444c      	add	r4, r9
  40726a:	f8c9 3004 	str.w	r3, [r9, #4]
  40726e:	6863      	ldr	r3, [r4, #4]
  407270:	f043 0301 	orr.w	r3, r3, #1
  407274:	6063      	str	r3, [r4, #4]
  407276:	4640      	mov	r0, r8
  407278:	f7fe f8e0 	bl	40543c <__malloc_unlock>
  40727c:	4630      	mov	r0, r6
  40727e:	b003      	add	sp, #12
  407280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407284:	f023 0303 	bic.w	r3, r3, #3
  407288:	18e1      	adds	r1, r4, r3
  40728a:	4291      	cmp	r1, r2
  40728c:	db1f      	blt.n	4072ce <_realloc_r+0x136>
  40728e:	68c3      	ldr	r3, [r0, #12]
  407290:	6882      	ldr	r2, [r0, #8]
  407292:	462e      	mov	r6, r5
  407294:	60d3      	str	r3, [r2, #12]
  407296:	460c      	mov	r4, r1
  407298:	609a      	str	r2, [r3, #8]
  40729a:	e7dd      	b.n	407258 <_realloc_r+0xc0>
  40729c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4072a0:	eb09 0107 	add.w	r1, r9, r7
  4072a4:	f002 0201 	and.w	r2, r2, #1
  4072a8:	444c      	add	r4, r9
  4072aa:	f043 0301 	orr.w	r3, r3, #1
  4072ae:	4317      	orrs	r7, r2
  4072b0:	f8c9 7004 	str.w	r7, [r9, #4]
  4072b4:	604b      	str	r3, [r1, #4]
  4072b6:	6863      	ldr	r3, [r4, #4]
  4072b8:	f043 0301 	orr.w	r3, r3, #1
  4072bc:	3108      	adds	r1, #8
  4072be:	6063      	str	r3, [r4, #4]
  4072c0:	4640      	mov	r0, r8
  4072c2:	f7ff fb87 	bl	4069d4 <_free_r>
  4072c6:	e7d6      	b.n	407276 <_realloc_r+0xde>
  4072c8:	4611      	mov	r1, r2
  4072ca:	f7fd bd19 	b.w	404d00 <_malloc_r>
  4072ce:	f01e 0f01 	tst.w	lr, #1
  4072d2:	d18e      	bne.n	4071f2 <_realloc_r+0x5a>
  4072d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4072d8:	eba9 0a01 	sub.w	sl, r9, r1
  4072dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4072e0:	f021 0103 	bic.w	r1, r1, #3
  4072e4:	440b      	add	r3, r1
  4072e6:	4423      	add	r3, r4
  4072e8:	4293      	cmp	r3, r2
  4072ea:	db25      	blt.n	407338 <_realloc_r+0x1a0>
  4072ec:	68c2      	ldr	r2, [r0, #12]
  4072ee:	6881      	ldr	r1, [r0, #8]
  4072f0:	4656      	mov	r6, sl
  4072f2:	60ca      	str	r2, [r1, #12]
  4072f4:	6091      	str	r1, [r2, #8]
  4072f6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4072fa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4072fe:	1f22      	subs	r2, r4, #4
  407300:	2a24      	cmp	r2, #36	; 0x24
  407302:	60c1      	str	r1, [r0, #12]
  407304:	6088      	str	r0, [r1, #8]
  407306:	f200 8094 	bhi.w	407432 <_realloc_r+0x29a>
  40730a:	2a13      	cmp	r2, #19
  40730c:	d96f      	bls.n	4073ee <_realloc_r+0x256>
  40730e:	6829      	ldr	r1, [r5, #0]
  407310:	f8ca 1008 	str.w	r1, [sl, #8]
  407314:	6869      	ldr	r1, [r5, #4]
  407316:	f8ca 100c 	str.w	r1, [sl, #12]
  40731a:	2a1b      	cmp	r2, #27
  40731c:	f200 80a2 	bhi.w	407464 <_realloc_r+0x2cc>
  407320:	3508      	adds	r5, #8
  407322:	f10a 0210 	add.w	r2, sl, #16
  407326:	e063      	b.n	4073f0 <_realloc_r+0x258>
  407328:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40732c:	eba9 0a03 	sub.w	sl, r9, r3
  407330:	f8da 1004 	ldr.w	r1, [sl, #4]
  407334:	f021 0103 	bic.w	r1, r1, #3
  407338:	1863      	adds	r3, r4, r1
  40733a:	4293      	cmp	r3, r2
  40733c:	f6ff af59 	blt.w	4071f2 <_realloc_r+0x5a>
  407340:	4656      	mov	r6, sl
  407342:	e7d8      	b.n	4072f6 <_realloc_r+0x15e>
  407344:	6841      	ldr	r1, [r0, #4]
  407346:	f021 0b03 	bic.w	fp, r1, #3
  40734a:	44a3      	add	fp, r4
  40734c:	f107 0010 	add.w	r0, r7, #16
  407350:	4583      	cmp	fp, r0
  407352:	da56      	bge.n	407402 <_realloc_r+0x26a>
  407354:	f01e 0f01 	tst.w	lr, #1
  407358:	f47f af4b 	bne.w	4071f2 <_realloc_r+0x5a>
  40735c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407360:	eba9 0a01 	sub.w	sl, r9, r1
  407364:	f8da 1004 	ldr.w	r1, [sl, #4]
  407368:	f021 0103 	bic.w	r1, r1, #3
  40736c:	448b      	add	fp, r1
  40736e:	4558      	cmp	r0, fp
  407370:	dce2      	bgt.n	407338 <_realloc_r+0x1a0>
  407372:	4656      	mov	r6, sl
  407374:	f8da 100c 	ldr.w	r1, [sl, #12]
  407378:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40737c:	1f22      	subs	r2, r4, #4
  40737e:	2a24      	cmp	r2, #36	; 0x24
  407380:	60c1      	str	r1, [r0, #12]
  407382:	6088      	str	r0, [r1, #8]
  407384:	f200 808f 	bhi.w	4074a6 <_realloc_r+0x30e>
  407388:	2a13      	cmp	r2, #19
  40738a:	f240 808a 	bls.w	4074a2 <_realloc_r+0x30a>
  40738e:	6829      	ldr	r1, [r5, #0]
  407390:	f8ca 1008 	str.w	r1, [sl, #8]
  407394:	6869      	ldr	r1, [r5, #4]
  407396:	f8ca 100c 	str.w	r1, [sl, #12]
  40739a:	2a1b      	cmp	r2, #27
  40739c:	f200 808a 	bhi.w	4074b4 <_realloc_r+0x31c>
  4073a0:	3508      	adds	r5, #8
  4073a2:	f10a 0210 	add.w	r2, sl, #16
  4073a6:	6829      	ldr	r1, [r5, #0]
  4073a8:	6011      	str	r1, [r2, #0]
  4073aa:	6869      	ldr	r1, [r5, #4]
  4073ac:	6051      	str	r1, [r2, #4]
  4073ae:	68a9      	ldr	r1, [r5, #8]
  4073b0:	6091      	str	r1, [r2, #8]
  4073b2:	eb0a 0107 	add.w	r1, sl, r7
  4073b6:	ebab 0207 	sub.w	r2, fp, r7
  4073ba:	f042 0201 	orr.w	r2, r2, #1
  4073be:	6099      	str	r1, [r3, #8]
  4073c0:	604a      	str	r2, [r1, #4]
  4073c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4073c6:	f003 0301 	and.w	r3, r3, #1
  4073ca:	431f      	orrs	r7, r3
  4073cc:	4640      	mov	r0, r8
  4073ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4073d2:	f7fe f833 	bl	40543c <__malloc_unlock>
  4073d6:	e751      	b.n	40727c <_realloc_r+0xe4>
  4073d8:	682b      	ldr	r3, [r5, #0]
  4073da:	6003      	str	r3, [r0, #0]
  4073dc:	686b      	ldr	r3, [r5, #4]
  4073de:	6043      	str	r3, [r0, #4]
  4073e0:	2a1b      	cmp	r2, #27
  4073e2:	d82d      	bhi.n	407440 <_realloc_r+0x2a8>
  4073e4:	f100 0308 	add.w	r3, r0, #8
  4073e8:	f105 0208 	add.w	r2, r5, #8
  4073ec:	e71b      	b.n	407226 <_realloc_r+0x8e>
  4073ee:	4632      	mov	r2, r6
  4073f0:	6829      	ldr	r1, [r5, #0]
  4073f2:	6011      	str	r1, [r2, #0]
  4073f4:	6869      	ldr	r1, [r5, #4]
  4073f6:	6051      	str	r1, [r2, #4]
  4073f8:	68a9      	ldr	r1, [r5, #8]
  4073fa:	6091      	str	r1, [r2, #8]
  4073fc:	461c      	mov	r4, r3
  4073fe:	46d1      	mov	r9, sl
  407400:	e72a      	b.n	407258 <_realloc_r+0xc0>
  407402:	eb09 0107 	add.w	r1, r9, r7
  407406:	ebab 0b07 	sub.w	fp, fp, r7
  40740a:	f04b 0201 	orr.w	r2, fp, #1
  40740e:	6099      	str	r1, [r3, #8]
  407410:	604a      	str	r2, [r1, #4]
  407412:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407416:	f003 0301 	and.w	r3, r3, #1
  40741a:	431f      	orrs	r7, r3
  40741c:	4640      	mov	r0, r8
  40741e:	f845 7c04 	str.w	r7, [r5, #-4]
  407422:	f7fe f80b 	bl	40543c <__malloc_unlock>
  407426:	462e      	mov	r6, r5
  407428:	e728      	b.n	40727c <_realloc_r+0xe4>
  40742a:	4629      	mov	r1, r5
  40742c:	f7ff fe50 	bl	4070d0 <memmove>
  407430:	e6ff      	b.n	407232 <_realloc_r+0x9a>
  407432:	4629      	mov	r1, r5
  407434:	4630      	mov	r0, r6
  407436:	461c      	mov	r4, r3
  407438:	46d1      	mov	r9, sl
  40743a:	f7ff fe49 	bl	4070d0 <memmove>
  40743e:	e70b      	b.n	407258 <_realloc_r+0xc0>
  407440:	68ab      	ldr	r3, [r5, #8]
  407442:	6083      	str	r3, [r0, #8]
  407444:	68eb      	ldr	r3, [r5, #12]
  407446:	60c3      	str	r3, [r0, #12]
  407448:	2a24      	cmp	r2, #36	; 0x24
  40744a:	d017      	beq.n	40747c <_realloc_r+0x2e4>
  40744c:	f100 0310 	add.w	r3, r0, #16
  407450:	f105 0210 	add.w	r2, r5, #16
  407454:	e6e7      	b.n	407226 <_realloc_r+0x8e>
  407456:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40745a:	f023 0303 	bic.w	r3, r3, #3
  40745e:	441c      	add	r4, r3
  407460:	462e      	mov	r6, r5
  407462:	e6f9      	b.n	407258 <_realloc_r+0xc0>
  407464:	68a9      	ldr	r1, [r5, #8]
  407466:	f8ca 1010 	str.w	r1, [sl, #16]
  40746a:	68e9      	ldr	r1, [r5, #12]
  40746c:	f8ca 1014 	str.w	r1, [sl, #20]
  407470:	2a24      	cmp	r2, #36	; 0x24
  407472:	d00c      	beq.n	40748e <_realloc_r+0x2f6>
  407474:	3510      	adds	r5, #16
  407476:	f10a 0218 	add.w	r2, sl, #24
  40747a:	e7b9      	b.n	4073f0 <_realloc_r+0x258>
  40747c:	692b      	ldr	r3, [r5, #16]
  40747e:	6103      	str	r3, [r0, #16]
  407480:	696b      	ldr	r3, [r5, #20]
  407482:	6143      	str	r3, [r0, #20]
  407484:	f105 0218 	add.w	r2, r5, #24
  407488:	f100 0318 	add.w	r3, r0, #24
  40748c:	e6cb      	b.n	407226 <_realloc_r+0x8e>
  40748e:	692a      	ldr	r2, [r5, #16]
  407490:	f8ca 2018 	str.w	r2, [sl, #24]
  407494:	696a      	ldr	r2, [r5, #20]
  407496:	f8ca 201c 	str.w	r2, [sl, #28]
  40749a:	3518      	adds	r5, #24
  40749c:	f10a 0220 	add.w	r2, sl, #32
  4074a0:	e7a6      	b.n	4073f0 <_realloc_r+0x258>
  4074a2:	4632      	mov	r2, r6
  4074a4:	e77f      	b.n	4073a6 <_realloc_r+0x20e>
  4074a6:	4629      	mov	r1, r5
  4074a8:	4630      	mov	r0, r6
  4074aa:	9301      	str	r3, [sp, #4]
  4074ac:	f7ff fe10 	bl	4070d0 <memmove>
  4074b0:	9b01      	ldr	r3, [sp, #4]
  4074b2:	e77e      	b.n	4073b2 <_realloc_r+0x21a>
  4074b4:	68a9      	ldr	r1, [r5, #8]
  4074b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4074ba:	68e9      	ldr	r1, [r5, #12]
  4074bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4074c0:	2a24      	cmp	r2, #36	; 0x24
  4074c2:	d003      	beq.n	4074cc <_realloc_r+0x334>
  4074c4:	3510      	adds	r5, #16
  4074c6:	f10a 0218 	add.w	r2, sl, #24
  4074ca:	e76c      	b.n	4073a6 <_realloc_r+0x20e>
  4074cc:	692a      	ldr	r2, [r5, #16]
  4074ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4074d2:	696a      	ldr	r2, [r5, #20]
  4074d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4074d8:	3518      	adds	r5, #24
  4074da:	f10a 0220 	add.w	r2, sl, #32
  4074de:	e762      	b.n	4073a6 <_realloc_r+0x20e>
  4074e0:	20400440 	.word	0x20400440

004074e4 <__sread>:
  4074e4:	b510      	push	{r4, lr}
  4074e6:	460c      	mov	r4, r1
  4074e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4074ec:	f000 f9f6 	bl	4078dc <_read_r>
  4074f0:	2800      	cmp	r0, #0
  4074f2:	db03      	blt.n	4074fc <__sread+0x18>
  4074f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4074f6:	4403      	add	r3, r0
  4074f8:	6523      	str	r3, [r4, #80]	; 0x50
  4074fa:	bd10      	pop	{r4, pc}
  4074fc:	89a3      	ldrh	r3, [r4, #12]
  4074fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407502:	81a3      	strh	r3, [r4, #12]
  407504:	bd10      	pop	{r4, pc}
  407506:	bf00      	nop

00407508 <__swrite>:
  407508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40750c:	4616      	mov	r6, r2
  40750e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407512:	461f      	mov	r7, r3
  407514:	05d3      	lsls	r3, r2, #23
  407516:	460c      	mov	r4, r1
  407518:	4605      	mov	r5, r0
  40751a:	d507      	bpl.n	40752c <__swrite+0x24>
  40751c:	2200      	movs	r2, #0
  40751e:	2302      	movs	r3, #2
  407520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407524:	f000 f9c4 	bl	4078b0 <_lseek_r>
  407528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40752c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407530:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407534:	81a2      	strh	r2, [r4, #12]
  407536:	463b      	mov	r3, r7
  407538:	4632      	mov	r2, r6
  40753a:	4628      	mov	r0, r5
  40753c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407540:	f000 b8a4 	b.w	40768c <_write_r>

00407544 <__sseek>:
  407544:	b510      	push	{r4, lr}
  407546:	460c      	mov	r4, r1
  407548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40754c:	f000 f9b0 	bl	4078b0 <_lseek_r>
  407550:	89a3      	ldrh	r3, [r4, #12]
  407552:	1c42      	adds	r2, r0, #1
  407554:	bf0e      	itee	eq
  407556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40755a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40755e:	6520      	strne	r0, [r4, #80]	; 0x50
  407560:	81a3      	strh	r3, [r4, #12]
  407562:	bd10      	pop	{r4, pc}

00407564 <__sclose>:
  407564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407568:	f000 b908 	b.w	40777c <_close_r>

0040756c <__swbuf_r>:
  40756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40756e:	460d      	mov	r5, r1
  407570:	4614      	mov	r4, r2
  407572:	4606      	mov	r6, r0
  407574:	b110      	cbz	r0, 40757c <__swbuf_r+0x10>
  407576:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407578:	2b00      	cmp	r3, #0
  40757a:	d04b      	beq.n	407614 <__swbuf_r+0xa8>
  40757c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407580:	69a3      	ldr	r3, [r4, #24]
  407582:	60a3      	str	r3, [r4, #8]
  407584:	b291      	uxth	r1, r2
  407586:	0708      	lsls	r0, r1, #28
  407588:	d539      	bpl.n	4075fe <__swbuf_r+0x92>
  40758a:	6923      	ldr	r3, [r4, #16]
  40758c:	2b00      	cmp	r3, #0
  40758e:	d036      	beq.n	4075fe <__swbuf_r+0x92>
  407590:	b2ed      	uxtb	r5, r5
  407592:	0489      	lsls	r1, r1, #18
  407594:	462f      	mov	r7, r5
  407596:	d515      	bpl.n	4075c4 <__swbuf_r+0x58>
  407598:	6822      	ldr	r2, [r4, #0]
  40759a:	6961      	ldr	r1, [r4, #20]
  40759c:	1ad3      	subs	r3, r2, r3
  40759e:	428b      	cmp	r3, r1
  4075a0:	da1c      	bge.n	4075dc <__swbuf_r+0x70>
  4075a2:	3301      	adds	r3, #1
  4075a4:	68a1      	ldr	r1, [r4, #8]
  4075a6:	1c50      	adds	r0, r2, #1
  4075a8:	3901      	subs	r1, #1
  4075aa:	60a1      	str	r1, [r4, #8]
  4075ac:	6020      	str	r0, [r4, #0]
  4075ae:	7015      	strb	r5, [r2, #0]
  4075b0:	6962      	ldr	r2, [r4, #20]
  4075b2:	429a      	cmp	r2, r3
  4075b4:	d01a      	beq.n	4075ec <__swbuf_r+0x80>
  4075b6:	89a3      	ldrh	r3, [r4, #12]
  4075b8:	07db      	lsls	r3, r3, #31
  4075ba:	d501      	bpl.n	4075c0 <__swbuf_r+0x54>
  4075bc:	2d0a      	cmp	r5, #10
  4075be:	d015      	beq.n	4075ec <__swbuf_r+0x80>
  4075c0:	4638      	mov	r0, r7
  4075c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4075c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4075c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4075ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4075ce:	81a2      	strh	r2, [r4, #12]
  4075d0:	6822      	ldr	r2, [r4, #0]
  4075d2:	6661      	str	r1, [r4, #100]	; 0x64
  4075d4:	6961      	ldr	r1, [r4, #20]
  4075d6:	1ad3      	subs	r3, r2, r3
  4075d8:	428b      	cmp	r3, r1
  4075da:	dbe2      	blt.n	4075a2 <__swbuf_r+0x36>
  4075dc:	4621      	mov	r1, r4
  4075de:	4630      	mov	r0, r6
  4075e0:	f7ff f87a 	bl	4066d8 <_fflush_r>
  4075e4:	b940      	cbnz	r0, 4075f8 <__swbuf_r+0x8c>
  4075e6:	6822      	ldr	r2, [r4, #0]
  4075e8:	2301      	movs	r3, #1
  4075ea:	e7db      	b.n	4075a4 <__swbuf_r+0x38>
  4075ec:	4621      	mov	r1, r4
  4075ee:	4630      	mov	r0, r6
  4075f0:	f7ff f872 	bl	4066d8 <_fflush_r>
  4075f4:	2800      	cmp	r0, #0
  4075f6:	d0e3      	beq.n	4075c0 <__swbuf_r+0x54>
  4075f8:	f04f 37ff 	mov.w	r7, #4294967295
  4075fc:	e7e0      	b.n	4075c0 <__swbuf_r+0x54>
  4075fe:	4621      	mov	r1, r4
  407600:	4630      	mov	r0, r6
  407602:	f7fe ff55 	bl	4064b0 <__swsetup_r>
  407606:	2800      	cmp	r0, #0
  407608:	d1f6      	bne.n	4075f8 <__swbuf_r+0x8c>
  40760a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40760e:	6923      	ldr	r3, [r4, #16]
  407610:	b291      	uxth	r1, r2
  407612:	e7bd      	b.n	407590 <__swbuf_r+0x24>
  407614:	f7ff f8b8 	bl	406788 <__sinit>
  407618:	e7b0      	b.n	40757c <__swbuf_r+0x10>
  40761a:	bf00      	nop

0040761c <_wcrtomb_r>:
  40761c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40761e:	4606      	mov	r6, r0
  407620:	b085      	sub	sp, #20
  407622:	461f      	mov	r7, r3
  407624:	b189      	cbz	r1, 40764a <_wcrtomb_r+0x2e>
  407626:	4c10      	ldr	r4, [pc, #64]	; (407668 <_wcrtomb_r+0x4c>)
  407628:	4d10      	ldr	r5, [pc, #64]	; (40766c <_wcrtomb_r+0x50>)
  40762a:	6824      	ldr	r4, [r4, #0]
  40762c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40762e:	2c00      	cmp	r4, #0
  407630:	bf08      	it	eq
  407632:	462c      	moveq	r4, r5
  407634:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407638:	47a0      	blx	r4
  40763a:	1c43      	adds	r3, r0, #1
  40763c:	d103      	bne.n	407646 <_wcrtomb_r+0x2a>
  40763e:	2200      	movs	r2, #0
  407640:	238a      	movs	r3, #138	; 0x8a
  407642:	603a      	str	r2, [r7, #0]
  407644:	6033      	str	r3, [r6, #0]
  407646:	b005      	add	sp, #20
  407648:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40764a:	460c      	mov	r4, r1
  40764c:	4906      	ldr	r1, [pc, #24]	; (407668 <_wcrtomb_r+0x4c>)
  40764e:	4a07      	ldr	r2, [pc, #28]	; (40766c <_wcrtomb_r+0x50>)
  407650:	6809      	ldr	r1, [r1, #0]
  407652:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407654:	2900      	cmp	r1, #0
  407656:	bf08      	it	eq
  407658:	4611      	moveq	r1, r2
  40765a:	4622      	mov	r2, r4
  40765c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407660:	a901      	add	r1, sp, #4
  407662:	47a0      	blx	r4
  407664:	e7e9      	b.n	40763a <_wcrtomb_r+0x1e>
  407666:	bf00      	nop
  407668:	20400014 	.word	0x20400014
  40766c:	20400854 	.word	0x20400854

00407670 <__ascii_wctomb>:
  407670:	b121      	cbz	r1, 40767c <__ascii_wctomb+0xc>
  407672:	2aff      	cmp	r2, #255	; 0xff
  407674:	d804      	bhi.n	407680 <__ascii_wctomb+0x10>
  407676:	700a      	strb	r2, [r1, #0]
  407678:	2001      	movs	r0, #1
  40767a:	4770      	bx	lr
  40767c:	4608      	mov	r0, r1
  40767e:	4770      	bx	lr
  407680:	238a      	movs	r3, #138	; 0x8a
  407682:	6003      	str	r3, [r0, #0]
  407684:	f04f 30ff 	mov.w	r0, #4294967295
  407688:	4770      	bx	lr
  40768a:	bf00      	nop

0040768c <_write_r>:
  40768c:	b570      	push	{r4, r5, r6, lr}
  40768e:	460d      	mov	r5, r1
  407690:	4c08      	ldr	r4, [pc, #32]	; (4076b4 <_write_r+0x28>)
  407692:	4611      	mov	r1, r2
  407694:	4606      	mov	r6, r0
  407696:	461a      	mov	r2, r3
  407698:	4628      	mov	r0, r5
  40769a:	2300      	movs	r3, #0
  40769c:	6023      	str	r3, [r4, #0]
  40769e:	f7f9 f9fb 	bl	400a98 <_write>
  4076a2:	1c43      	adds	r3, r0, #1
  4076a4:	d000      	beq.n	4076a8 <_write_r+0x1c>
  4076a6:	bd70      	pop	{r4, r5, r6, pc}
  4076a8:	6823      	ldr	r3, [r4, #0]
  4076aa:	2b00      	cmp	r3, #0
  4076ac:	d0fb      	beq.n	4076a6 <_write_r+0x1a>
  4076ae:	6033      	str	r3, [r6, #0]
  4076b0:	bd70      	pop	{r4, r5, r6, pc}
  4076b2:	bf00      	nop
  4076b4:	2040c898 	.word	0x2040c898

004076b8 <__register_exitproc>:
  4076b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4076bc:	4d2c      	ldr	r5, [pc, #176]	; (407770 <__register_exitproc+0xb8>)
  4076be:	4606      	mov	r6, r0
  4076c0:	6828      	ldr	r0, [r5, #0]
  4076c2:	4698      	mov	r8, r3
  4076c4:	460f      	mov	r7, r1
  4076c6:	4691      	mov	r9, r2
  4076c8:	f7ff fc1e 	bl	406f08 <__retarget_lock_acquire_recursive>
  4076cc:	4b29      	ldr	r3, [pc, #164]	; (407774 <__register_exitproc+0xbc>)
  4076ce:	681c      	ldr	r4, [r3, #0]
  4076d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4076d4:	2b00      	cmp	r3, #0
  4076d6:	d03e      	beq.n	407756 <__register_exitproc+0x9e>
  4076d8:	685a      	ldr	r2, [r3, #4]
  4076da:	2a1f      	cmp	r2, #31
  4076dc:	dc1c      	bgt.n	407718 <__register_exitproc+0x60>
  4076de:	f102 0e01 	add.w	lr, r2, #1
  4076e2:	b176      	cbz	r6, 407702 <__register_exitproc+0x4a>
  4076e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4076e8:	2401      	movs	r4, #1
  4076ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4076ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4076f2:	4094      	lsls	r4, r2
  4076f4:	4320      	orrs	r0, r4
  4076f6:	2e02      	cmp	r6, #2
  4076f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4076fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407700:	d023      	beq.n	40774a <__register_exitproc+0x92>
  407702:	3202      	adds	r2, #2
  407704:	f8c3 e004 	str.w	lr, [r3, #4]
  407708:	6828      	ldr	r0, [r5, #0]
  40770a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40770e:	f7ff fbfd 	bl	406f0c <__retarget_lock_release_recursive>
  407712:	2000      	movs	r0, #0
  407714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407718:	4b17      	ldr	r3, [pc, #92]	; (407778 <__register_exitproc+0xc0>)
  40771a:	b30b      	cbz	r3, 407760 <__register_exitproc+0xa8>
  40771c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407720:	f7fd fae6 	bl	404cf0 <malloc>
  407724:	4603      	mov	r3, r0
  407726:	b1d8      	cbz	r0, 407760 <__register_exitproc+0xa8>
  407728:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40772c:	6002      	str	r2, [r0, #0]
  40772e:	2100      	movs	r1, #0
  407730:	6041      	str	r1, [r0, #4]
  407732:	460a      	mov	r2, r1
  407734:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407738:	f04f 0e01 	mov.w	lr, #1
  40773c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407740:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407744:	2e00      	cmp	r6, #0
  407746:	d0dc      	beq.n	407702 <__register_exitproc+0x4a>
  407748:	e7cc      	b.n	4076e4 <__register_exitproc+0x2c>
  40774a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40774e:	430c      	orrs	r4, r1
  407750:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407754:	e7d5      	b.n	407702 <__register_exitproc+0x4a>
  407756:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40775a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40775e:	e7bb      	b.n	4076d8 <__register_exitproc+0x20>
  407760:	6828      	ldr	r0, [r5, #0]
  407762:	f7ff fbd3 	bl	406f0c <__retarget_lock_release_recursive>
  407766:	f04f 30ff 	mov.w	r0, #4294967295
  40776a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40776e:	bf00      	nop
  407770:	20400850 	.word	0x20400850
  407774:	00408bf8 	.word	0x00408bf8
  407778:	00404cf1 	.word	0x00404cf1

0040777c <_close_r>:
  40777c:	b538      	push	{r3, r4, r5, lr}
  40777e:	4c07      	ldr	r4, [pc, #28]	; (40779c <_close_r+0x20>)
  407780:	2300      	movs	r3, #0
  407782:	4605      	mov	r5, r0
  407784:	4608      	mov	r0, r1
  407786:	6023      	str	r3, [r4, #0]
  407788:	f7fa fc12 	bl	401fb0 <_close>
  40778c:	1c43      	adds	r3, r0, #1
  40778e:	d000      	beq.n	407792 <_close_r+0x16>
  407790:	bd38      	pop	{r3, r4, r5, pc}
  407792:	6823      	ldr	r3, [r4, #0]
  407794:	2b00      	cmp	r3, #0
  407796:	d0fb      	beq.n	407790 <_close_r+0x14>
  407798:	602b      	str	r3, [r5, #0]
  40779a:	bd38      	pop	{r3, r4, r5, pc}
  40779c:	2040c898 	.word	0x2040c898

004077a0 <_fclose_r>:
  4077a0:	b570      	push	{r4, r5, r6, lr}
  4077a2:	b159      	cbz	r1, 4077bc <_fclose_r+0x1c>
  4077a4:	4605      	mov	r5, r0
  4077a6:	460c      	mov	r4, r1
  4077a8:	b110      	cbz	r0, 4077b0 <_fclose_r+0x10>
  4077aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4077ac:	2b00      	cmp	r3, #0
  4077ae:	d03c      	beq.n	40782a <_fclose_r+0x8a>
  4077b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4077b2:	07d8      	lsls	r0, r3, #31
  4077b4:	d505      	bpl.n	4077c2 <_fclose_r+0x22>
  4077b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4077ba:	b92b      	cbnz	r3, 4077c8 <_fclose_r+0x28>
  4077bc:	2600      	movs	r6, #0
  4077be:	4630      	mov	r0, r6
  4077c0:	bd70      	pop	{r4, r5, r6, pc}
  4077c2:	89a3      	ldrh	r3, [r4, #12]
  4077c4:	0599      	lsls	r1, r3, #22
  4077c6:	d53c      	bpl.n	407842 <_fclose_r+0xa2>
  4077c8:	4621      	mov	r1, r4
  4077ca:	4628      	mov	r0, r5
  4077cc:	f7fe fee4 	bl	406598 <__sflush_r>
  4077d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4077d2:	4606      	mov	r6, r0
  4077d4:	b133      	cbz	r3, 4077e4 <_fclose_r+0x44>
  4077d6:	69e1      	ldr	r1, [r4, #28]
  4077d8:	4628      	mov	r0, r5
  4077da:	4798      	blx	r3
  4077dc:	2800      	cmp	r0, #0
  4077de:	bfb8      	it	lt
  4077e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4077e4:	89a3      	ldrh	r3, [r4, #12]
  4077e6:	061a      	lsls	r2, r3, #24
  4077e8:	d422      	bmi.n	407830 <_fclose_r+0x90>
  4077ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4077ec:	b141      	cbz	r1, 407800 <_fclose_r+0x60>
  4077ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4077f2:	4299      	cmp	r1, r3
  4077f4:	d002      	beq.n	4077fc <_fclose_r+0x5c>
  4077f6:	4628      	mov	r0, r5
  4077f8:	f7ff f8ec 	bl	4069d4 <_free_r>
  4077fc:	2300      	movs	r3, #0
  4077fe:	6323      	str	r3, [r4, #48]	; 0x30
  407800:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407802:	b121      	cbz	r1, 40780e <_fclose_r+0x6e>
  407804:	4628      	mov	r0, r5
  407806:	f7ff f8e5 	bl	4069d4 <_free_r>
  40780a:	2300      	movs	r3, #0
  40780c:	6463      	str	r3, [r4, #68]	; 0x44
  40780e:	f7fe ffe7 	bl	4067e0 <__sfp_lock_acquire>
  407812:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407814:	2200      	movs	r2, #0
  407816:	07db      	lsls	r3, r3, #31
  407818:	81a2      	strh	r2, [r4, #12]
  40781a:	d50e      	bpl.n	40783a <_fclose_r+0x9a>
  40781c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40781e:	f7ff fb71 	bl	406f04 <__retarget_lock_close_recursive>
  407822:	f7fe ffe3 	bl	4067ec <__sfp_lock_release>
  407826:	4630      	mov	r0, r6
  407828:	bd70      	pop	{r4, r5, r6, pc}
  40782a:	f7fe ffad 	bl	406788 <__sinit>
  40782e:	e7bf      	b.n	4077b0 <_fclose_r+0x10>
  407830:	6921      	ldr	r1, [r4, #16]
  407832:	4628      	mov	r0, r5
  407834:	f7ff f8ce 	bl	4069d4 <_free_r>
  407838:	e7d7      	b.n	4077ea <_fclose_r+0x4a>
  40783a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40783c:	f7ff fb66 	bl	406f0c <__retarget_lock_release_recursive>
  407840:	e7ec      	b.n	40781c <_fclose_r+0x7c>
  407842:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407844:	f7ff fb60 	bl	406f08 <__retarget_lock_acquire_recursive>
  407848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40784c:	2b00      	cmp	r3, #0
  40784e:	d1bb      	bne.n	4077c8 <_fclose_r+0x28>
  407850:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407852:	f016 0601 	ands.w	r6, r6, #1
  407856:	d1b1      	bne.n	4077bc <_fclose_r+0x1c>
  407858:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40785a:	f7ff fb57 	bl	406f0c <__retarget_lock_release_recursive>
  40785e:	4630      	mov	r0, r6
  407860:	bd70      	pop	{r4, r5, r6, pc}
  407862:	bf00      	nop

00407864 <_fstat_r>:
  407864:	b538      	push	{r3, r4, r5, lr}
  407866:	460b      	mov	r3, r1
  407868:	4c07      	ldr	r4, [pc, #28]	; (407888 <_fstat_r+0x24>)
  40786a:	4605      	mov	r5, r0
  40786c:	4611      	mov	r1, r2
  40786e:	4618      	mov	r0, r3
  407870:	2300      	movs	r3, #0
  407872:	6023      	str	r3, [r4, #0]
  407874:	f7fa fb9f 	bl	401fb6 <_fstat>
  407878:	1c43      	adds	r3, r0, #1
  40787a:	d000      	beq.n	40787e <_fstat_r+0x1a>
  40787c:	bd38      	pop	{r3, r4, r5, pc}
  40787e:	6823      	ldr	r3, [r4, #0]
  407880:	2b00      	cmp	r3, #0
  407882:	d0fb      	beq.n	40787c <_fstat_r+0x18>
  407884:	602b      	str	r3, [r5, #0]
  407886:	bd38      	pop	{r3, r4, r5, pc}
  407888:	2040c898 	.word	0x2040c898

0040788c <_isatty_r>:
  40788c:	b538      	push	{r3, r4, r5, lr}
  40788e:	4c07      	ldr	r4, [pc, #28]	; (4078ac <_isatty_r+0x20>)
  407890:	2300      	movs	r3, #0
  407892:	4605      	mov	r5, r0
  407894:	4608      	mov	r0, r1
  407896:	6023      	str	r3, [r4, #0]
  407898:	f7fa fb92 	bl	401fc0 <_isatty>
  40789c:	1c43      	adds	r3, r0, #1
  40789e:	d000      	beq.n	4078a2 <_isatty_r+0x16>
  4078a0:	bd38      	pop	{r3, r4, r5, pc}
  4078a2:	6823      	ldr	r3, [r4, #0]
  4078a4:	2b00      	cmp	r3, #0
  4078a6:	d0fb      	beq.n	4078a0 <_isatty_r+0x14>
  4078a8:	602b      	str	r3, [r5, #0]
  4078aa:	bd38      	pop	{r3, r4, r5, pc}
  4078ac:	2040c898 	.word	0x2040c898

004078b0 <_lseek_r>:
  4078b0:	b570      	push	{r4, r5, r6, lr}
  4078b2:	460d      	mov	r5, r1
  4078b4:	4c08      	ldr	r4, [pc, #32]	; (4078d8 <_lseek_r+0x28>)
  4078b6:	4611      	mov	r1, r2
  4078b8:	4606      	mov	r6, r0
  4078ba:	461a      	mov	r2, r3
  4078bc:	4628      	mov	r0, r5
  4078be:	2300      	movs	r3, #0
  4078c0:	6023      	str	r3, [r4, #0]
  4078c2:	f7fa fb7f 	bl	401fc4 <_lseek>
  4078c6:	1c43      	adds	r3, r0, #1
  4078c8:	d000      	beq.n	4078cc <_lseek_r+0x1c>
  4078ca:	bd70      	pop	{r4, r5, r6, pc}
  4078cc:	6823      	ldr	r3, [r4, #0]
  4078ce:	2b00      	cmp	r3, #0
  4078d0:	d0fb      	beq.n	4078ca <_lseek_r+0x1a>
  4078d2:	6033      	str	r3, [r6, #0]
  4078d4:	bd70      	pop	{r4, r5, r6, pc}
  4078d6:	bf00      	nop
  4078d8:	2040c898 	.word	0x2040c898

004078dc <_read_r>:
  4078dc:	b570      	push	{r4, r5, r6, lr}
  4078de:	460d      	mov	r5, r1
  4078e0:	4c08      	ldr	r4, [pc, #32]	; (407904 <_read_r+0x28>)
  4078e2:	4611      	mov	r1, r2
  4078e4:	4606      	mov	r6, r0
  4078e6:	461a      	mov	r2, r3
  4078e8:	4628      	mov	r0, r5
  4078ea:	2300      	movs	r3, #0
  4078ec:	6023      	str	r3, [r4, #0]
  4078ee:	f7f9 f8b5 	bl	400a5c <_read>
  4078f2:	1c43      	adds	r3, r0, #1
  4078f4:	d000      	beq.n	4078f8 <_read_r+0x1c>
  4078f6:	bd70      	pop	{r4, r5, r6, pc}
  4078f8:	6823      	ldr	r3, [r4, #0]
  4078fa:	2b00      	cmp	r3, #0
  4078fc:	d0fb      	beq.n	4078f6 <_read_r+0x1a>
  4078fe:	6033      	str	r3, [r6, #0]
  407900:	bd70      	pop	{r4, r5, r6, pc}
  407902:	bf00      	nop
  407904:	2040c898 	.word	0x2040c898

00407908 <__aeabi_uldivmod>:
  407908:	b953      	cbnz	r3, 407920 <__aeabi_uldivmod+0x18>
  40790a:	b94a      	cbnz	r2, 407920 <__aeabi_uldivmod+0x18>
  40790c:	2900      	cmp	r1, #0
  40790e:	bf08      	it	eq
  407910:	2800      	cmpeq	r0, #0
  407912:	bf1c      	itt	ne
  407914:	f04f 31ff 	movne.w	r1, #4294967295
  407918:	f04f 30ff 	movne.w	r0, #4294967295
  40791c:	f000 b97a 	b.w	407c14 <__aeabi_idiv0>
  407920:	f1ad 0c08 	sub.w	ip, sp, #8
  407924:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407928:	f000 f806 	bl	407938 <__udivmoddi4>
  40792c:	f8dd e004 	ldr.w	lr, [sp, #4]
  407930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407934:	b004      	add	sp, #16
  407936:	4770      	bx	lr

00407938 <__udivmoddi4>:
  407938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40793c:	468c      	mov	ip, r1
  40793e:	460d      	mov	r5, r1
  407940:	4604      	mov	r4, r0
  407942:	9e08      	ldr	r6, [sp, #32]
  407944:	2b00      	cmp	r3, #0
  407946:	d151      	bne.n	4079ec <__udivmoddi4+0xb4>
  407948:	428a      	cmp	r2, r1
  40794a:	4617      	mov	r7, r2
  40794c:	d96d      	bls.n	407a2a <__udivmoddi4+0xf2>
  40794e:	fab2 fe82 	clz	lr, r2
  407952:	f1be 0f00 	cmp.w	lr, #0
  407956:	d00b      	beq.n	407970 <__udivmoddi4+0x38>
  407958:	f1ce 0c20 	rsb	ip, lr, #32
  40795c:	fa01 f50e 	lsl.w	r5, r1, lr
  407960:	fa20 fc0c 	lsr.w	ip, r0, ip
  407964:	fa02 f70e 	lsl.w	r7, r2, lr
  407968:	ea4c 0c05 	orr.w	ip, ip, r5
  40796c:	fa00 f40e 	lsl.w	r4, r0, lr
  407970:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407974:	0c25      	lsrs	r5, r4, #16
  407976:	fbbc f8fa 	udiv	r8, ip, sl
  40797a:	fa1f f987 	uxth.w	r9, r7
  40797e:	fb0a cc18 	mls	ip, sl, r8, ip
  407982:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407986:	fb08 f309 	mul.w	r3, r8, r9
  40798a:	42ab      	cmp	r3, r5
  40798c:	d90a      	bls.n	4079a4 <__udivmoddi4+0x6c>
  40798e:	19ed      	adds	r5, r5, r7
  407990:	f108 32ff 	add.w	r2, r8, #4294967295
  407994:	f080 8123 	bcs.w	407bde <__udivmoddi4+0x2a6>
  407998:	42ab      	cmp	r3, r5
  40799a:	f240 8120 	bls.w	407bde <__udivmoddi4+0x2a6>
  40799e:	f1a8 0802 	sub.w	r8, r8, #2
  4079a2:	443d      	add	r5, r7
  4079a4:	1aed      	subs	r5, r5, r3
  4079a6:	b2a4      	uxth	r4, r4
  4079a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4079ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4079b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4079b4:	fb00 f909 	mul.w	r9, r0, r9
  4079b8:	45a1      	cmp	r9, r4
  4079ba:	d909      	bls.n	4079d0 <__udivmoddi4+0x98>
  4079bc:	19e4      	adds	r4, r4, r7
  4079be:	f100 33ff 	add.w	r3, r0, #4294967295
  4079c2:	f080 810a 	bcs.w	407bda <__udivmoddi4+0x2a2>
  4079c6:	45a1      	cmp	r9, r4
  4079c8:	f240 8107 	bls.w	407bda <__udivmoddi4+0x2a2>
  4079cc:	3802      	subs	r0, #2
  4079ce:	443c      	add	r4, r7
  4079d0:	eba4 0409 	sub.w	r4, r4, r9
  4079d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4079d8:	2100      	movs	r1, #0
  4079da:	2e00      	cmp	r6, #0
  4079dc:	d061      	beq.n	407aa2 <__udivmoddi4+0x16a>
  4079de:	fa24 f40e 	lsr.w	r4, r4, lr
  4079e2:	2300      	movs	r3, #0
  4079e4:	6034      	str	r4, [r6, #0]
  4079e6:	6073      	str	r3, [r6, #4]
  4079e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4079ec:	428b      	cmp	r3, r1
  4079ee:	d907      	bls.n	407a00 <__udivmoddi4+0xc8>
  4079f0:	2e00      	cmp	r6, #0
  4079f2:	d054      	beq.n	407a9e <__udivmoddi4+0x166>
  4079f4:	2100      	movs	r1, #0
  4079f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4079fa:	4608      	mov	r0, r1
  4079fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a00:	fab3 f183 	clz	r1, r3
  407a04:	2900      	cmp	r1, #0
  407a06:	f040 808e 	bne.w	407b26 <__udivmoddi4+0x1ee>
  407a0a:	42ab      	cmp	r3, r5
  407a0c:	d302      	bcc.n	407a14 <__udivmoddi4+0xdc>
  407a0e:	4282      	cmp	r2, r0
  407a10:	f200 80fa 	bhi.w	407c08 <__udivmoddi4+0x2d0>
  407a14:	1a84      	subs	r4, r0, r2
  407a16:	eb65 0503 	sbc.w	r5, r5, r3
  407a1a:	2001      	movs	r0, #1
  407a1c:	46ac      	mov	ip, r5
  407a1e:	2e00      	cmp	r6, #0
  407a20:	d03f      	beq.n	407aa2 <__udivmoddi4+0x16a>
  407a22:	e886 1010 	stmia.w	r6, {r4, ip}
  407a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a2a:	b912      	cbnz	r2, 407a32 <__udivmoddi4+0xfa>
  407a2c:	2701      	movs	r7, #1
  407a2e:	fbb7 f7f2 	udiv	r7, r7, r2
  407a32:	fab7 fe87 	clz	lr, r7
  407a36:	f1be 0f00 	cmp.w	lr, #0
  407a3a:	d134      	bne.n	407aa6 <__udivmoddi4+0x16e>
  407a3c:	1beb      	subs	r3, r5, r7
  407a3e:	0c3a      	lsrs	r2, r7, #16
  407a40:	fa1f fc87 	uxth.w	ip, r7
  407a44:	2101      	movs	r1, #1
  407a46:	fbb3 f8f2 	udiv	r8, r3, r2
  407a4a:	0c25      	lsrs	r5, r4, #16
  407a4c:	fb02 3318 	mls	r3, r2, r8, r3
  407a50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407a54:	fb0c f308 	mul.w	r3, ip, r8
  407a58:	42ab      	cmp	r3, r5
  407a5a:	d907      	bls.n	407a6c <__udivmoddi4+0x134>
  407a5c:	19ed      	adds	r5, r5, r7
  407a5e:	f108 30ff 	add.w	r0, r8, #4294967295
  407a62:	d202      	bcs.n	407a6a <__udivmoddi4+0x132>
  407a64:	42ab      	cmp	r3, r5
  407a66:	f200 80d1 	bhi.w	407c0c <__udivmoddi4+0x2d4>
  407a6a:	4680      	mov	r8, r0
  407a6c:	1aed      	subs	r5, r5, r3
  407a6e:	b2a3      	uxth	r3, r4
  407a70:	fbb5 f0f2 	udiv	r0, r5, r2
  407a74:	fb02 5510 	mls	r5, r2, r0, r5
  407a78:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  407a7c:	fb0c fc00 	mul.w	ip, ip, r0
  407a80:	45a4      	cmp	ip, r4
  407a82:	d907      	bls.n	407a94 <__udivmoddi4+0x15c>
  407a84:	19e4      	adds	r4, r4, r7
  407a86:	f100 33ff 	add.w	r3, r0, #4294967295
  407a8a:	d202      	bcs.n	407a92 <__udivmoddi4+0x15a>
  407a8c:	45a4      	cmp	ip, r4
  407a8e:	f200 80b8 	bhi.w	407c02 <__udivmoddi4+0x2ca>
  407a92:	4618      	mov	r0, r3
  407a94:	eba4 040c 	sub.w	r4, r4, ip
  407a98:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407a9c:	e79d      	b.n	4079da <__udivmoddi4+0xa2>
  407a9e:	4631      	mov	r1, r6
  407aa0:	4630      	mov	r0, r6
  407aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407aa6:	f1ce 0420 	rsb	r4, lr, #32
  407aaa:	fa05 f30e 	lsl.w	r3, r5, lr
  407aae:	fa07 f70e 	lsl.w	r7, r7, lr
  407ab2:	fa20 f804 	lsr.w	r8, r0, r4
  407ab6:	0c3a      	lsrs	r2, r7, #16
  407ab8:	fa25 f404 	lsr.w	r4, r5, r4
  407abc:	ea48 0803 	orr.w	r8, r8, r3
  407ac0:	fbb4 f1f2 	udiv	r1, r4, r2
  407ac4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407ac8:	fb02 4411 	mls	r4, r2, r1, r4
  407acc:	fa1f fc87 	uxth.w	ip, r7
  407ad0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407ad4:	fb01 f30c 	mul.w	r3, r1, ip
  407ad8:	42ab      	cmp	r3, r5
  407ada:	fa00 f40e 	lsl.w	r4, r0, lr
  407ade:	d909      	bls.n	407af4 <__udivmoddi4+0x1bc>
  407ae0:	19ed      	adds	r5, r5, r7
  407ae2:	f101 30ff 	add.w	r0, r1, #4294967295
  407ae6:	f080 808a 	bcs.w	407bfe <__udivmoddi4+0x2c6>
  407aea:	42ab      	cmp	r3, r5
  407aec:	f240 8087 	bls.w	407bfe <__udivmoddi4+0x2c6>
  407af0:	3902      	subs	r1, #2
  407af2:	443d      	add	r5, r7
  407af4:	1aeb      	subs	r3, r5, r3
  407af6:	fa1f f588 	uxth.w	r5, r8
  407afa:	fbb3 f0f2 	udiv	r0, r3, r2
  407afe:	fb02 3310 	mls	r3, r2, r0, r3
  407b02:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407b06:	fb00 f30c 	mul.w	r3, r0, ip
  407b0a:	42ab      	cmp	r3, r5
  407b0c:	d907      	bls.n	407b1e <__udivmoddi4+0x1e6>
  407b0e:	19ed      	adds	r5, r5, r7
  407b10:	f100 38ff 	add.w	r8, r0, #4294967295
  407b14:	d26f      	bcs.n	407bf6 <__udivmoddi4+0x2be>
  407b16:	42ab      	cmp	r3, r5
  407b18:	d96d      	bls.n	407bf6 <__udivmoddi4+0x2be>
  407b1a:	3802      	subs	r0, #2
  407b1c:	443d      	add	r5, r7
  407b1e:	1aeb      	subs	r3, r5, r3
  407b20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407b24:	e78f      	b.n	407a46 <__udivmoddi4+0x10e>
  407b26:	f1c1 0720 	rsb	r7, r1, #32
  407b2a:	fa22 f807 	lsr.w	r8, r2, r7
  407b2e:	408b      	lsls	r3, r1
  407b30:	fa05 f401 	lsl.w	r4, r5, r1
  407b34:	ea48 0303 	orr.w	r3, r8, r3
  407b38:	fa20 fe07 	lsr.w	lr, r0, r7
  407b3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407b40:	40fd      	lsrs	r5, r7
  407b42:	ea4e 0e04 	orr.w	lr, lr, r4
  407b46:	fbb5 f9fc 	udiv	r9, r5, ip
  407b4a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  407b4e:	fb0c 5519 	mls	r5, ip, r9, r5
  407b52:	fa1f f883 	uxth.w	r8, r3
  407b56:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  407b5a:	fb09 f408 	mul.w	r4, r9, r8
  407b5e:	42ac      	cmp	r4, r5
  407b60:	fa02 f201 	lsl.w	r2, r2, r1
  407b64:	fa00 fa01 	lsl.w	sl, r0, r1
  407b68:	d908      	bls.n	407b7c <__udivmoddi4+0x244>
  407b6a:	18ed      	adds	r5, r5, r3
  407b6c:	f109 30ff 	add.w	r0, r9, #4294967295
  407b70:	d243      	bcs.n	407bfa <__udivmoddi4+0x2c2>
  407b72:	42ac      	cmp	r4, r5
  407b74:	d941      	bls.n	407bfa <__udivmoddi4+0x2c2>
  407b76:	f1a9 0902 	sub.w	r9, r9, #2
  407b7a:	441d      	add	r5, r3
  407b7c:	1b2d      	subs	r5, r5, r4
  407b7e:	fa1f fe8e 	uxth.w	lr, lr
  407b82:	fbb5 f0fc 	udiv	r0, r5, ip
  407b86:	fb0c 5510 	mls	r5, ip, r0, r5
  407b8a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  407b8e:	fb00 f808 	mul.w	r8, r0, r8
  407b92:	45a0      	cmp	r8, r4
  407b94:	d907      	bls.n	407ba6 <__udivmoddi4+0x26e>
  407b96:	18e4      	adds	r4, r4, r3
  407b98:	f100 35ff 	add.w	r5, r0, #4294967295
  407b9c:	d229      	bcs.n	407bf2 <__udivmoddi4+0x2ba>
  407b9e:	45a0      	cmp	r8, r4
  407ba0:	d927      	bls.n	407bf2 <__udivmoddi4+0x2ba>
  407ba2:	3802      	subs	r0, #2
  407ba4:	441c      	add	r4, r3
  407ba6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  407baa:	eba4 0408 	sub.w	r4, r4, r8
  407bae:	fba0 8902 	umull	r8, r9, r0, r2
  407bb2:	454c      	cmp	r4, r9
  407bb4:	46c6      	mov	lr, r8
  407bb6:	464d      	mov	r5, r9
  407bb8:	d315      	bcc.n	407be6 <__udivmoddi4+0x2ae>
  407bba:	d012      	beq.n	407be2 <__udivmoddi4+0x2aa>
  407bbc:	b156      	cbz	r6, 407bd4 <__udivmoddi4+0x29c>
  407bbe:	ebba 030e 	subs.w	r3, sl, lr
  407bc2:	eb64 0405 	sbc.w	r4, r4, r5
  407bc6:	fa04 f707 	lsl.w	r7, r4, r7
  407bca:	40cb      	lsrs	r3, r1
  407bcc:	431f      	orrs	r7, r3
  407bce:	40cc      	lsrs	r4, r1
  407bd0:	6037      	str	r7, [r6, #0]
  407bd2:	6074      	str	r4, [r6, #4]
  407bd4:	2100      	movs	r1, #0
  407bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407bda:	4618      	mov	r0, r3
  407bdc:	e6f8      	b.n	4079d0 <__udivmoddi4+0x98>
  407bde:	4690      	mov	r8, r2
  407be0:	e6e0      	b.n	4079a4 <__udivmoddi4+0x6c>
  407be2:	45c2      	cmp	sl, r8
  407be4:	d2ea      	bcs.n	407bbc <__udivmoddi4+0x284>
  407be6:	ebb8 0e02 	subs.w	lr, r8, r2
  407bea:	eb69 0503 	sbc.w	r5, r9, r3
  407bee:	3801      	subs	r0, #1
  407bf0:	e7e4      	b.n	407bbc <__udivmoddi4+0x284>
  407bf2:	4628      	mov	r0, r5
  407bf4:	e7d7      	b.n	407ba6 <__udivmoddi4+0x26e>
  407bf6:	4640      	mov	r0, r8
  407bf8:	e791      	b.n	407b1e <__udivmoddi4+0x1e6>
  407bfa:	4681      	mov	r9, r0
  407bfc:	e7be      	b.n	407b7c <__udivmoddi4+0x244>
  407bfe:	4601      	mov	r1, r0
  407c00:	e778      	b.n	407af4 <__udivmoddi4+0x1bc>
  407c02:	3802      	subs	r0, #2
  407c04:	443c      	add	r4, r7
  407c06:	e745      	b.n	407a94 <__udivmoddi4+0x15c>
  407c08:	4608      	mov	r0, r1
  407c0a:	e708      	b.n	407a1e <__udivmoddi4+0xe6>
  407c0c:	f1a8 0802 	sub.w	r8, r8, #2
  407c10:	443d      	add	r5, r7
  407c12:	e72b      	b.n	407a6c <__udivmoddi4+0x134>

00407c14 <__aeabi_idiv0>:
  407c14:	4770      	bx	lr
  407c16:	bf00      	nop
  407c18:	0a05000d 	.word	0x0a05000d
  407c1c:	0000004b 	.word	0x0000004b
  407c20:	00001932 	.word	0x00001932
  407c24:	0e00008b 	.word	0x0e00008b
  407c28:	32800008 	.word	0x32800008
  407c2c:	030a0205 	.word	0x030a0205
  407c30:	0f022003 	.word	0x0f022003
  407c34:	00000a0f 	.word	0x00000a0f
  407c38:	18180000 	.word	0x18180000
  407c3c:	00002020 	.word	0x00002020
  407c40:	0a000000 	.word	0x0a000000
  407c44:	02020000 	.word	0x02020000
  407c48:	18180000 	.word	0x18180000
  407c4c:	00030000 	.word	0x00030000
  407c50:	00000000 	.word	0x00000000
  407c54:	18010002 	.word	0x18010002
  407c58:	1e1e1e1e 	.word	0x1e1e1e1e
  407c5c:	1e1e1e1e 	.word	0x1e1e1e1e
  407c60:	1e1e1e1e 	.word	0x1e1e1e1e
  407c64:	00001e1e 	.word	0x00001e1e
	...
  407c78:	454c4449 	.word	0x454c4449
  407c7c:	00000000 	.word	0x00000000
  407c80:	51726d54 	.word	0x51726d54
  407c84:	00000000 	.word	0x00000000
  407c88:	20726d54 	.word	0x20726d54
  407c8c:	00637653 	.word	0x00637653
  407c90:	00000078 	.word	0x00000078
  407c94:	0000004b 	.word	0x0000004b
  407c98:	00000002 	.word	0x00000002
  407c9c:	00000001 	.word	0x00000001
  407ca0:	00403f85 	.word	0x00403f85
  407ca4:	00000001 	.word	0x00000001
  407ca8:	00ff6347 	.word	0x00ff6347
  407cac:	00000000 	.word	0x00000000
  407cb0:	000000a0 	.word	0x000000a0
  407cb4:	00000028 	.word	0x00000028
  407cb8:	00000078 	.word	0x00000078
  407cbc:	0000004b 	.word	0x0000004b
  407cc0:	00000002 	.word	0x00000002
  407cc4:	00000001 	.word	0x00000001
  407cc8:	00403ff1 	.word	0x00403ff1
  407ccc:	00000001 	.word	0x00000001
  407cd0:	0000ffff 	.word	0x0000ffff
  407cd4:	00000000 	.word	0x00000000
  407cd8:	000000a0 	.word	0x000000a0
  407cdc:	0000008c 	.word	0x0000008c
  407ce0:	00000078 	.word	0x00000078
  407ce4:	0000004b 	.word	0x0000004b
  407ce8:	00000002 	.word	0x00000002
  407cec:	00000001 	.word	0x00000001
  407cf0:	0040405d 	.word	0x0040405d
  407cf4:	00000001 	.word	0x00000001
  407cf8:	00a0522d 	.word	0x00a0522d
  407cfc:	00000000 	.word	0x00000000
  407d00:	000000a0 	.word	0x000000a0
  407d04:	000000f0 	.word	0x000000f0

00407d08 <image_data_Image>:
  407d08:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  407d18:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  407d28:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  407d38:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  407d48:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  407d58:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  407d68:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  407d78:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  407d88:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  407d98:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  407da8:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  407db8:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  407dc8:	3f463f3f 3f3f463f 89848446 f6cac8c8     ??F??F??F.......
  407dd8:	f6f6f6f6 f6f6f6f6 c8f6f6f6 8484cac8     ................
  407de8:	463f3f89 3f463f3f 3f3f463f 463f3f46     .??F??F??F??F??F
  407df8:	3f463f3f 3f3f463f 463f3f46 56463f3f     ??F??F??F??F??FV
  407e08:	d4d45c56 b9bef2d5 e54d5bea 14e50014     V\.......[M.....
  407e18:	0014e500 ea0014e5 bef24d5b d5d4d4b9     ........[M......
  407e28:	3f5c5656 3f3f463f 463f3f46 3f463f3f     VV\??F??F??F??F?
  407e38:	3f3f463f 463f3f46 eb5c5656 69ebebeb     ?F??F??FVV\....i
  407e48:	0014e55c e50014e5 14e50014 0014e500     \...............
  407e58:	e50014e5 14e50014 6c77ec00 56ebebeb     ..........wl...V
  407e68:	3f3f5c56 463f3f46 3f463f3f 3f3f463f     V\??F??F??F??F??
  407e78:	463f3f46 ecd5d4d4 14e56c77 3040ea00     F??F....wl....@0
  407e88:	e53040ea 14e50014 0014e500 ea0014e5     .@0.............
  407e98:	40ea3040 0014e530 d46c77ec 3f3fd5d4     @0.@0....wl...??
  407ea8:	463f3f46 3f463f3f 3f3f463f 89848446     F??F??F??F??F...
  407eb8:	e5b9bef2 40ea0014 eff0fd30 eaeff0fd     .......@0.......
  407ec8:	14e53040 0014e500 fd3040ea f0fdeff0     @0.......@0.....
  407ed8:	3040eaef f20014e5 8484b9be 463f3f89     ..@0.........??F
  407ee8:	3f463f3f 3f3f463f cac8c846 e54d5bea     ??F??F??F....[M.
  407ef8:	40ea0014 eff0fd30 fdffffff 40eaeff0     ...@0..........@
  407f08:	3040ea30 ffeff0fd f0fdffff 3040eaef     0.@0..........@0
  407f18:	ea0014e5 c8c84d5b 463f3fca 3f463f3f     ....[M...??F??F?
  407f28:	3f3f463f f6f6f646 e50014e5 14e50014     ?F??F...........
  407f38:	3040ea00 ffeff0fd f0fdffff eff0fdef     ..@0............
  407f48:	fdffffff 40eaeff0 0014e530 e50014e5     .......@0.......
  407f58:	f6f60014 463f3ff6 3f463f3f 3f3f463f     .....??F??F??F??
  407f68:	f6f6f646 e50014e5 14e50014 0014e500     F...............
  407f78:	fd3040ea ffffeff0 ffffffff eaeff0fd     .@0.............
  407f88:	14e53040 0014e500 e50014e5 f6f60014     @0..............
  407f98:	463f3ff6 3f463f3f 3f3f463f f6f6f646     .??F??F??F??F...
  407fa8:	e50014e5 14e50014 0014e500 fd3040ea     .............@0.
  407fb8:	ffffeff0 ffffffff eaeff0fd 14e53040     ............@0..
  407fc8:	0014e500 e50014e5 f6f60014 463f3ff6     .............??F
  407fd8:	3f463f3f 3f3f463f f6f6f646 e50014e5     ??F??F??F.......
  407fe8:	14e50014 3040ea00 ffeff0fd f0fdffff     ......@0........
  407ff8:	eff0fdef fdffffff 40eaeff0 0014e530     ...........@0...
  408008:	e50014e5 f6f60014 463f3ff6 3f463f3f     .........??F??F?
  408018:	3f3f463f cac8c846 e54d5bea 40ea0014     ?F??F....[M....@
  408028:	eff0fd30 fdffffff 40eaeff0 3040ea30     0..........@0.@0
  408038:	ffeff0fd f0fdffff 3040eaef ea0014e5     ..........@0....
  408048:	c8c84d5b 463f3fca 3f463f3f 3f3f463f     [M...??F??F??F??
  408058:	89848446 e5b9bef2 40ea0014 eff0fd30     F..........@0...
  408068:	eaeff0fd 14e53040 0014e500 fd3040ea     ....@0.......@0.
  408078:	f0fdeff0 3040eaef f20014e5 8484b9be     ......@0........
  408088:	463f3f89 3f463f3f 3f3f463f 463f3f46     .??F??F??F??F??F
  408098:	ebd5d4d4 14e55c69 3040ea00 e53040ea     ....i\....@0.@0.
  4080a8:	14e50014 0014e500 ea0014e5 40ea3040     ............@0.@
  4080b8:	0014e530 d46c77ec 3f3fd5d4 463f3f46     0....wl...??F??F
  4080c8:	3f463f3f 3f3f463f 463f3f46 eb5c5656     ??F??F??F??FVV\.
  4080d8:	77ecebeb 0014e56c e50014e5 14e50014     ...wl...........
  4080e8:	0014e500 e50014e5 14e50014 6c77ec00     ..............wl
  4080f8:	56ebebeb 3f3f5c56 463f3f46 3f463f3f     ...VV\??F??F??F?
  408108:	3f3f463f 463f3f46 56463f3f d4d45c56     ?F??F??F??FVV\..
  408118:	b9bef2d5 e54d5bea 14e50014 0014e500     .....[M.........
  408128:	ea0014e5 bef24d5b d5d4d4b9 3f5c5656     ....[M......VV\?
  408138:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  408148:	463f3f46 3f463f3f 3f3f463f 89848446     F??F??F??F??F...
  408158:	f6cac8c8 f6f6f6f6 f6f6f6f6 c8f6f6f6     ................
  408168:	8484cac8 463f3f89 3f463f3f 3f3f463f     .....??F??F??F??
  408178:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  408188:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  408198:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  4081a8:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  4081b8:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  4081c8:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  4081d8:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  4081e8:	3f463f3f 3f3f463f 463f3f46              ??F??F??F??F

004081f4 <image_data_image1>:
  4081f4:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  408204:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  408214:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  408224:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  408234:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  408244:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  408254:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  408264:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  408274:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  408284:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  408294:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  4082a4:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  4082b4:	3f463f3f 3f3f463f 463f3f46 3f463f3f     ??F??F??F??F??F?
  4082c4:	3f3f463f 463f3f46 3f463f3f 3f3f463f     ?F??F??F??F??F??
  4082d4:	463f3f46 3f463f3f 3f3f463f 463f3f46     F??F??F??F??F??F
  4082e4:	3f463f3f 3f3f463f 463f3f46 25262525     ??F??F??F??F%%&%
  4082f4:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408304:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408314:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408324:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408334:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408344:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408354:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408364:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408374:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408384:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408394:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  4083a4:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  4083b4:	25252625 75747426 f6c2c1c1 f6f6f6f6     %&%%&ttu........
  4083c4:	f6f6f6f6 c1f6f6f6 7474c2c1 26252575     ..........ttu%%&
  4083d4:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  4083e4:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  4083f4:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408404:	3f262525 cfcf403f f1e1bfcf 1be8bc5f     %%&??@......_...
  408414:	a11be2a1 e2a11be2 5fe2a11b e1bfe8bc     ..........._....
  408424:	cfcfcff1 25403f3f 25252625 26252526     ....??@%%&%%&%%&
  408434:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408444:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408454:	26252526 e9403f3f c16de9e9 e2a11bea     &%%&??@...m.....
  408464:	1be2a11b a11be2a1 e2a11be2 1be2a11b     ................
  408474:	a11be2a1 ebc67be2 3fe9e9e9 2525403f     .....{.....??@%%
  408484:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408494:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  4084a4:	25252625 26252526 7bcfcfcf a11bebc6     %&%%&%%&...{....
  4084b4:	e2a11be2 1be2a11b ffffe2a1 ffffffff     ................
  4084c4:	1be2a11b a11be2a1 e2a11be2 cfebc67b     ............{...
  4084d4:	2525cfcf 26252526 25262525 25252625     ..%%&%%&%%&%%&%%
  4084e4:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  4084f4:	25262525 25252625 75747426 1bf1e1bf     %%&%%&%%&ttu....
  408504:	a11be2a1 e2a11be2 1be2a11b ffffe2a1     ................
  408514:	ffffffff 1be2a11b a11be2a1 e2a11be2     ................
  408524:	bfe2a11b 7474f1e1 26252575 25262525     ......ttu%%&%%&%
  408534:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408544:	26252526 25262525 25252625 c2c1c126     &%%&%%&%%&%%&...
  408554:	1be8bc5f a11be2a1 e2a11be2 1be2a11b     _...............
  408564:	a11be2a1 e2a11be2 1be2a11b a11be2a1     ................
  408574:	e2a11be2 5fe2a11b c1c1e8bc 262525c2     ......._.....%%&
  408584:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408594:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  4085a4:	f6f6f626 1be2a11b a11be2a1 e2a11be2     &...............
  4085b4:	1be2a11b ffffe2a1 ffffffff 1be2a11b     ................
  4085c4:	a11be2a1 e2a11be2 1be2a11b f6f6e2a1     ................
  4085d4:	262525f6 25262525 25252625 26252526     .%%&%%&%%&%%&%%&
  4085e4:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  4085f4:	25252625 f6f6f626 1be2a11b a11be2a1     %&%%&...........
  408604:	e2a11be2 1be2a11b ffffe2a1 ffffffff     ................
  408614:	1be2a11b a11be2a1 e2a11be2 1be2a11b     ................
  408624:	f6f6e2a1 262525f6 25262525 25252625     .....%%&%%&%%&%%
  408634:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408644:	25262525 25252625 f6f6f626 1be2a11b     %%&%%&%%&.......
  408654:	a11be2a1 e2a11be2 1be2a11b ffffe2a1     ................
  408664:	ffffffff 1be2a11b a11be2a1 e2a11be2     ................
  408674:	1be2a11b f6f6e2a1 262525f6 25262525     .........%%&%%&%
  408684:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408694:	26252526 25262525 25252625 f6f6f626     &%%&%%&%%&%%&...
  4086a4:	1be2a11b a11be2a1 e2a11be2 1be2a11b     ................
  4086b4:	ffffe2a1 ffffffff 1be2a11b a11be2a1     ................
  4086c4:	e2a11be2 1be2a11b f6f6e2a1 262525f6     .............%%&
  4086d4:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  4086e4:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  4086f4:	c2c1c126 1be8bc5f a11be2a1 e2a11be2     &..._...........
  408704:	1be2a11b ffffe2a1 ffffffff 1be2a11b     ................
  408714:	a11be2a1 e2a11be2 5fe2a11b c1c1e8bc     ..........._....
  408724:	262525c2 25262525 25252625 26252526     .%%&%%&%%&%%&%%&
  408734:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408744:	25252625 75747426 1bf1e1bf a11be2a1     %&%%&ttu........
  408754:	e2a11be2 1be2a11b ffffe2a1 ffffffff     ................
  408764:	1be2a11b a11be2a1 e2a11be2 bfe2a11b     ................
  408774:	7474f1e1 26252575 25262525 25252625     ..ttu%%&%%&%%&%%
  408784:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408794:	25262525 25252625 26252526 6dcfcfcf     %%&%%&%%&%%&...m
  4087a4:	a11beac1 e2a11be2 1be2a11b ffffe2a1     ................
  4087b4:	ffffffff 1be2a11b a11be2a1 e2a11be2     ................
  4087c4:	cfebc67b 2525cfcf 26252526 25262525     {.....%%&%%&%%&%
  4087d4:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  4087e4:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  4087f4:	e9403f3f c67be9e9 e2a11beb 1be2a11b     ??@...{.........
  408804:	a11be2a1 e2a11be2 1be2a11b a11be2a1     ................
  408814:	ebc67be2 3fe9e9e9 2525403f 26252526     .{.....??@%%&%%&
  408824:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408834:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408844:	26252526 3f262525 cfcf403f f1e1bfcf     &%%&%%&??@......
  408854:	1be8bc5f a11be2a1 e2a11be2 5fe2a11b     _.............._
  408864:	e1bfe8bc cfcfcff1 25403f3f 25252625     ........??@%%&%%
  408874:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408884:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408894:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  4088a4:	75747426 f6c2c1c1 f6f6f6f6 f6f6f6f6     &ttu............
  4088b4:	c1f6f6f6 7474c2c1 26252575 25262525     ......ttu%%&%%&%
  4088c4:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  4088d4:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  4088e4:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  4088f4:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408904:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408914:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408924:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408934:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408944:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408954:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408964:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408974:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408984:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408994:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  4089a4:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  4089b4:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  4089c4:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  4089d4:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  4089e4:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  4089f4:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408a04:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408a14:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408a24:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408a34:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408a44:	25252625 26252526 25262525 25252625     %&%%&%%&%%&%%&%%
  408a54:	26252526 25262525 25252625 26252526     &%%&%%&%%&%%&%%&
  408a64:	25262525 25252625 26252526 25262525     %%&%%&%%&%%&%%&%
  408a74:	25252625 26252526                       %&%%&%%&

00408a7c <image_data_image3>:
  408a7c:	ffffffff ffffffff ffffffff ffffffff     ................
  408a8c:	ffffffff ffffffff ffffffff ffffffff     ................
  408a9c:	8d0000ff 008d0000 00008d00 8d00008d     ................
  408aac:	008d0000 00008d00 ffffff8d ffffffff     ................
  408abc:	ffffffff ffffffff ffffffff ffffffff     ................
  408acc:	ffffffff ffffffff ffffffff 8d0000ff     ................
  408adc:	00ffffff 00008d00 8d00008d ff8d0000     ................
  408aec:	0000ffff ffffff8d 00ffffff ffff8d00     ................
  408afc:	8d0000ff ffffffff ffffffff ffffffff     ................
  408b0c:	ff8d0000 ffffffff 8d0000ff ffffffff     ................
  408b1c:	ffffffff ffffffff ff8d0000 0000ffff     ................
  408b2c:	ffffff8d 00ffffff ffff8d00 8d0000ff     ................
  408b3c:	008d0000 ffff8d00 ffffffff ff8d0000     ................
  408b4c:	ffffffff ffffffff ffffffff ffffffff     ................
  408b5c:	ffffffff ffffffff 0000ffff ffffff8d     ................
  408b6c:	00ffffff 00008d00 8d00008d 008d0000     ................
  408b7c:	00008d00 8d00008d ffffffff ffffffff     ................
  408b8c:	ffffffff ffffffff ffffffff ffffffff     ................
  408b9c:	ffffffff ffffffff ffffffff 0074786d     ............mxt.
  408bac:	6c696146 74206465 7263206f 65746165     Failed to create
  408bbc:	73657420 656c2074 61742064 0a0d6b73      test led task..
  408bcc:	00000000 0064636c 64253a78 253a7920     ....lcd.x:%d y:%
  408bdc:	00000a64 63617473 766f206b 6c667265     d...stack overfl
  408bec:	2520776f 73252078 00000a0d              ow %x %s....

00408bf8 <_global_impure_ptr>:
  408bf8:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  408c08:	46454443 00000000 33323130 37363534     CDEF....01234567
  408c18:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  408c28:	0000296c                                l)..

00408c2c <blanks.7217>:
  408c2c:	20202020 20202020 20202020 20202020                     

00408c3c <zeroes.7218>:
  408c3c:	30303030 30303030 30303030 30303030     0000000000000000
  408c4c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00408c5c <_ctype_>:
  408c5c:	20202000 20202020 28282020 20282828     .         ((((( 
  408c6c:	20202020 20202020 20202020 20202020                     
  408c7c:	10108820 10101010 10101010 10101010      ...............
  408c8c:	04040410 04040404 10040404 10101010     ................
  408c9c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408cac:	01010101 01010101 01010101 10101010     ................
  408cbc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408ccc:	02020202 02020202 02020202 10101010     ................
  408cdc:	00000020 00000000 00000000 00000000      ...............
	...

00408d60 <_init>:
  408d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408d62:	bf00      	nop
  408d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408d66:	bc08      	pop	{r3}
  408d68:	469e      	mov	lr, r3
  408d6a:	4770      	bx	lr

00408d6c <__init_array_start>:
  408d6c:	00406579 	.word	0x00406579

00408d70 <__frame_dummy_init_array_entry>:
  408d70:	0040018d                                ..@.

00408d74 <_fini>:
  408d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408d76:	bf00      	nop
  408d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408d7a:	bc08      	pop	{r3}
  408d7c:	469e      	mov	lr, r3
  408d7e:	4770      	bx	lr

00408d80 <__fini_array_start>:
  408d80:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	c874 2040                                   t.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	7671 0040 7001 0040 0000 0000 8c5c 0040     qv@..p@.....\.@.
20400944:	8c58 0040 8bcc 0040 8bcc 0040 8bcc 0040     X.@...@...@...@.
20400954:	8bcc 0040 8bcc 0040 8bcc 0040 8bcc 0040     ..@...@...@...@.
20400964:	8bcc 0040 8bcc 0040 ffff ffff ffff ffff     ..@...@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
